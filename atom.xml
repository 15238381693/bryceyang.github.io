<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V</title>
  
  <subtitle>For man is man and master of his fate.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://todebug.com/"/>
  <updated>2018-11-05T11:43:52.304Z</updated>
  <id>https://todebug.com/</id>
  
  <author>
    <name>Kai Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Python实现并查集</title>
    <link href="https://todebug.com/2018/10/22/union-find/"/>
    <id>https://todebug.com/2018/10/22/union-find/</id>
    <published>2018-10-21T16:00:00.000Z</published>
    <updated>2018-11-05T11:43:52.304Z</updated>
    
    <content type="html"><![CDATA[<p>并查集主要有两个功能：</p><ol><li>检测两个元素是否在同一个集合；</li><li>合并两个元素所在集合；</li></ol><a id="more"></a><p>本次实现使用的优化方法为路径压缩。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFind</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""并查集实现</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self._fatherMap = dict()</span><br><span class="line">        self._sizeMap = dict()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">makeSets</span><span class="hljs-params">(self, nodes)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""利用可迭代对象初始化并查集</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            nodes (iterable): 元素集合</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        self._fatherMap.clear()</span><br><span class="line">        self._sizeMap.clear()</span><br><span class="line">        <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> nodes:</span><br><span class="line">            self._fatherMap[node] = node</span><br><span class="line">            self._sizeMap[node] = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findHead</span><span class="hljs-params">(self, node)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""找几何头，其中有一个对长链的集合的平整操作,</span></span><br><span class="line"><span class="hljs-string">        平整操作执行的频率其实还需要进一步规整</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Raises:</span></span><br><span class="line"><span class="hljs-string">            KeyError: 如果本身传入的node就是不在全集里的就直接抛错</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.isValidNode(node):</span><br><span class="line">            <span class="hljs-keyword">raise</span> KeyError(<span class="hljs-string">'node not in set'</span>)</span><br><span class="line"></span><br><span class="line">        father = self._fatherMap.get(node)</span><br><span class="line">        <span class="hljs-keyword">if</span> father != node:</span><br><span class="line">            father = self.findHead(father)</span><br><span class="line">        self._fatherMap[node] = father</span><br><span class="line">        <span class="hljs-keyword">return</span> father</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findHeadNotIter</span><span class="hljs-params">(self, node)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""上面函数的非递归版</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.isValidNode(node):</span><br><span class="line">            <span class="hljs-keyword">raise</span> KeyError(<span class="hljs-string">'node not in set'</span>)</span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        father = self._fatherMap.get(node)</span><br><span class="line">        <span class="hljs-keyword">while</span> father != node:</span><br><span class="line">            stack.append(node)</span><br><span class="line">        <span class="hljs-keyword">while</span> stack:</span><br><span class="line">            temp = stack.pop()</span><br><span class="line">            self._sizeMap[self._fatherMap[temp]] -= <span class="hljs-number">1</span></span><br><span class="line">            self._fatherMap[temp] = father</span><br><span class="line">            self._sizeMap[father] += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">return</span> father</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isSameSet</span><span class="hljs-params">(self, n1, n2)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""检测两个元素是否在一个集合里</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            n1 (nodeType): 元素</span></span><br><span class="line"><span class="hljs-string">            n2 (nodeType): 元素</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool: True or False</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.findHead(n1) == self.findHead(n2)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isValidNode</span><span class="hljs-params">(self, node)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> node <span class="hljs-keyword">in</span> self._fatherMap</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">union</span><span class="hljs-params">(self, n1, n2)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""合并两个元素所在集合，小的集合并入到大的集合里，目的还是不想让集合链路过长</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> n1 <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> n2:</span><br><span class="line">            <span class="hljs-keyword">raise</span> KeyError(<span class="hljs-string">'node not valid'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.isValidNode(n1) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> self.isValidNode(n2):</span><br><span class="line">            <span class="hljs-keyword">raise</span> KeyError(<span class="hljs-string">'node not valid'</span>)</span><br><span class="line"></span><br><span class="line">        head1 = self.findHead(n1)</span><br><span class="line">        head2 = self.findHead(n2)</span><br><span class="line">        <span class="hljs-keyword">if</span> head1 != head2:</span><br><span class="line">            size1 = self._sizeMap[head1]</span><br><span class="line">            size2 = self._sizeMap[head2]</span><br><span class="line">            <span class="hljs-keyword">if</span> size1 &lt;= size2:</span><br><span class="line">                self._sizeMap[self._fatherMap[head1]] -= <span class="hljs-number">1</span></span><br><span class="line">                self._fatherMap[head1] = head2</span><br><span class="line">                self._sizeMap[head2] += size1</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                self._sizeMap[self._fatherMap[head2]] -= <span class="hljs-number">1</span></span><br><span class="line">                self._fatherMap[head2] = head1</span><br><span class="line">                self._sizeMap[head1] += size2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    sets = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]</span><br><span class="line">    ex = UnionFind()</span><br><span class="line">    ex.makeSets(sets)</span><br><span class="line">    print(ex._fatherMap)</span><br><span class="line">    print(ex._sizeMap)</span><br><span class="line">    ex.union(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br><span class="line">    ex.union(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span><br><span class="line">    print(ex._fatherMap)</span><br><span class="line">    print(ex._sizeMap)</span><br><span class="line">    ex.union(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)</span><br><span class="line">    print(ex._fatherMap)</span><br><span class="line">    print(ex._sizeMap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并查集主要有两个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检测两个元素是否在同一个集合；&lt;/li&gt;
&lt;li&gt;合并两个元素所在集合；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://todebug.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>BFPRT算法——Top-K问题求解</title>
    <link href="https://todebug.com/2018/10/06/BFPRT/"/>
    <id>https://todebug.com/2018/10/06/BFPRT/</id>
    <published>2018-10-05T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.690Z</updated>
    
    <content type="html"><![CDATA[<p>BFPRT算法是一种用来求解<code>Top-K</code>问题的算法，其时间复杂度可以减小到<code>O(n)</code>。</p><a id="more"></a><h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><p><img src="/assets/blog_images/bfprt.jpg" alt="bfprt"></p><h2 id="使用BFPRT求无序数组中第k小的元素，k从1开始"><a href="#使用BFPRT求无序数组中第k小的元素，k从1开始" class="headerlink" title="使用BFPRT求无序数组中第k小的元素，k从1开始"></a>使用BFPRT求无序数组中第k小的元素，k从1开始</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BFPRT</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""BFPRT算法实现：</span></span><br><span class="line"><span class="hljs-string">    BFPRT算法用来求解Top-K问题，时间复杂度可以做到严格的O(n)。</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bfprt</span><span class="hljs-params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""求得nums数组中第k小的元素，k从1开始</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            nums (list): 给定数组</span></span><br><span class="line"><span class="hljs-string">            k (int): 所求元素位置</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            num_type: 所求元素</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> k:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> k &gt; length:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        nums = list(nums)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.process(nums, k<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, length<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process</span><span class="hljs-params">(self, nums, k, begin, end)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> begin == end:</span><br><span class="line">            <span class="hljs-keyword">return</span> nums[begin]</span><br><span class="line"></span><br><span class="line">        pivot = self.get_median_of_medians(nums, begin, end)</span><br><span class="line">        cur_range = self.partition(nums, pivot, begin, end)</span><br><span class="line">        <span class="hljs-keyword">if</span> k &gt;= cur_range[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> k &lt;= cur_range[<span class="hljs-number">1</span>]:</span><br><span class="line">            <span class="hljs-keyword">return</span> nums[k]</span><br><span class="line">        <span class="hljs-keyword">elif</span> k &lt; cur_range[<span class="hljs-number">0</span>]:</span><br><span class="line">            <span class="hljs-keyword">return</span> self.process(nums, k, begin, cur_range[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> self.process(nums, k, cur_range[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>, end)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(self, nums, pivot, begin, end)</span>:</span></span><br><span class="line">        left = begin - <span class="hljs-number">1</span></span><br><span class="line">        cur = begin</span><br><span class="line">        right = end + <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> cur &lt; right:</span><br><span class="line">            <span class="hljs-keyword">if</span> nums[cur] == pivot:</span><br><span class="line">                cur += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> nums[cur] &lt; pivot:</span><br><span class="line">                left += <span class="hljs-number">1</span></span><br><span class="line">                self.swap(nums, left, cur)</span><br><span class="line">                cur += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                right -= <span class="hljs-number">1</span></span><br><span class="line">                self.swap(nums, right, cur)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> left+<span class="hljs-number">1</span>, right<span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_median_of_medians</span><span class="hljs-params">(self, nums, begin, end)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""取得中位数数组中位数"""</span></span><br><span class="line"></span><br><span class="line">        cur_len = end - begin + <span class="hljs-number">1</span></span><br><span class="line">        offset = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> cur_len % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span></span><br><span class="line">        medians = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(cur_len//<span class="hljs-number">5</span> + offset)]</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(medians)):</span><br><span class="line">            begin_idx = begin + i * <span class="hljs-number">5</span></span><br><span class="line">            end_idx = begin_idx + <span class="hljs-number">4</span></span><br><span class="line">            medians[i] = self.get_median(nums, begin_idx, min(end_idx, end))</span><br><span class="line">        <span class="hljs-keyword">return</span> self.process(medians, len(medians)//<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, len(medians)<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_median</span><span class="hljs-params">(self, nums, begin, end)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""取得给定范围的上中位数"""</span></span><br><span class="line"></span><br><span class="line">        self.insert_sort(nums, begin, end)</span><br><span class="line">        mid = (begin + end) // <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-keyword">return</span> nums[mid]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort</span><span class="hljs-params">(self, nums, begin, end)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(begin+<span class="hljs-number">1</span>, end+<span class="hljs-number">1</span>):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, begin, <span class="hljs-number">-1</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> nums[j] &lt; nums[j<span class="hljs-number">-1</span>]:</span><br><span class="line">                    self.swap(nums, j, j<span class="hljs-number">-1</span>)</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, nums, i, j)</span>:</span></span><br><span class="line">        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Check</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""对数器"""</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_nums</span><span class="hljs-params">(self, max_length, max_value)</span>:</span></span><br><span class="line">        length = random.randint(<span class="hljs-number">0</span>, max_length)</span><br><span class="line">        nums = [random.randint(-max_value, max_value) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    nums = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]  <span class="hljs-comment"># expect 4</span></span><br><span class="line">    ex = BFPRT()</span><br><span class="line">    ck = Check()</span><br><span class="line">    max_length, max_value = <span class="hljs-number">100</span>, <span class="hljs-number">100</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10000</span>):</span><br><span class="line">        nums = ck.generate_nums(max_length, max_value)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):</span><br><span class="line">            res = ex.bfprt(nums, i+<span class="hljs-number">1</span>)</span><br><span class="line">            check_res = sorted(nums)[i]</span><br><span class="line">            <span class="hljs-keyword">if</span> res != check_res:</span><br><span class="line">                print(<span class="hljs-string">'oops, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;'</span>, nums, i+<span class="hljs-number">1</span>, res, check_res)</span><br><span class="line">    print(time.time()-start)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BFPRT算法是一种用来求解&lt;code&gt;Top-K&lt;/code&gt;问题的算法，其时间复杂度可以减小到&lt;code&gt;O(n)&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://todebug.com/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://todebug.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Manacher算法</title>
    <link href="https://todebug.com/2018/09/27/manacher/"/>
    <id>https://todebug.com/2018/09/27/manacher/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.530Z</updated>
    
    <content type="html"><![CDATA[<p>Manacher算法用作求字符串中的最长回文串长度。</p><a id="more"></a><h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><p><img src="/assets/blog_images/manacher.jpeg" alt="manacher"></p><h2 id="利用manacher求解LeetCode第五题最长回文子串问题"><a href="#利用manacher求解LeetCode第五题最长回文子串问题" class="headerlink" title="利用manacher求解LeetCode第五题最长回文子串问题"></a>利用manacher求解LeetCode第五题最长回文子串问题</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [5] Longest Palindromic Substring</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/longest-palindromic-substring/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (25.62%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    370.8K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.4M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"babad"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given a string s, find the longest palindromic substring in s. You may assume</span></span><br><span class="line"><span class="hljs-comment"># that the maximum length of s is 1000.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "babad"</span></span><br><span class="line"><span class="hljs-comment"># Output: "bab"</span></span><br><span class="line"><span class="hljs-comment"># Note: "aba" is also a valid answer.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "cbbd"</span></span><br><span class="line"><span class="hljs-comment"># Output: "bb"</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type s: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: str</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line">        length = len(s)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        s = self.str_trans(s)</span><br><span class="line"></span><br><span class="line">        length = len(s)</span><br><span class="line">        res = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line">        right = c  = <span class="hljs-number">-1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            res[i] = min(res[<span class="hljs-number">2</span>*c-i], right-i) <span class="hljs-keyword">if</span> right &gt; i <span class="hljs-keyword">else</span> <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">while</span> i-res[i] &gt; <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> i+res[i] &lt; length:</span><br><span class="line">                <span class="hljs-keyword">if</span> s[i-res[i]] == s[i+res[i]]:</span><br><span class="line">                    res[i] += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">            res[i] -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> i + res[i] &gt; right:</span><br><span class="line">                right = i + res[i]</span><br><span class="line">                c = i</span><br><span class="line"></span><br><span class="line">        lp = max(res)</span><br><span class="line">        lp_index = res.index(lp)</span><br><span class="line">        lp = s[lp_index-lp:lp_index+lp+<span class="hljs-number">1</span>]</span><br><span class="line">        <span class="hljs-keyword">return</span> lp.replace(<span class="hljs-string">'#'</span>, <span class="hljs-string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_trans</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        s = list(s)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):</span><br><span class="line">            s[i] = <span class="hljs-string">'#'</span> + s[i]</span><br><span class="line">        s.append(<span class="hljs-string">'#'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    s = <span class="hljs-string">'babad'</span></span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.longestPalindrome(s))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Manacher算法用作求字符串中的最长回文串长度。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://todebug.com/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://todebug.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>使用fail2ban防止ssh暴力登录</title>
    <link href="https://todebug.com/2018/09/27/use-fail2ban-to-protest-your-vps/"/>
    <id>https://todebug.com/2018/09/27/use-fail2ban-to-protest-your-vps/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.610Z</updated>
    
    <content type="html"><![CDATA[<p>今儿中午，心血来潮统计了一下ssh失败次数，发现最高的一个ip有4000多次登录失败记录。这让我想起了那个传闻：暴露在外网的机器，如果不做防护，八个小时内就易主了。所以找了找防止暴力尝试的方法，发现现在常规方法就是使用fail2ban监控，然后自动禁用可疑ip，部署方法如下：</p><a id="more"></a><h2 id="安装fail2ban"><a href="#安装fail2ban" class="headerlink" title="安装fail2ban"></a>安装fail2ban</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install fail2ban</span><br></pre></td></tr></table></figure><p><strong>请注意防火墙软件是<code>firewalld</code>而不是<code>iptables</code></strong></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span> 查看状态</span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span> 启动firewalld</span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span> 开机启动</span><br><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><p>默认的<code>firewalld</code>会禁用所有端口连接，因此你需要手动的放行端口，比如你的博客服务的web端口：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span> 重载配置</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span> 查看已经放行的端口</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></p><h2 id="配置fail2ban"><a href="#配置fail2ban" class="headerlink" title="配置fail2ban"></a>配置fail2ban</h2><p>fail2ban的配置文件位于<code>/etc/fail2ban/</code>， 我们在该目录新建一个自定义配置文件<code>jail.local</code><br>然后加入如下信息：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8</span><br><span class="line">bantime = 86400</span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 5</span><br><span class="line">banaction = firewallcmd-ipset</span><br><span class="line">sender = email@email.com</span><br><span class="line">senername = Fail2Ban</span><br><span class="line">action = %(action_mwl)s</span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = true</span><br><span class="line">filter = sshd</span><br><span class="line">port = 22</span><br><span class="line">action = %(action_mwl)s</span><br><span class="line">logpath = /var/log/secure</span><br></pre></td></tr></table></figure></p><h2 id="启动fail2ban"><a href="#启动fail2ban" class="headerlink" title="启动fail2ban"></a>启动fail2ban</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start fail2ban</span><br></pre></td></tr></table></figure><h2 id="查看fail2ban日志以及ip禁用列表"><a href="#查看fail2ban日志以及ip禁用列表" class="headerlink" title="查看fail2ban日志以及ip禁用列表"></a>查看fail2ban日志以及ip禁用列表</h2><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span> 查看日志</span><br><span class="line">tail -F /var/log/fail2ban</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#</span> 查看禁用ip</span><br><span class="line">fail2ban-client status sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今儿中午，心血来潮统计了一下ssh失败次数，发现最高的一个ip有4000多次登录失败记录。这让我想起了那个传闻：暴露在外网的机器，如果不做防护，八个小时内就易主了。所以找了找防止暴力尝试的方法，发现现在常规方法就是使用fail2ban监控，然后自动禁用可疑ip，部署方法如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://todebug.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>在vim中使用snippets</title>
    <link href="https://todebug.com/2018/09/23/vim-snippets/"/>
    <id>https://todebug.com/2018/09/23/vim-snippets/</id>
    <published>2018-09-22T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.258Z</updated>
    
    <content type="html"><![CDATA[<p>推荐使用<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a>作为vim包管理器，轻量且能异步更新，还支持插件分支。</p><a id="more"></a><h2 id="1-所用插件"><a href="#1-所用插件" class="headerlink" title="1. 所用插件"></a>1. 所用插件</h2><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">" vim-plug配置插件方式</span></span><br><span class="line"><span class="hljs-comment">" supertab用来防止使用tab展开snippet与youcompleteme的tab补全发生冲突</span></span><br><span class="line">Plug <span class="hljs-string">'ervandew/supertab'</span></span><br><span class="line"><span class="hljs-comment">" ultisnips是引擎</span></span><br><span class="line">Plug <span class="hljs-string">'SirVer/ultisnips'</span></span><br><span class="line"><span class="hljs-comment">" 所有常用snippet都在vim-snippets里</span></span><br><span class="line">Plug <span class="hljs-string">'honza/vim-snippets'</span></span><br></pre></td></tr></table></figure><h2 id="2-插件设置，以及YCM与UltiSnips不冲突的设置方法"><a href="#2-插件设置，以及YCM与UltiSnips不冲突的设置方法" class="headerlink" title="2. 插件设置，以及YCM与UltiSnips不冲突的设置方法"></a>2. 插件设置，以及YCM与UltiSnips不冲突的设置方法</h2><p>具体<code>supertab</code>插件以及<code>UltiSnip</code>插件设置如下：<br><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">" make YCM compatible with UltiSnips (using supertab)</span></span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_key_list_select_completion</span> = [<span class="hljs-string">'&lt;C-n&gt;'</span>, <span class="hljs-string">'&lt;Down&gt;'</span>]</span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:ycm_key_list_previous_completion</span> = [<span class="hljs-string">'&lt;C-p&gt;'</span>, <span class="hljs-string">'&lt;Up&gt;'</span>]</span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:SuperTabDefaultCompletionType</span> = <span class="hljs-string">'&lt;C-n&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">" better key bindings for UltiSnipsExpandTrigger</span></span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:UltiSnipsSnippetDirectories</span> = [<span class="hljs-string">'~/.vim/UltiSnips'</span>, <span class="hljs-string">'UltiSnips'</span>]</span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:UltiSnipsExpandTrigger</span> = <span class="hljs-string">"&lt;tab&gt;"</span></span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:UltiSnipsJumpForwardTrigger</span> = <span class="hljs-string">"&lt;tab&gt;"</span></span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:UltiSnipsJumpBackwardTrigger</span> = <span class="hljs-string">"&lt;s-tab&gt;"</span></span><br><span class="line"><span class="hljs-comment">" If you want :UltiSnipsEdit to split your window.</span></span><br><span class="line"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:UltiSnipsEditSplit</span>=<span class="hljs-string">"vertical"</span></span><br></pre></td></tr></table></figure></p><p>这样YouCompleteMe就被绑定到了<code>Ctrl+n</code>，然后这个快捷键又被<code>SuperTab</code>绑定到<code>tab</code>。</p><h2 id="3-自定义snippet"><a href="#3-自定义snippet" class="headerlink" title="3.  自定义snippet"></a>3.  自定义snippet</h2><p>可以使用<code>UltiSnips</code>的语法自定义代码块，比如<code>jekyll</code>博客，我们每次新建博客的时候都要加入固定的博客头，我们想要实现输入<code>head</code>然后按下<code>tab</code>键自动补全固定表头。</p><p>自定义snippet如下：<br><figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># ~/.<span class="hljs-keyword">vim</span>/bundle/UltiSnips/markdown.snippets</span><br><span class="line"></span><br><span class="line">snippet head <span class="hljs-string">"Jekyll post header"</span> <span class="hljs-keyword">b</span></span><br><span class="line">---</span><br><span class="line">title: $&#123;<span class="hljs-number">1</span>:title&#125;</span><br><span class="line">layou<span class="hljs-variable">t:</span> post</span><br><span class="line">published: false</span><br><span class="line">guid: `!p</span><br><span class="line">import uuid</span><br><span class="line"><span class="hljs-keyword">if</span> not snip.<span class="hljs-keyword">c</span>:</span><br><span class="line">    guid = uuid.uuid4().hex</span><br><span class="line">snip.<span class="hljs-keyword">rv</span> = guid</span><br><span class="line">`</span><br><span class="line">date: `!v <span class="hljs-built_in">strftime</span>(<span class="hljs-string">"%Y-%m-%d %H:%M:%s"</span>)`</span><br><span class="line">categorie<span class="hljs-variable">s:</span> [$&#123;<span class="hljs-number">2</span>:Python&#125;]</span><br><span class="line"><span class="hljs-keyword">tag</span><span class="hljs-variable">s:</span> [$&#123;<span class="hljs-number">3</span>:code, <span class="hljs-keyword">python</span>&#125;]</span><br><span class="line">---</span><br><span class="line">**目录：**</span><br><span class="line">* Kramdown table of contents</span><br><span class="line">&#123;:toc .toc&#125;</span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">$&#123;<span class="hljs-number">0</span>&#125;</span><br><span class="line">endsnippet</span><br><span class="line"># <span class="hljs-keyword">vim</span>:ft=snippet<span class="hljs-variable">s:</span></span><br></pre></td></tr></table></figure></p><p><code>UltiSnips</code>自定义snippet的语法为:<code>snippet trigger_word [&quot;description&quot; [options] ]</code></p><p>在上例中，我们的<code>trigger_word</code>为<code>head</code>，<code>description</code>为<code>jekyll post header</code>, <code>options</code>为<code>b</code>，<code>b</code>意味着只有<code>trigger_word</code>在行首的时候，才执行对应操作; 其中的变量<code>${n}</code>，代表是第几个可以用<code>tab</code>跳转的可输入块，默认开始时光标停留在<code>${1}</code>上，最后一个可跳转位置是<code>${0}</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐使用&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vim-plug&lt;/a&gt;作为vim包管理器，轻量且能异步更新，还支持插件分支。&lt;/p&gt;
    
    </summary>
    
      <category term="VIM" scheme="https://todebug.com/categories/VIM/"/>
    
    
      <category term="vim" scheme="https://todebug.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll tips</title>
    <link href="https://todebug.com/2018/09/21/jekyll-tips/"/>
    <id>https://todebug.com/2018/09/21/jekyll-tips/</id>
    <published>2018-09-20T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.176Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用jekyll博客中用到的小技巧</strong></p><h2 id="1-指定Kramdown的标题id"><a href="#1-指定Kramdown的标题id" class="headerlink" title="1. 指定Kramdown的标题id"></a>1. 指定Kramdown的标题id</h2><p><strong>今儿给人分享一个包含有id的链接的时候发现一个问题：标题为中文的id会是乱码并且很长很长，就想着有没有解决方法，然后发现Kramdown的确提供了自定义标题id的功能，使用方法就是在标题后面加上花括号然后里面写上自定义id就好了。</strong></p><p><strong>还有一个要注意的事情就是花括号里单词之间不能有空格。</strong></p><h2 id="2-给代码块添加行号"><a href="#2-给代码块添加行号" class="headerlink" title="2. 给代码块添加行号"></a>2. 给代码块添加行号</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kramdown:</span><br><span class="line">  syntax_highlighter_opts:</span><br><span class="line">    block:</span><br><span class="line">      line_numbers: true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Jekyll小技巧集合
    
    </summary>
    
      <category term="Tips" scheme="https://todebug.com/categories/Tips/"/>
    
      <category term="Jekyll" scheme="https://todebug.com/categories/Tips/Jekyll/"/>
    
    
      <category term="tips" scheme="https://todebug.com/tags/tips/"/>
    
      <category term="jekyll" scheme="https://todebug.com/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://todebug.com/2018/09/20/kmp/"/>
    <id>https://todebug.com/2018/09/20/kmp/</id>
    <published>2018-09-19T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.096Z</updated>
    
    <content type="html"><![CDATA[<p>KMP算法用于检查短字符串是否在某个长字符串中。</p><a id="more"></a><h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><p><img src="/assets/blog_images/kmp.jpeg" alt="KMP"></p><h2 id="使用kmp解LeetCode28题"><a href="#使用kmp解LeetCode28题" class="headerlink" title="使用kmp解LeetCode28题"></a>使用kmp解LeetCode28题</h2><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [28] Implement strStr()</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/implement-strstr/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (29.86%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    316K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.1M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"hello"\n"ll"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Implement strStr().</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Return the index of the first occurrence of needle in haystack, or -1 if</span></span><br><span class="line"><span class="hljs-comment"># needle is not part of haystack.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: haystack = "hello", needle = "ll"</span></span><br><span class="line"><span class="hljs-comment"># Output: 2</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: haystack = "aaaaa", needle = "bba"</span></span><br><span class="line"><span class="hljs-comment"># Output: -1</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Clarification:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># What should we return when needle is an empty string? This is a great</span></span><br><span class="line"><span class="hljs-comment"># question to ask during an interview.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># For the purpose of this problem, we will return 0 when needle is an empty</span></span><br><span class="line"><span class="hljs-comment"># string. This is consistent to C's strstr() and Java's indexOf().</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strStr</span><span class="hljs-params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type haystack: str</span></span><br><span class="line"><span class="hljs-string">        :type needle: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> needle:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        h_length, n_length = len(haystack), len(needle)</span><br><span class="line">        <span class="hljs-keyword">if</span> h_length &lt; n_length:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">        next_arr = self.get_next_arr(needle)</span><br><span class="line">        i = j = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; h_length <span class="hljs-keyword">and</span> j &lt; n_length:</span><br><span class="line">            <span class="hljs-keyword">if</span> haystack[i] == needle[j]:</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">                j += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> next_arr[j] == <span class="hljs-number">-1</span>:</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                j = next_arr[j]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> i - j <span class="hljs-keyword">if</span> j == n_length <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_next_arr</span><span class="hljs-params">(self, needle)</span>:</span></span><br><span class="line">        length = len(needle)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> [<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">        next_arr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line">        next_arr[<span class="hljs-number">0</span>], next_arr[<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>, <span class="hljs-number">0</span></span><br><span class="line">        i, cur = <span class="hljs-number">2</span>, <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; length:</span><br><span class="line">            <span class="hljs-keyword">if</span> needle[cur] == needle[i<span class="hljs-number">-1</span>]:</span><br><span class="line">                next_arr[i] = cur + <span class="hljs-number">1</span></span><br><span class="line">                cur = next_arr[i]</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> cur &gt; <span class="hljs-number">0</span>:</span><br><span class="line">                cur = next_arr[cur]</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                next_arr[i] = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> next_arr</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      KMP算法
    
    </summary>
    
      <category term="Algorithm" scheme="https://todebug.com/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://todebug.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出mysql数据库开发 第二章学习笔记</title>
    <link href="https://todebug.com/2018/09/19/reading-notes-of-chapter-2-in-depth-explantion-of-mysql/"/>
    <id>https://todebug.com/2018/09/19/reading-notes-of-chapter-2-in-depth-explantion-of-mysql/</id>
    <published>2018-09-18T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:49.009Z</updated>
    
    <content type="html"><![CDATA[<p><strong>motivation - 小知识点老是忘，好记性不如烂笔头。</strong></p><a id="more"></a><p>sql语句可以划分为三类：</p><ol><li>DDL(Data Definition Languages)语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用关键字包括<code>create</code>、<code>drop</code>、<code>alter</code>;</li><li>DML(Data Manipulation Language)语句：数据操作语句，也就是增删改查。主要有<code>insert</code>、<code>delete</code>、<code>update</code>和<code>select</code>等；</li><li>DCL(Data Control Language)语句：数据控制语句。主要是用于控制许可和访问级别，主要有<code>grant</code>, <code>revoke</code>。</li></ol><p>以下所写语句均为实际操作语句而不是语法说明，例子一直是围绕一个<strong>test</strong>数据库中的<strong>emp</strong>和<strong>dept</strong>表。</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="建库切库："><a href="#建库切库：" class="headerlink" title="建库切库："></a>建库切库：</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">test</span>;</span><br><span class="line"><span class="hljs-keyword">use</span> <span class="hljs-keyword">test</span>;</span><br></pre></td></tr></table></figure><h3 id="建表："><a href="#建表：" class="headerlink" title="建表："></a>建表：</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp(</span><br><span class="line">        ename <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>),</span><br><span class="line">        hiredate <span class="hljs-built_in">date</span>,</span><br><span class="line">        sal <span class="hljs-built_in">decimal</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),</span><br><span class="line">        deptno <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>));</span><br></pre></td></tr></table></figure><p>如果想要简单查看表结构：<code>desc emp;</code></p><p>如果想要查看详细建表语句：<code>show create table emp \G</code>。</p><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表:"></a>修改表:</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 修改表名</span></span><br><span class="line"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">rename</span> emps;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 增加表字段, first代表新加字段不会被加到最后，而是放到开头</span></span><br><span class="line"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">add</span> age <span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">first</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 删除表字段</span></span><br><span class="line"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">drop</span> age;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 字段改名或者修改定义</span></span><br><span class="line"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">change</span> age age1 <span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 修改字段并改变字段顺序</span></span><br><span class="line"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp <span class="hljs-keyword">modify</span> age <span class="hljs-built_in">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">after</span> ename;</span><br></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 增</span></span><br><span class="line"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp <span class="hljs-keyword">values</span>(<span class="hljs-string">'lisa'</span>, <span class="hljs-string">'2000-01-01'</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-comment"># 部分增</span></span><br><span class="line"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp(ename, sal) <span class="hljs-keyword">values</span>(<span class="hljs-string">'dony'</span>, <span class="hljs-number">1000</span>);</span><br><span class="line"><span class="hljs-comment"># 一次性增多个</span></span><br><span class="line"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp <span class="hljs-keyword">values</span>(<span class="hljs-string">'bob'</span>, <span class="hljs-string">'2001-01-01'</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">'david'</span>, <span class="hljs-string">'2002-01-01'</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 改</span></span><br><span class="line"><span class="hljs-keyword">update</span> emp <span class="hljs-keyword">set</span> sal=<span class="hljs-number">3000</span> <span class="hljs-keyword">where</span> ename=<span class="hljs-string">'lisa'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 删</span></span><br><span class="line"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> sal=<span class="hljs-number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 查</span></span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp;</span><br><span class="line"><span class="hljs-comment"># 部分查</span></span><br><span class="line"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp ;</span><br><span class="line"><span class="hljs-comment"># 条件查</span></span><br><span class="line"><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">form</span> emp <span class="hljs-keyword">where</span> sal &gt; <span class="hljs-number">2000</span>;</span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> ename=<span class="hljs-string">'david'</span>;</span><br><span class="line"><span class="hljs-comment"># 去重查</span></span><br><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> deptno <span class="hljs-keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 排序</span></span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> deptno;</span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> deptno, sal;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 限制结果数量</span></span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 返回的是从开头开始的1条数据</span></span><br><span class="line"><span class="hljs-comment"># limit后面可以加两个参数，第一个为起始索引, 起始索引默认为0，第二个为限制结果行数</span></span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>; <span class="hljs-comment">-- 返回的是从第二条数据开始的两条数据</span></span><br></pre></td></tr></table></figure><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>很多情况下，用户都需要进行一些汇总操作，比如统计整个公司的人数或者统计每个部分的人数，这个时候就要用到聚合操作，由于聚合操作比较多这里先给出语法：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> [field1, field2, ...fieldn] fun_name</span><br><span class="line"><span class="hljs-keyword">from</span> tablename</span><br><span class="line">[<span class="hljs-keyword">where</span> where_condition]</span><br><span class="line">[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> field1, field2,...fieldn</span><br><span class="line">[<span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>]]</span><br><span class="line">[<span class="hljs-keyword">having</span> where_condition]</span><br></pre></td></tr></table></figure><p>参数说明如下：</p><ul><li><code>fun_name</code>表示聚合函数，常用的有<code>sum</code>, <code>count(*)</code>, <code>max</code>, <code>min</code>;</li><li><code>group by</code>关键字表示要进行分类聚合的字段；</li><li><code>with rollup</code>是可选的，表明是否对分类聚合后的结果进行再汇总；</li><li><code>having</code>关键字表示对分类后的结果再进行条件的过滤。</li></ul><p><strong>例子：</strong><br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 统计公司各个部门的人数：</span></span><br><span class="line"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 统计公司各个部门人数的同时统计总人数（用到with rollup对分类聚合后的结果进行汇总）</span></span><br><span class="line"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 统计人数大于1的部门：</span></span><br><span class="line"><span class="hljs-keyword">select</span> deptno, <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno <span class="hljs-keyword">having</span> <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) &gt; <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 统计员工的薪水总额、最高和最低薪水：</span></span><br><span class="line"><span class="hljs-keyword">select</span> <span class="hljs-keyword">sum</span>(sal), <span class="hljs-keyword">max</span>(sal), <span class="hljs-keyword">min</span>(sal) <span class="hljs-keyword">from</span> emp;</span><br></pre></td></tr></table></figure></p><h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><p>从大类上，表连接分为内连接和外连接，它们之间的最主要区别是内连接仅选出两张表中互相匹配的记录，而外连接会选出其他不匹配的记录。最常用的是内连接。</p><p>为了测试表连接我们创建一个新表<code>dept</code>，包含部门编号和部门名称：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(</span><br><span class="line">        deptno <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>),</span><br><span class="line">        deptname <span class="hljs-built_in">varchar</span>(<span class="hljs-number">20</span>));</span><br></pre></td></tr></table></figure></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> ename, deptname <span class="hljs-keyword">from</span> emp, dept <span class="hljs-keyword">where</span> emp.deptno=dept.deptno;</span><br></pre></td></tr></table></figure><p>外连接有分为左连接和右连接，具体定义如下：</p><ul><li>左连接：包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录；</li><li>右连接：包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录。</li></ul><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 左连接</span></span><br><span class="line"><span class="hljs-keyword">select</span> ename, deptname <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.deptno=dept.deptno;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 右连接</span></span><br><span class="line"><span class="hljs-keyword">select</span> ename, deptname <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> emp <span class="hljs-keyword">on</span> dept.deptno=emp.deptno;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>有些情况下，当进行查询的时候，需要的条件是另外一个<code>select</code>语句的结果，这个时候就要用到子查询。用于子查询的关键字主要包括<code>in</code>、<code>not in</code>、<code>=</code>、<code>!=</code>、<code>exits</code>、<code>not exists</code>等。</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 从emp表中查询出所有部门在dept表中所有记录：</span></span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> dept);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 上面那个子查询有些时候可以转换为表连接</span></span><br><span class="line"><span class="hljs-keyword">select</span> emp.* <span class="hljs-keyword">from</span> emp, dept <span class="hljs-keyword">where</span> emp.deptno=dept.deptno;</span><br></pre></td></tr></table></figure><h3 id="记录联合"><a href="#记录联合" class="headerlink" title="记录联合"></a>记录联合</h3><p>语法：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t1</span><br><span class="line"><span class="hljs-keyword">union</span> | <span class="hljs-keyword">union</span> all</span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t2</span><br><span class="line">...</span><br><span class="line"><span class="hljs-keyword">union</span> | <span class="hljs-keyword">union</span> all</span><br><span class="line"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tn;</span><br></pre></td></tr></table></figure></p><p><strong><code>union</code>和<code>union all</code>的区别就是<code>union</code>会做去重处理；</strong></p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> emp</span><br><span class="line"><span class="hljs-keyword">union</span> all</span><br><span class="line"><span class="hljs-keyword">select</span> deptno <span class="hljs-keyword">from</span> dept;</span><br></pre></td></tr></table></figure><p>其实就是把结果排下来。。不知道这有啥用。。</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>DCL语句主要是用来管理对象权限，给用户z1添加对sakila数据库添加查询和插入权限以及再取消插入权限的语句如下：</p><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 赋予select和insert权限</span></span><br><span class="line"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>, <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> sakila.* <span class="hljs-keyword">to</span> <span class="hljs-string">'z1'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 收回insert权限</span></span><br><span class="line"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> sakila.* <span class="hljs-keyword">from</span> <span class="hljs-string">'z1'</span>@<span class="hljs-string">'localhost'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      深入浅出mysql数据库开发 第二章学习笔记
    
    </summary>
    
      <category term="读书笔记" scheme="https://todebug.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MySQL" scheme="https://todebug.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/MySQL/"/>
    
    
      <category term="mysql" scheme="https://todebug.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode每日一题题解集</title>
    <link href="https://todebug.com/2018/09/18/leetcode-daily/"/>
    <id>https://todebug.com/2018/09/18/leetcode-daily/</id>
    <published>2018-09-17T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:48.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub-repo"><a href="#GitHub-repo" class="headerlink" title="GitHub repo"></a>GitHub repo</h1><p><a href="https://github.com/bryceyang/leetcode" target="_blank" rel="noopener">题解集GitHub Repo</a></p><p>顺便推荐一个终端刷LeetCode的工具：<a href="https://github.com/skygragon/leetcode-cli" target="_blank" rel="noopener">leetcode-cli</a>，如果不想每次刷LeetCode开浏览器或者和我一样是终端vim党，可以试用一下。个人使用觉得优点：</p><ul><li>支持关键字搜索，配合插件可以实现分公司查询题目；</li><li>支持指定语言的模板文件生成；</li><li>借助插件，可以实现submit通过之后自动push到对应Github仓库。</li></ul><hr><a id="more"></a><h1 id="LeetCode-71-Simplify-Path"><a href="#LeetCode-71-Simplify-Path" class="headerlink" title="LeetCode 71: Simplify Path"></a>LeetCode 71: Simplify Path</h1><p><strong>如果程序有一些情况需要回退，那么优先就考虑一下能不能使用栈。</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [71] Simplify Path</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/simplify-path/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (26.95%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    124.7K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 461.5K</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"/home/"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given an absolute path for a file (Unix-style), simplify it. </span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># For example,</span></span><br><span class="line"><span class="hljs-comment"># path = "/home/", =&gt; "/home"</span></span><br><span class="line"><span class="hljs-comment"># path = "/a/./b/../../c/", =&gt; "/c"</span></span><br><span class="line"><span class="hljs-comment"># path = "/a/../../b/../c//.//", =&gt; "/c"</span></span><br><span class="line"><span class="hljs-comment"># path = "/a//b////c/d//././/..", =&gt; "/a/b/c"</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># In a UNIX-style file system, a period ('.') refers to the current directory,</span></span><br><span class="line"><span class="hljs-comment"># so it can be ignored in a simplified path. Additionally, a double period</span></span><br><span class="line"><span class="hljs-comment"># ("..") moves up a directory, so it cancels out whatever the last directory</span></span><br><span class="line"><span class="hljs-comment"># was. For more information, look here:</span></span><br><span class="line"><span class="hljs-comment"># https://en.wikipedia.org/wiki/Path_(computing)#Unix_style</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Corner Cases:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Did you consider the case where path = "/../"?</span></span><br><span class="line"><span class="hljs-comment"># In this case, you should return "/".</span></span><br><span class="line"><span class="hljs-comment"># Another corner case is the path might contain multiple slashes '/' together,</span></span><br><span class="line"><span class="hljs-comment"># such as "/home//foo/".</span></span><br><span class="line"><span class="hljs-comment"># In this case, you should ignore redundant slashes and return "/home/foo".</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simplifyPath</span><span class="hljs-params">(self, path)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type path: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: str</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        path = path.split(<span class="hljs-string">'/'</span>)</span><br><span class="line">        stack = []</span><br><span class="line">        jump = (<span class="hljs-string">''</span>, <span class="hljs-string">'.'</span>, <span class="hljs-string">'..'</span>)</span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> path:</span><br><span class="line">            <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">and</span> item == <span class="hljs-string">'..'</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="hljs-keyword">elif</span> item <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> jump:</span><br><span class="line">                stack.append(item)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'/'</span> + <span class="hljs-string">'/'</span>.join(stack)</span><br></pre></td></tr></table></figure><h1 id="LeetCode-53-maximum-subarray"><a href="#LeetCode-53-maximum-subarray" class="headerlink" title="LeetCode 53: maximum subarray"></a>LeetCode 53: maximum subarray</h1><p><strong>*</strong>典型动规**</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [53] Maximum Subarray</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/maximum-subarray/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (41.14%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    367K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 890.6K</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '[-2,1,-3,4,-1,2,1,-5,4]'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given an integer array nums, find the contiguous subarray (containing at</span></span><br><span class="line"><span class="hljs-comment"># least one number) which has the largest sum and return its sum.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: [-2,1,-3,4,-1,2,1,-5,4],</span></span><br><span class="line"><span class="hljs-comment"># Output: 6</span></span><br><span class="line"><span class="hljs-comment"># Explanation: [4,-1,2,1] has the largest sum = 6.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Follow up:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># If you have figured out the O(n) solution, try coding another solution using</span></span><br><span class="line"><span class="hljs-comment"># the divide and conquer approach, which is more subtle.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type nums: List[int]</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> sum(nums)</span><br><span class="line"></span><br><span class="line">        max_res = pre_res = nums[<span class="hljs-number">0</span>]</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length):</span><br><span class="line">                pre_res = nums[i] <span class="hljs-keyword">if</span> pre_res &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> nums[i] + pre_res</span><br><span class="line">                max_res = max(max_res, pre_res)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> max_res</span><br></pre></td></tr></table></figure><h1 id="LeetCode-28-Implement-strStr"><a href="#LeetCode-28-Implement-strStr" class="headerlink" title="LeetCode 28: Implement strStr()"></a>LeetCode 28: Implement strStr()</h1><p><strong>KMP算法</strong><br><img src="/assets/blog_images/kmp.jpeg" alt="KMP"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [28] Implement strStr()</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/implement-strstr/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (29.86%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    316K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.1M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"hello"\n"ll"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Implement strStr().</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Return the index of the first occurrence of needle in haystack, or -1 if</span></span><br><span class="line"><span class="hljs-comment"># needle is not part of haystack.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: haystack = "hello", needle = "ll"</span></span><br><span class="line"><span class="hljs-comment"># Output: 2</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: haystack = "aaaaa", needle = "bba"</span></span><br><span class="line"><span class="hljs-comment"># Output: -1</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Clarification:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># What should we return when needle is an empty string? This is a great</span></span><br><span class="line"><span class="hljs-comment"># question to ask during an interview.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># For the purpose of this problem, we will return 0 when needle is an empty</span></span><br><span class="line"><span class="hljs-comment"># string. This is consistent to C's strstr() and Java's indexOf().</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strStr</span><span class="hljs-params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type haystack: str</span></span><br><span class="line"><span class="hljs-string">        :type needle: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> needle:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        h_length, n_length = len(haystack), len(needle)</span><br><span class="line">        <span class="hljs-keyword">if</span> h_length &lt; n_length:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">        next_arr = self.get_next_arr(needle)</span><br><span class="line">        i = j = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; h_length <span class="hljs-keyword">and</span> j &lt; n_length:</span><br><span class="line">            <span class="hljs-keyword">if</span> haystack[i] == needle[j]:</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">                j += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> next_arr[j] == <span class="hljs-number">-1</span>:</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                j = next_arr[j]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> i - j <span class="hljs-keyword">if</span> j == n_length <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_next_arr</span><span class="hljs-params">(self, needle)</span>:</span></span><br><span class="line">        length = len(needle)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> [<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">        next_arr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line">        next_arr[<span class="hljs-number">0</span>], next_arr[<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>, <span class="hljs-number">0</span></span><br><span class="line">        i, cur = <span class="hljs-number">2</span>, <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; length:</span><br><span class="line">            <span class="hljs-keyword">if</span> needle[cur] == needle[i<span class="hljs-number">-1</span>]:</span><br><span class="line">                next_arr[i] = cur + <span class="hljs-number">1</span></span><br><span class="line">                cur = next_arr[i]</span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> cur &gt; <span class="hljs-number">0</span>:</span><br><span class="line">                cur = next_arr[cur]</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                next_arr[i] = <span class="hljs-number">0</span></span><br><span class="line">                i += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> next_arr</span><br></pre></td></tr></table></figure><p><strong>刚刚随手写kmp的时候发现，上面代码<code>get_next_arr</code>函数while循环里最后一个else分支里少些了<code>i += 1</code>，这样竟然也通过了leetcode的提交。醉了。顺便还试验了下，本来在<code>strStr</code>函数里，我是可以直接把needle的长度传给<code>get_next_arr</code>函数的，但后来发现，这样的话运行时间反而会加长。。只能说函数多传一个参数比在函数里多建一个变量用时更长啊。</strong></p><h1 id="LeetCode-7-Reverse-Integer"><a href="#LeetCode-7-Reverse-Integer" class="headerlink" title="LeetCode 7: Reverse Integer"></a>LeetCode 7: Reverse Integer</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [7] Reverse Integer</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/reverse-integer/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (24.43%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    480.9K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 2M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '123'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given a 32-bit signed integer, reverse digits of an integer.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment"># Input: 123</span></span><br><span class="line"><span class="hljs-comment"># Output: 321</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment"># Input: -123</span></span><br><span class="line"><span class="hljs-comment"># Output: -321</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 3:</span></span><br><span class="line"><span class="hljs-comment"># Input: 120</span></span><br><span class="line"><span class="hljs-comment"># Output: 21</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Note:</span></span><br><span class="line"><span class="hljs-comment"># Assume we are dealing with an environment which could only store integers</span></span><br><span class="line"><span class="hljs-comment"># within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of</span></span><br><span class="line"><span class="hljs-comment"># this problem, assume that your function returns 0 when the reversed integer</span></span><br><span class="line"><span class="hljs-comment"># overflows.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type x: int</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        ans = str(x)[::<span class="hljs-number">-1</span>] <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">'-'</span> + str(x)[:<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>]</span><br><span class="line">        ans = int(ans)</span><br><span class="line">        <span class="hljs-keyword">if</span> ans &lt; - <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> <span class="hljs-keyword">or</span> ans &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:</span><br><span class="line">            ans = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="LeetCode-15-3Sum"><a href="#LeetCode-15-3Sum" class="headerlink" title="LeetCode 15: 3Sum"></a>LeetCode 15: 3Sum</h1><p><strong>有些时候，如果列表内元素需要重复访问的话，可以将其赋给变量，这个题把<code>nums[left]</code>, <code>nums[middle]</code>, <code>nums[right]</code>赋给变量比直接使用多打败了20%的提交的人。：）</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [15] 3Sum</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/3sum/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (22.03%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    383.4K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.7M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '[-1,0,1,2,-1,-4]'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given an array nums of n integers, are there elements a, b, c in nums such</span></span><br><span class="line"><span class="hljs-comment"># that a + b + c = 0? Find all unique triplets in the array which gives the sum</span></span><br><span class="line"><span class="hljs-comment"># of zero.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Note:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># The solution set must not contain duplicate triplets.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given array nums = [-1, 0, 1, 2, -1, -4],</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># A solution set is:</span></span><br><span class="line"><span class="hljs-comment"># [</span></span><br><span class="line"><span class="hljs-comment"># ⁠ [-1, 0, 1],</span></span><br><span class="line"><span class="hljs-comment"># ⁠ [-1, -1, 2]</span></span><br><span class="line"><span class="hljs-comment"># ]</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">threeSum</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type nums: List[int]</span></span><br><span class="line"><span class="hljs-string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length, res = len(nums), []</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">3</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> range(length<span class="hljs-number">-2</span>):</span><br><span class="line">            a = nums[left]</span><br><span class="line">            <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span>:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">if</span> left &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> a == nums[left<span class="hljs-number">-1</span>]:</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line"></span><br><span class="line">            middle = left + <span class="hljs-number">1</span></span><br><span class="line">            right = length - <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">while</span> middle &lt; right:</span><br><span class="line">                b, c = nums[middle], nums[right]</span><br><span class="line">                cur_sum = a + b + c</span><br><span class="line">                <span class="hljs-keyword">if</span> cur_sum == <span class="hljs-number">0</span>:</span><br><span class="line">                    res.append([a, b, c])</span><br><span class="line">                    middle += <span class="hljs-number">1</span></span><br><span class="line">                    right -= <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">while</span> middle &lt; right <span class="hljs-keyword">and</span> nums[middle] == nums[middle<span class="hljs-number">-1</span>]:</span><br><span class="line">                        middle += <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">while</span> right &gt; middle <span class="hljs-keyword">and</span> nums[right] == nums[right+<span class="hljs-number">1</span>]:</span><br><span class="line">                        right -= <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">elif</span> cur_sum &lt; <span class="hljs-number">0</span>:</span><br><span class="line">                    middle += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    right -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="LeetCode-21-Merge-Two-Sorted-Lists"><a href="#LeetCode-21-Merge-Two-Sorted-Lists" class="headerlink" title="LeetCode 21: Merge Two Sorted Lists"></a>LeetCode 21: Merge Two Sorted Lists</h1><p><strong>能用<code>if else</code>区分情况就不要用两个<code>if</code>，会慢。</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [21] Merge Two Sorted Lists</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/merge-two-sorted-lists/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (42.96%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    409.2K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 948.5K</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '[1,2,4]\n[1,3,4]'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Merge two sorted linked lists and return it as a new list. The new list</span></span><br><span class="line"><span class="hljs-comment"># should be made by splicing together the nodes of the first two lists.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></span><br><span class="line"><span class="hljs-comment"># Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"># class ListNode:</span></span><br><span class="line"><span class="hljs-comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="hljs-comment">#         self.val = x</span></span><br><span class="line"><span class="hljs-comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type l1: ListNode</span></span><br><span class="line"><span class="hljs-string">        :type l2: ListNode</span></span><br><span class="line"><span class="hljs-string">        :rtype: ListNode</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> l2</span><br><span class="line">        <span class="hljs-keyword">elif</span> l2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">            head = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            head = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line"></span><br><span class="line">        cur = head</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">and</span> l2:</span><br><span class="line">            <span class="hljs-keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                cur.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">                cur = cur.next</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                cur.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">                cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> l1:</span><br><span class="line">            cur.next = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> l2:</span><br><span class="line">            cur.next = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> head</span><br></pre></td></tr></table></figure><h1 id="LeetCode-20-Valid-Parentheses"><a href="#LeetCode-20-Valid-Parentheses" class="headerlink" title="LeetCode 20: Valid Parentheses"></a>LeetCode 20: Valid Parentheses</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [20] Valid Parentheses</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/valid-parentheses/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (34.54%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    402.5K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.2M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"()"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given a string containing just the characters '(', ')', '&#123;', '&#125;', '[' and</span></span><br><span class="line"><span class="hljs-comment"># ']', determine if the input string is valid.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># An input string is valid if:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Open brackets must be closed by the same type of brackets.</span></span><br><span class="line"><span class="hljs-comment"># Open brackets must be closed in the correct order.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Note that an empty string is also considered valid.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "()"</span></span><br><span class="line"><span class="hljs-comment"># Output: true</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "()[]&#123;&#125;"</span></span><br><span class="line"><span class="hljs-comment"># Output: true</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 3:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "(]"</span></span><br><span class="line"><span class="hljs-comment"># Output: false</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 4:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "([)]"</span></span><br><span class="line"><span class="hljs-comment"># Output: false</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 5:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "&#123;[]&#125;"</span></span><br><span class="line"><span class="hljs-comment"># Output: true</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isValid</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type s: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: bool</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> len(s) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            check_dict = &#123;<span class="hljs-string">'('</span>:<span class="hljs-string">')'</span>, <span class="hljs-string">'&#123;'</span>:<span class="hljs-string">'&#125;'</span>, <span class="hljs-string">'['</span>:<span class="hljs-string">']'</span>&#125;</span><br><span class="line">            stack = []</span><br><span class="line">            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> s:</span><br><span class="line">                <span class="hljs-keyword">if</span> item <span class="hljs-keyword">in</span> check_dict:</span><br><span class="line">                    stack.append(item)</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack <span class="hljs-keyword">or</span> check_dict[stack[<span class="hljs-number">-1</span>]] != item:</span><br><span class="line">                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">                    <span class="hljs-keyword">else</span>:</span><br><span class="line">                        stack.pop()</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> stack <span class="hljs-keyword">else</span> <span class="hljs-keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="LeetCode-300-Longest-Increasing-Subsequence"><a href="#LeetCode-300-Longest-Increasing-Subsequence" class="headerlink" title="LeetCode 300: Longest Increasing Subsequence"></a>LeetCode 300: Longest Increasing Subsequence</h1><p><strong>1. 第一种最普遍解法，每次往前遍历所有已知<code>lis</code>数组元素，来更新<code>lis[i]</code>，时间复杂度`O(N</strong>2)`。**</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [300] Longest Increasing Subsequence</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/longest-increasing-subsequence/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (39.22%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    154.8K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 394.3K</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '[10,9,2,5,3,7,101,18]'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given an unsorted array of integers, find the length of longest increasing</span></span><br><span class="line"><span class="hljs-comment"># subsequence.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: [10,9,2,5,3,7,101,18]</span></span><br><span class="line"><span class="hljs-comment"># Output: 4</span></span><br><span class="line"><span class="hljs-comment"># Explanation: The longest increasing subsequence is [2,3,7,101], therefore the</span></span><br><span class="line"><span class="hljs-comment"># length is 4.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Note:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># There may be more than one LIS combination, it is only necessary for you to</span></span><br><span class="line"><span class="hljs-comment"># return the length.</span></span><br><span class="line"><span class="hljs-comment"># Your algorithm should run in O(n2) complexity.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Follow up: Could you improve it to O(n log n) time complexity?</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type nums: List[int]</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> length</span><br><span class="line"></span><br><span class="line">        res = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line">        i = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; length:</span><br><span class="line">            temp = nums[i]</span><br><span class="line">            res[i] = <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> temp &gt; nums[j]:</span><br><span class="line">                    res[i] = max(res[i], res[j]+<span class="hljs-number">1</span>)</span><br><span class="line">            i += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> max(res)</span><br></pre></td></tr></table></figure><p><strong>2. 一种新思路的解法， 跟解法一比较除了使用<code>lis</code>数组来保存以对应位置元素结尾的最长递增序列的长度之外，额外添加了一个<code>max_v</code>数组，对应数组元素<code>max_v[i]</code>代表<code>i</code>长度的递增子序列里的最大值的最小值；有了这个数组之后，我们就可以从当前已知最长的递增子序列长度<code>cur_max</code>开始递减匹配（递减匹配过程中，用<code>j</code>作中间变量），那么如果当前元素<code>nums[i]</code>大于<code>max_v[j]</code>，那么<code>i</code>位置最长的递增子序列长度<code>lis[i]=j+1</code>，同时我们要根据<code>lis[i]</code>的值来决定更不更新<code>cur_max</code>；同时也要根据<code>num[i]</code>是否小于<code>max_v[j+1]</code>来确定更不更新最长递增子序列长度为<code>j+1</code>的那些递增子序列的最大值，此算法时间复杂度`O(n</strong>2)`。**</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type nums: List[int]</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> length</span><br><span class="line"></span><br><span class="line">        max_v = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length+<span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line">        max_v[<span class="hljs-number">0</span>] = min(nums) - <span class="hljs-number">1</span></span><br><span class="line">        max_v[<span class="hljs-number">1</span>] = nums[<span class="hljs-number">0</span>]</span><br><span class="line">        lis = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line"></span><br><span class="line">        cur_max = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(cur_max, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> nums[i] &gt; max_v[j]:</span><br><span class="line">                    lis[i] = j + <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-comment"># 如果更新了当前最大值，那么更新max_v</span></span><br><span class="line">            <span class="hljs-keyword">if</span> lis[i] &gt; cur_max:</span><br><span class="line">                cur_max = lis[i]</span><br><span class="line">                max_v[cur_max] = nums[i]</span><br><span class="line">            <span class="hljs-comment"># 如果没有更新最大值，那么找到可能被i更新的j</span></span><br><span class="line">            <span class="hljs-comment"># 当nums[i] &gt; max_v[j]也就是进入到了上面for循环中的if条件中</span></span><br><span class="line">            <span class="hljs-comment"># 如果进入了条件中，那么如果nums[i]比原来max_v[j+1]小的时候才有</span></span><br><span class="line">            <span class="hljs-comment"># 更新价值；</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> nums[i] &gt; max_v[j] <span class="hljs-keyword">and</span> nums[i] &lt; max_v[j+<span class="hljs-number">1</span>]:</span><br><span class="line">                max_v[j+<span class="hljs-number">1</span>] = nums[i]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> cur_max</span><br></pre></td></tr></table></figure><p><strong><em>**</em></strong>3. 上面的顺序匹配过程还可以改成二分，因为如果<code>i&gt;j</code>, 那么一定有<code>max_v[i] &gt; max_v[j]</code>，此算法时间复杂度<code>O(n*logn)</code>。**</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type nums: List[int]</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> length</span><br><span class="line"></span><br><span class="line">        max_v = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length+<span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line">        max_v[<span class="hljs-number">0</span>] = min(nums) - <span class="hljs-number">1</span></span><br><span class="line">        max_v[<span class="hljs-number">1</span>] = nums[<span class="hljs-number">0</span>]</span><br><span class="line">        lis = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line"></span><br><span class="line">        cur_max = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length):</span><br><span class="line">            index = self.get_index(max_v[:cur_max+<span class="hljs-number">1</span>], nums[i])</span><br><span class="line">            <span class="hljs-keyword">if</span> index &gt;= <span class="hljs-number">0</span>:</span><br><span class="line">                max_v[index+<span class="hljs-number">1</span>] = nums[i]</span><br><span class="line">                cur_max = max(cur_max, index+<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> cur_max</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_index</span><span class="hljs-params">(self, max_v, num)</span>:</span></span><br><span class="line">        length = len(max_v)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> num &gt; max_v[<span class="hljs-number">-1</span>]:</span><br><span class="line">            <span class="hljs-keyword">return</span> length - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> num &lt; max_v[<span class="hljs-number">0</span>]:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">        low = <span class="hljs-number">0</span></span><br><span class="line">        high = length - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> low &lt;= high:</span><br><span class="line">            middle = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">if</span> max_v[middle] &lt; num <span class="hljs-keyword">and</span> max_v[middle+<span class="hljs-number">1</span>] &gt; num:</span><br><span class="line">                <span class="hljs-keyword">return</span> middle</span><br><span class="line">            <span class="hljs-keyword">elif</span> max_v[middle] == num:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> max_v[middle] &gt; num:</span><br><span class="line">                high = middle - <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                low = middle + <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><h1 id="LeetCode-5-Longest-Palindromic-Substring"><a href="#LeetCode-5-Longest-Palindromic-Substring" class="headerlink" title="LeetCode 5: Longest Palindromic Substring"></a>LeetCode 5: Longest Palindromic Substring</h1><p><img src="/assets/blog_images/manacher.jpeg" alt="manacher"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [5] Longest Palindromic Substring</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/longest-palindromic-substring/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (25.62%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    370.8K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.4M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"babad"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given a string s, find the longest palindromic substring in s. You may assume</span></span><br><span class="line"><span class="hljs-comment"># that the maximum length of s is 1000.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "babad"</span></span><br><span class="line"><span class="hljs-comment"># Output: "bab"</span></span><br><span class="line"><span class="hljs-comment"># Note: "aba" is also a valid answer.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "cbbd"</span></span><br><span class="line"><span class="hljs-comment"># Output: "bb"</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type s: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: str</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line">        length = len(s)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line">        s = self.str_trans(s)</span><br><span class="line">        length = len(s)</span><br><span class="line">        res = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line">        i = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; length:</span><br><span class="line">            j, step = i, <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">while</span> j-step &gt; <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> j+step &lt; length <span class="hljs-keyword">and</span> s[j-step] == s[j+step]:</span><br><span class="line">                res[i] += <span class="hljs-number">2</span></span><br><span class="line">                step += <span class="hljs-number">1</span></span><br><span class="line">            i += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        lp = max(res)</span><br><span class="line">        lp_index = res.index(lp)</span><br><span class="line">        lp = lp // <span class="hljs-number">2</span></span><br><span class="line">        lp = s[lp_index-lp:lp_index+lp+<span class="hljs-number">1</span>]</span><br><span class="line">        <span class="hljs-keyword">return</span> lp.replace(<span class="hljs-string">'#'</span>, <span class="hljs-string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_trans</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        s = list(s)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):</span><br><span class="line">            s[i] = <span class="hljs-string">'#'</span> + s[i]</span><br><span class="line">        s.append(<span class="hljs-string">'#'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(s)</span><br></pre></td></tr></table></figure><p><strong>使用manacher算法的解法：</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type s: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: str</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line">        length = len(s)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        s = self.str_trans(s)</span><br><span class="line"></span><br><span class="line">        length = len(s)</span><br><span class="line">        res = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line">        right = c  = <span class="hljs-number">-1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            res[i] = min(res[<span class="hljs-number">2</span>*c-i], right-i) <span class="hljs-keyword">if</span> right &gt; i <span class="hljs-keyword">else</span> <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">while</span> i-res[i] &gt; <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> i+res[i] &lt; length:</span><br><span class="line">                <span class="hljs-keyword">if</span> s[i-res[i]] == s[i+res[i]]:</span><br><span class="line">                    res[i] += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">            res[i] -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> i + res[i] &gt; right:</span><br><span class="line">                right = i + res[i]</span><br><span class="line">                c = i</span><br><span class="line"></span><br><span class="line">        lp = max(res)</span><br><span class="line">        lp_index = res.index(lp)</span><br><span class="line">        lp = s[lp_index-lp:lp_index+lp+<span class="hljs-number">1</span>]</span><br><span class="line">        <span class="hljs-keyword">return</span> lp.replace(<span class="hljs-string">'#'</span>, <span class="hljs-string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_trans</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        s = list(s)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):</span><br><span class="line">            s[i] = <span class="hljs-string">'#'</span> + s[i]</span><br><span class="line">        s.append(<span class="hljs-string">'#'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(s)</span><br></pre></td></tr></table></figure><h1 id="LeetCode-9-Palindrome-Number-boring-question"><a href="#LeetCode-9-Palindrome-Number-boring-question" class="headerlink" title="LeetCode 9: Palindrome Number [boring question]"></a>LeetCode 9: Palindrome Number [boring question]</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [9] Palindrome Number</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/palindrome-number/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Easy (38.18%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    399.3K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '121'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Determine whether an integer is a palindrome. An integer is a palindrome when</span></span><br><span class="line"><span class="hljs-comment"># it reads the same backward as forward.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: 121</span></span><br><span class="line"><span class="hljs-comment"># Output: true</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: -121</span></span><br><span class="line"><span class="hljs-comment"># Output: false</span></span><br><span class="line"><span class="hljs-comment"># Explanation: From left to right, it reads -121. From right to left, it</span></span><br><span class="line"><span class="hljs-comment"># becomes 121-. Therefore it is not a palindrome.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 3:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: 10</span></span><br><span class="line"><span class="hljs-comment"># Output: false</span></span><br><span class="line"><span class="hljs-comment"># Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Follow up:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Coud you solve it without converting the integer to a string?</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type x: int</span></span><br><span class="line"><span class="hljs-string">        :rtype: bool</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        x = list(str(x))</span><br><span class="line">        low, high = <span class="hljs-number">0</span>, len(x)<span class="hljs-number">-1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="hljs-keyword">if</span> x[low] != x[high]:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">            low += <span class="hljs-number">1</span></span><br><span class="line">            high -= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br></pre></td></tr></table></figure><h1 id="LeetCode-6-ZigZag"><a href="#LeetCode-6-ZigZag" class="headerlink" title="LeetCode 6: ZigZag"></a>LeetCode 6: ZigZag</h1><p><strong>这个题还是挺有意思的，主要是分析以及实现。剑指offer上说的没错，借助几个具体例子，很容易就能摸清一般规律，解法如下：</strong></p><p><img src="/assets/blog_images/zigzag_leetcode6.jpeg" alt="zigzag-leetcode6"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [6] ZigZag Conversion</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/zigzag-conversion/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (28.47%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    239.9K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 838K</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"PAYPALISHIRING"\n3'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># The string "PAYPALISHIRING" is written in a zigzag pattern on a given number</span></span><br><span class="line"><span class="hljs-comment"># of rows like this: (you may want to display this pattern in a fixed font for</span></span><br><span class="line"><span class="hljs-comment"># better legibility)</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># P   A   H   N</span></span><br><span class="line"><span class="hljs-comment"># A P L S I I G</span></span><br><span class="line"><span class="hljs-comment"># Y   I   R</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># And then read line by line: "PAHNAPLSIIGYIR"</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Write the code that will take a string and make this conversion given a</span></span><br><span class="line"><span class="hljs-comment"># number of rows:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># string convert(string s, int numRows);</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: s = "PAYPALISHIRING", numRows = 3</span></span><br><span class="line"><span class="hljs-comment"># Output: "PAHNAPLSIIGYIR"</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: s = "PAYPALISHIRING", numRows = 4</span></span><br><span class="line"><span class="hljs-comment"># Output: "PINALSIGYAHRPI"</span></span><br><span class="line"><span class="hljs-comment"># Explanation:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># P     I    N</span></span><br><span class="line"><span class="hljs-comment"># A   L S  I G</span></span><br><span class="line"><span class="hljs-comment"># Y A   H R</span></span><br><span class="line"><span class="hljs-comment"># P     I</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert</span><span class="hljs-params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type s: str</span></span><br><span class="line"><span class="hljs-string">        :type numRows: int</span></span><br><span class="line"><span class="hljs-string">        :rtype: str</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length = len(s)</span><br><span class="line">        <span class="hljs-keyword">if</span> numRows == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> length &lt;= numRows:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(numRows):</span><br><span class="line">            <span class="hljs-comment"># max_delta是打印第一行两个字符串之间的索引距离</span></span><br><span class="line">            max_delta = numRows * <span class="hljs-number">2</span> - <span class="hljs-number">2</span></span><br><span class="line">            j = i</span><br><span class="line">            res.append(s[j])</span><br><span class="line">            <span class="hljs-comment"># next_must为当前打印行和第一行竖直对应的元素索引</span></span><br><span class="line">            next_must = j + max_delta</span><br><span class="line">            <span class="hljs-comment"># next_cur为为斜坡元素</span></span><br><span class="line">            next_cur = next_must - <span class="hljs-number">2</span> * i</span><br><span class="line">            <span class="hljs-keyword">while</span> next_cur &lt; length:</span><br><span class="line">                <span class="hljs-keyword">if</span> next_cur != j <span class="hljs-keyword">and</span> next_cur != next_must:</span><br><span class="line">                    res.append(s[next_cur])</span><br><span class="line">                <span class="hljs-keyword">if</span> next_must &lt; length:</span><br><span class="line">                    res.append(s[next_must])</span><br><span class="line">                j = next_must</span><br><span class="line">                next_must = j + max_delta</span><br><span class="line">                next_cur = next_must - i * <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="hljs-comment">#     s = 'PAYPALISHIRING'</span></span><br><span class="line"><span class="hljs-comment">#     ex = Solution()</span></span><br><span class="line"><span class="hljs-comment">#     print(ex.convert(s, 4))</span></span><br></pre></td></tr></table></figure><h1 id="LeetCode-8-String-to-Integer-atoi"><a href="#LeetCode-8-String-to-Integer-atoi" class="headerlink" title="LeetCode 8: String to Integer (atoi)"></a>LeetCode 8: String to Integer (atoi)</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [8] String to Integer (atoi)</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/string-to-integer-atoi/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Medium (14.14%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    270K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 1.9M</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '"42"'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Implement atoi which converts a string to an integer.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># The function first discards as many whitespace characters as necessary until</span></span><br><span class="line"><span class="hljs-comment"># the first non-whitespace character is found. Then, starting from this</span></span><br><span class="line"><span class="hljs-comment"># character, takes an optional initial plus or minus sign followed by as many</span></span><br><span class="line"><span class="hljs-comment"># numerical digits as possible, and interprets them as a numerical value.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># The string can contain additional characters after those that form the</span></span><br><span class="line"><span class="hljs-comment"># integral number, which are ignored and have no effect on the behavior of this</span></span><br><span class="line"><span class="hljs-comment"># function.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># If the first sequence of non-whitespace characters in str is not a valid</span></span><br><span class="line"><span class="hljs-comment"># integral number, or if no such sequence exists because either str is empty or</span></span><br><span class="line"><span class="hljs-comment"># it contains only whitespace characters, no conversion is performed.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># If no valid conversion could be performed, a zero value is returned.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Note:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Only the space character ' ' is considered as whitespace character.</span></span><br><span class="line"><span class="hljs-comment"># Assume we are dealing with an environment which could only store integers</span></span><br><span class="line"><span class="hljs-comment"># within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical</span></span><br><span class="line"><span class="hljs-comment"># value is out of the range of representable values, INT_MAX (231 − 1) or</span></span><br><span class="line"><span class="hljs-comment"># INT_MIN (−231) is returned.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 1:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "42"</span></span><br><span class="line"><span class="hljs-comment"># Output: 42</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 2:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "   -42"</span></span><br><span class="line"><span class="hljs-comment"># Output: -42</span></span><br><span class="line"><span class="hljs-comment"># Explanation: The first non-whitespace character is '-', which is the minus</span></span><br><span class="line"><span class="hljs-comment"># sign.</span></span><br><span class="line"><span class="hljs-comment"># Then take as many numerical digits as possible, which gets 42.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 3:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "4193 with words"</span></span><br><span class="line"><span class="hljs-comment"># Output: 4193</span></span><br><span class="line"><span class="hljs-comment"># Explanation: Conversion stops at digit '3' as the next character is not a</span></span><br><span class="line"><span class="hljs-comment"># numerical digit.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 4:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "words and 987"</span></span><br><span class="line"><span class="hljs-comment"># Output: 0</span></span><br><span class="line"><span class="hljs-comment"># Explanation: The first non-whitespace character is 'w', which is not a</span></span><br><span class="line"><span class="hljs-comment"># numerical</span></span><br><span class="line"><span class="hljs-comment"># digit or a +/- sign. Therefore no valid conversion could be performed.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example 5:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: "-91283472332"</span></span><br><span class="line"><span class="hljs-comment"># Output: -2147483648</span></span><br><span class="line"><span class="hljs-comment"># Explanation: The number "-91283472332" is out of the range of a 32-bit signed</span></span><br><span class="line"><span class="hljs-comment"># integer.</span></span><br><span class="line"><span class="hljs-comment"># Thefore INT_MIN (−231) is returned.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(self, str)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type str: str</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        string = str.strip()</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> string:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> string[<span class="hljs-number">0</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">'+-'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.is_num(string[<span class="hljs-number">0</span>]):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> string <span class="hljs-keyword">in</span> <span class="hljs-string">'+-'</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> string[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">'+-'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.is_num(string[<span class="hljs-number">1</span>]):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        flag = <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(string)):</span><br><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.is_num(string[i]):</span><br><span class="line">                flag = <span class="hljs-keyword">False</span></span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> flag:</span><br><span class="line">            convert_string = string</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            convert_string = string[:i]</span><br><span class="line"></span><br><span class="line">        res = int(convert_string)</span><br><span class="line">        <span class="hljs-keyword">if</span> res &gt; <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> res &lt; -(<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-2</span> ** <span class="hljs-number">31</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_num</span><span class="hljs-params">(self, char)</span>:</span></span><br><span class="line">        ord_val = ord(char)</span><br><span class="line">        <span class="hljs-keyword">if</span> ord_val &gt; <span class="hljs-number">47</span> <span class="hljs-keyword">and</span> ord_val &lt; <span class="hljs-number">58</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="hljs-comment">#     string = '43'</span></span><br><span class="line"><span class="hljs-comment">#     ex = Solution()</span></span><br><span class="line"><span class="hljs-comment">#     print(ex.myAtoi(string))</span></span><br></pre></td></tr></table></figure><h1 id="LeetCode-10-Regular-Expression-Matching-hard"><a href="#LeetCode-10-Regular-Expression-Matching-hard" class="headerlink" title="LeetCode 10: Regular Expression Matching [hard]"></a>LeetCode 10: Regular Expression Matching [hard]</h1><p><strong>这个题是剑指offer原题，在解剑指offer中，使用的解法是暴力递归，这个解法在leetcode是通不过的，同时看了LeetCode上的Solution之后，我真的有点儿方了。上面的Python解法写的无比精炼，简直是优美，下面上一下同样的暴力递归思路的比较：</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-comment"># s, pattern都是字符串</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match</span><span class="hljs-params">(self, s, pattern)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(s) == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> len(pattern) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-comment"># 如果s长度不为0，而pattern长度为0，这种情况不可能匹配成功</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> len(s) != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> len(pattern) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-comment"># 如果s长度为0， 而pattern长度不为0，那么可能会有pattern为'（.*）*'的情况</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> len(s) == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> len(pattern) != <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-comment"># 如果pattern第二位为0, pattern推进两个</span></span><br><span class="line">            <span class="hljs-keyword">if</span> len(pattern) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> self.match(s, pattern[<span class="hljs-number">2</span>:])</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-comment"># 如果s和pattern长度都不为0</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-comment"># pattern第二位为*</span></span><br><span class="line">            <span class="hljs-keyword">if</span> len(pattern) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>:</span><br><span class="line">                <span class="hljs-comment"># 如果s[0] != pattern[0]</span></span><br><span class="line">                <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] !=  pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] != <span class="hljs-string">'.'</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> self.match(s, pattern[<span class="hljs-number">2</span>:])</span><br><span class="line">                <span class="hljs-comment"># 如果s[0] == pattern[0], 那么有三种情况</span></span><br><span class="line">                    <span class="hljs-comment"># 1. s不变，pattern后移两步（pattern前两个字符等价于空）</span></span><br><span class="line">                    <span class="hljs-comment"># 2. s右移一个， pattern右移两个 （pattern前两个字符等价于一个字符）</span></span><br><span class="line">                    <span class="hljs-comment"># 3. s右移一个， pattern不右移 （pattern前两个字符等价于多个字符)）</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> self.match(s, pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> \</span><br><span class="line">                           self.match(s[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> \</span><br><span class="line">                           self.match(s[<span class="hljs-number">1</span>:], pattern)</span><br><span class="line">            <span class="hljs-comment"># pattern第二位不是*</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-comment"># 比较第一位的情况</span></span><br><span class="line">                <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> pattern[<span class="hljs-number">0</span>] == <span class="hljs-string">'.'</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> self.match(s[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br></pre></td></tr></table></figure><p>LeetCode示范解法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(self, text, pattern)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pattern:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> text</span><br><span class="line"></span><br><span class="line">        first_match = bool(text) <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> &#123;text[<span class="hljs-number">0</span>], <span class="hljs-string">'.'</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> len(pattern) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> (self.isMatch(text, pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span></span><br><span class="line">                    first_match <span class="hljs-keyword">and</span> self.isMatch(text[<span class="hljs-number">1</span>:], pattern))</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> first_match <span class="hljs-keyword">and</span> self.isMatch(text[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])</span><br></pre></td></tr></table></figure><p>加一点对于LeetCode标准解的解释：</p><p>首先如果是匹配pattern中没有<code>*</code>字符，那么匹配过程就可以简化成：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match</span><span class="hljs-params">(text, pattern)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pattern: <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> text</span><br><span class="line">    first_match = bool(text) <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> &#123;text[<span class="hljs-number">0</span>], <span class="hljs-string">'.'</span>&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> first_match <span class="hljs-keyword">and</span> match(text[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])</span><br></pre></td></tr></table></figure></p><p>对应于解法中的else情况，那么如果匹配pattern中有<code>*</code>字符，且是解法中的if情况，那么不管pattern[0]是否匹配，我们都需要看<code>*</code>代表前面字符出现0次时候的情况；另外，如果第一个字符是匹配的，那么我们还要看<code>*</code>匹配1次或多次的情况。</p><p>暴力递归的解法是通不过LeetCode测试的，此时为了加快速度我们可以用functools里的lru_cache来保存暴力递归中间值；同样也可以把暴力递归版本改成动态规划版本，相对来说使用lru__cache更省力。</p><p>使用lru__cache只需加入两行代码，代码就不贴了。</p><p>动态规划版本:<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(self, text, pattern)</span>:</span></span><br><span class="line">        dp = [[<span class="hljs-keyword">False</span>] * (len(pattern) + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(len(text) + <span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line">        dp[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>] = <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(text), <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(pattern) - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">                first_match = i &lt; len(text) <span class="hljs-keyword">and</span> pattern[j] <span class="hljs-keyword">in</span> &#123;text[i], <span class="hljs-string">'.'</span>&#125;</span><br><span class="line">                <span class="hljs-keyword">if</span> j+<span class="hljs-number">1</span> &lt; len(pattern) <span class="hljs-keyword">and</span> pattern[j+<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j+<span class="hljs-number">2</span>] <span class="hljs-keyword">or</span> first_match <span class="hljs-keyword">and</span> dp[i+<span class="hljs-number">1</span>][j]</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    dp[i][j] = first_match <span class="hljs-keyword">and</span> dp[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]</span><br></pre></td></tr></table></figure></p><h1 id="LeetCode-45-Jump-Game-II-hard"><a href="#LeetCode-45-Jump-Game-II-hard" class="headerlink" title="LeetCode 45: Jump Game II [hard]"></a>LeetCode 45: Jump Game II [hard]</h1><p>这个题是一个hard级别的题，但感觉跟其他mid难度的题差不多。这个题是做去哪儿网笔试<br>的时候做的，只ac了67%，后来才知道是LeetCode原题，所以就想着看看代码为什么没有ac，<br>结果到了LeetCode就ac了。。</p><p>最开始解的时候，自己没有什么好的思路。但是在思考过程中，我发现，我们是想要每一步走的最远。<br>那么每次我们就看下当前位置能走多远，以及当前位置可走范围内的位置最远都可以走多远；<br>那么我们如果每次都选在当前位置能走的范围内（包括当前位置）的位置中能走的最远的那么位置，那么我们就能<br>最快到达最后一个位置。</p><p>自己真的想出来一个题的成就感是巨大的，在后来思考的过程中，我好像玄而又玄的一类的问题都应该可以这么解。<br>但是仔细想归纳却又说不出来。但是把一个过程不是很清晰的大过程，抽象出一个可用的规则，这种能力应该会越来越强把。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># [45] Jump Game II</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># https://leetcode.com/problems/jump-game-ii/description/</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># algorithms</span></span><br><span class="line"><span class="hljs-comment"># Hard (26.29%)</span></span><br><span class="line"><span class="hljs-comment"># Total Accepted:    133.1K</span></span><br><span class="line"><span class="hljs-comment"># Total Submissions: 504.1K</span></span><br><span class="line"><span class="hljs-comment"># Testcase Example:  '[2,3,1,1,4]'</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Given an array of non-negative integers, you are initially positioned at the</span></span><br><span class="line"><span class="hljs-comment"># first index of the array.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Each element in the array represents your maximum jump length at that</span></span><br><span class="line"><span class="hljs-comment"># position.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Your goal is to reach the last index in the minimum number of jumps.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Example:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Input: [2,3,1,1,4]</span></span><br><span class="line"><span class="hljs-comment"># Output: 2</span></span><br><span class="line"><span class="hljs-comment"># Explanation: The minimum number of jumps to reach the last index is 2.</span></span><br><span class="line"><span class="hljs-comment"># ⁠   Jump 1 step from index 0 to 1, then 3 steps to the last index.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># Note:</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment"># You can assume that you can always reach the last index.</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"><span class="hljs-comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jump</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">        :type nums: List[int]</span></span><br><span class="line"><span class="hljs-string">        :rtype: int</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        cur = <span class="hljs-number">0</span></span><br><span class="line">        steps = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> cur &lt; length:</span><br><span class="line">            temp = nums[cur]</span><br><span class="line">            <span class="hljs-keyword">if</span> cur + temp &gt;= length<span class="hljs-number">-1</span>:</span><br><span class="line">                steps += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">return</span> steps</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                most_access = [cur, cur+temp]</span><br><span class="line">                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(cur+<span class="hljs-number">1</span>, cur+temp+<span class="hljs-number">1</span>):</span><br><span class="line">                    <span class="hljs-keyword">if</span> i + nums[i] &gt; most_access[<span class="hljs-number">1</span>]:</span><br><span class="line">                        most_access = [i, i+nums[i]]</span><br><span class="line">                cur_step = temp <span class="hljs-keyword">if</span> most_access[<span class="hljs-number">0</span>] == cur <span class="hljs-keyword">else</span> most_access[<span class="hljs-number">0</span>] - cur</span><br><span class="line">                cur = most_access[<span class="hljs-number">0</span>]</span><br><span class="line">                steps += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="hljs-comment">#     nums = list(map(int, input().split()))</span></span><br><span class="line"><span class="hljs-comment">#     ex = Solution()</span></span><br><span class="line"><span class="hljs-comment">#     print(ex.jump(nums))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      LeetCode每日一题题解集
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
      <category term="Python" scheme="https://todebug.com/categories/Coding/Python/"/>
    
    
      <category term="leetcode" scheme="https://todebug.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>给Jekyll博客添加Latex公式支持</title>
    <link href="https://todebug.com/2018/09/13/add-eqution-support-in-jekyll/"/>
    <id>https://todebug.com/2018/09/13/add-eqution-support-in-jekyll/</id>
    <published>2018-09-12T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:48.763Z</updated>
    
    <content type="html"><![CDATA[<p> 昨天不清楚Jekyll能不能够支持Latex公式，所以写master的公式的时候就直接ipad手写截图了，今天还要在博客里写一些公式，就找了找有没有解决方法，果然是有的，体验非常棒。</p><a id="more"></a><p><strong>工具官网：</strong> <a href="https://www.mathjax.org/" target="_blank" rel="noopener">MathJax</a></p><p><strong>使用方法：</strong></p><p>把下面的JS调用代码以及配置插入到你Jekyll博客的header文件中：</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/x-mathjax-config"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">  MathJax.Hub.Config(&#123;</span></span><br><span class="line"><span class="hljs-undefined">    tex2jax: &#123;</span></span><br><span class="line"><span class="hljs-undefined">      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],</span></span><br><span class="line"><span class="hljs-undefined">      inlineMath: [['$','$']]</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;);</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML'</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> 默认的MathJax配置和Latex有所不同，主要体现在默认的inline公式是要用<code>\( \)</code>来标示，而Latex是用两个\$符号。所以上面配置里将默认修改成了Latex的标示方法。</p><p><strong>效果如下：</strong></p><p>$$W (s_{i}\leftarrow s_{j})=\frac{1}{1+\exp[ (p_{i}-p_{j})/K]}$$</p><p><br></p><hr><p><strong>refs：</strong><a href="https://stackoverflow.com/questions/26275645/how-to-supported-latex-in-github-pages" target="_blank" rel="noopener">StackOverflow</a></p>]]></content>
    
    <summary type="html">
    
      给Jekyll博客添加Latex公式支持
    
    </summary>
    
      <category term="Tips" scheme="https://todebug.com/categories/Tips/"/>
    
    
      <category term="tips" scheme="https://todebug.com/tags/tips/"/>
    
      <category term="jekyll" scheme="https://todebug.com/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>递归时间复杂度计算：master公式</title>
    <link href="https://todebug.com/2018/09/11/master-formula-of-recursive/"/>
    <id>https://todebug.com/2018/09/11/master-formula-of-recursive/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:48.424Z</updated>
    
    <content type="html"><![CDATA[<p><strong>老忘，记下来随时翻一翻。</strong></p><h1 id="T-n-aT-frac-n-b-O-n-d"><a href="#T-n-aT-frac-n-b-O-n-d" class="headerlink" title="$T(n) = aT(\frac{n}{b}) + O(n^d) $"></a>$T(n) = aT(\frac{n}{b}) + O(n^d) $</h1><p><font size="5">其中： $\log_{b}a &gt; d \quad \Rightarrow \quad O(n^{\log_{b}a})$ <br><br>&emsp;&emsp;&emsp;&nbsp;&nbsp;$\log_{b}a &lt; d \quad \Rightarrow \quad O(n^{d})$ <br><br>&emsp;&emsp;&emsp;&nbsp;&nbsp;$\log_{b}a = d \quad  \Rightarrow \quad O(n^{d}*\log{n})$ <br><br></font><br><strong>其中a为递归中子递归个数， n/b为子递归的数据规模。</strong></p>]]></content>
    
    <summary type="html">
    
      递归master公式
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
    
  </entry>
  
  <entry>
    <title>PEP 3333 -- Python Web Server Gateway Interface 阅读笔记[to be continued]</title>
    <link href="https://todebug.com/2018/09/11/reading-notes-of-PEP3333-WSGI/"/>
    <id>https://todebug.com/2018/09/11/reading-notes-of-PEP3333-WSGI/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:48.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PEP 3333 是PEP 333的更新，对于原来和PEP 333兼容的应用和服务器，它们和PEP 3333仍然是兼容的。</p><p>对于Python3来说，编写应用或者服务器必须要遵循下面两个标题命名的版块里提到的规则：<code>A Note On String Types</code>,和<code>Unicode Issues</code>。</p><a id="more"></a><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>如果有人问你WSGI是啥，就可以参考下面这句话回答他了：“This document specifies a proposed standard interface between web servers and Python web applications or frameworks, to promote web application protability across a variety of web servers. ”</p><h2 id="出发点和目标（Original-Rationale-and-Goals）"><a href="#出发点和目标（Original-Rationale-and-Goals）" class="headerlink" title="出发点和目标（Original Rationale and Goals）"></a>出发点和目标（Original Rationale and Goals）</h2><p><strong>出发点：</strong> <br><br>Python目前有很多web应用程序框架，众多的选择给Python新用户带来一个问题：在选择web框架的同时，也限制了他们对于可用的web服务器的选择，反过来也是一样。</p><p>作为比较，Java也有很多的web应用框架，但是Java的<code>servlet</code>API可以让任何Java web应用框架在支持这种API的web服务器上运行。</p><p>所以，Python实现一个这种API也是有必要的。</p><p><strong>目标：</strong><br></p><p>1.&emsp;鉴于现在还没有支持WSGI的服务器或者框架，所以WSGI必须容易实现，开发者的上手难度也要降到最小；需要注意的是，对于框架作者来说容易实现，并不意味着对web应用作者也是这样。所以WSGI没有添加花里胡哨的像返回对象和cookie处理这些可能会影响现有框架处理这些问题的东西，而是呈现了一个没有装饰的接口。WSGI的目标是能让现有服务器和应用或者框架之间更容易交流，而不是创建一个新的web框架。</p><p>还要注意的是，这个目标也阻止了WSGI使用任何在现发行的Python版本中没有的东西作为依赖。因此，本规范没有提出或要求新的标准库模块，而且WSGI中的任何内容都不需要大于2.2.2的Python版本。（不过，对于未来版本的Python来说，在标准库提供的web服务器中包含对该接口的支持将是一个好主意。）</p><p>2.&emsp;为了让现有的以及未来的框架和服务器更容易实现WSGI，WSGI也应该能很容易的创建请求预处理、响应后处理以及其它基于WSGI的<code>middleware</code>组件。</p><p>（文档里还yy了一下前景：）如果中间件足够简单且健壮，并且WSGI在服务器和框架中被广泛使用，那么就有可能出现一种全新的Python web应用程序框架：一个由松散耦合的WSGI中间件组件组成的框架。事实上，现有的框架作者甚至可能会选择重构他们的框架的现有服务，变得更像是和WSGI一起使用的库，而不像一个完整统一的框架。这可能会使得应用开发者可以去选择对于某一功能的最佳组合组件，而不是需要接受一整个框架的好处和坏处。</p><p>3.&emsp;最后应该提到，目前版本的WSGI没有对部署应用规定任何特殊机制。</p><h2 id="规范综述（Specification-Overview）"><a href="#规范综述（Specification-Overview）" class="headerlink" title="规范综述（Specification Overview）"></a>规范综述（Specification Overview）</h2><p>WSGI接口包括两端：服务器或者网关端，和应用或者框架端。服务器端调用一个由应用端提供的可调用对象。</p><p>下面这两段话有点儿迷糊，先记录原话和当前理解：</p><blockquote><p>In addition to “pure” servers/gateways and applications/frameworks, it is also possible to create “middleware” components that implement both sides of this specification. Such components act as an application to their containing server, and as a server to a contained application, and can be used to provide extended APIs, content transformation, navigation, and other useful functions.</p></blockquote><p>对包含它的服务器表现的像应用，对包含它的应用表现的像服务器。</p><blockquote><p>Throughout this specification, we will use the term “a callable” to mean “a function, method, class, or an instance with a <strong>call</strong> method”. It is up to the server, gateway, or application implementing the callable to choose the appropriate implementation technique for their needs. Conversely, a server, gateway, or application that is invoking a callable must not have any dependency on what kind of callable was provided to it. Callables are only to be called, not introspected upon.</p></blockquote><p>一个<code>callable</code>可以指一个函数，一个方法，一个类或者一个定义了<code>__call__</code>方法的实例。由实现<code>the callable</code>的服务器、网关或者应用程序根据它们的需要选择适当的实现技术。另一方面，调用<code>callable</code>的服务器、网关或应用程序禁止依赖提供给它的<code>callable</code>的类型。也就是说，<code>callbles</code>只是用来被调用的，而不是被内省（获取它们的类型）。</p><h3 id="一个字符串类型需要注意的地方（A-Note-On-String-Types）"><a href="#一个字符串类型需要注意的地方（A-Note-On-String-Types）" class="headerlink" title="一个字符串类型需要注意的地方（A Note On String Types）"></a>一个字符串类型需要注意的地方（A Note On String Types）</h3><p>通常，HTTP处理的是字节，这就意味着这个规范主要就是关于如何处理字节。</p><p>字节内容总会有某种文本解释（textual interpretation），在Python中，字符串是处理文本最方便的方式。</p><p>但是在很多Python版本和实现中，字符串是<code>Unicode</code>，而不是字节。这就需要在一个可用的API和在HTTP上下文的文本中正确的转换字节和文本之间进行谨慎的权衡。</p><p>也基于此，WSGI定义了两种”string”：</p><ul><li>“Native” strings（总是使用<code>str</code>类型实现。），用于请求/响应头和元数据。</li><li>“Bytestrings”（在Python3中使用<code>bytes</code>类型实现，在其他地方使用<code>str</code>类型实现），用于请求和响应的主体（比如<code>POST/PUT</code>输入数据和HTML页面的输出）。</li></ul><p>但是不要搞混了：即使Python的<code>str</code>类型底层实际上<code>Unicode</code>，<code>native strings</code>的内容也必须能够通过<code>Latin-1</code>编码转换到字节。（细节参见下面的<code>Unicode Issues</code>章节）。</p><h2 id="应用-框架端"><a href="#应用-框架端" class="headerlink" title="应用/框架端"></a>应用/框架端</h2><p>应用程序对象（<code>application object</code>）只是一个接受两个 参数的可调用对象。术语<code>object</code>不应该被误解为需要一个实际的对象实例：函数、方法、类或带有<code>__calll__</code>方法的实例都可以作为应用程序对象使用。应用程序对象必须能够被多次调用，因为几乎所有的服务器/网管（CGI除外）都会发出重复请求。</p><p>（注意：虽然我们把它叫做应用程序对象，但这不应该被解释为应用程序开发者会使用WSGI作为web编程的API。WSGI是一个面向框架和服务器开发者的工具，而没有直接支持应用程序开发者的倾向。）</p><p>下面是两个应用程序对象；一个是函数，另一个是类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">HELLO_WORLD = <span class="hljs-string">b"Hello world!\n"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simple_app</span><span class="hljs-params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Simplest possible application object"""</span></span><br><span class="line">    status = <span class="hljs-string">'200 OK'</span></span><br><span class="line">    response_headers = [(<span class="hljs-string">'Content-type'</span>, <span class="hljs-string">'text/plain'</span>)]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="hljs-keyword">return</span> [HELLO_WORLD]</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppClass</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Produce the same output, but using a class</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    (Note: 'AppClass' is the "application" here, so calling it</span></span><br><span class="line"><span class="hljs-string">    returns an instance of 'AppClass', which is then the iterable</span></span><br><span class="line"><span class="hljs-string">    return value of the "application callable" as required by</span></span><br><span class="line"><span class="hljs-string">    the spec.</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    If we wanted to use *instances* of 'AppClass' as application</span></span><br><span class="line"><span class="hljs-string">    objects instead, we would have to implement a '__call__'</span></span><br><span class="line"><span class="hljs-string">    method, which would be invoked to execute the application,</span></span><br><span class="line"><span class="hljs-string">    and we would need to create an instance for use by the</span></span><br><span class="line"><span class="hljs-string">    server or gateway.</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, environ, start_response)</span>:</span></span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.start = start_response</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        status = <span class="hljs-string">'200 OK'</span></span><br><span class="line">        response_headers = [(<span class="hljs-string">'Content-type'</span>, <span class="hljs-string">'text/plain'</span>)]</span><br><span class="line">        self.start(status, response_headers)</span><br><span class="line">        <span class="hljs-keyword">yield</span> HELLO_WORLD</span><br></pre></td></tr></table></figure><h2 id="服务器-网关端"><a href="#服务器-网关端" class="headerlink" title="服务器/网关端"></a>服务器/网关端</h2><p>服务器或者网关为每一个从HTTP接收到的请求调用一次请求调用一次该请求对应的可调用应用程序。下面是一个简单的CGI网关，一个接收应用程序对象的函数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">mport os, sys</span><br><span class="line"></span><br><span class="line">enc, esc = sys.getfilesystemencoding(), <span class="hljs-string">'surrogateescape'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">unicode_to_wsgi</span><span class="hljs-params">(u)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># Convert an environment variable to a WSGI "bytes-as-unicode" string</span></span><br><span class="line">    <span class="hljs-keyword">return</span> u.encode(enc, esc).decode(<span class="hljs-string">'iso-8859-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wsgi_to_bytes</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> s.encode(<span class="hljs-string">'iso-8859-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_with_cgi</span><span class="hljs-params">(application)</span>:</span></span><br><span class="line">    environ = &#123;k: unicode_to_wsgi(v) <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> os.environ.items()&#125;</span><br><span class="line">    environ[<span class="hljs-string">'wsgi.input'</span>]        = sys.stdin.buffer</span><br><span class="line">    environ[<span class="hljs-string">'wsgi.errors'</span>]       = sys.stderr</span><br><span class="line">    environ[<span class="hljs-string">'wsgi.version'</span>]      = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span><br><span class="line">    environ[<span class="hljs-string">'wsgi.multithread'</span>]  = <span class="hljs-keyword">False</span></span><br><span class="line">    environ[<span class="hljs-string">'wsgi.multiprocess'</span>] = <span class="hljs-keyword">True</span></span><br><span class="line">    environ[<span class="hljs-string">'wsgi.run_once'</span>]     = <span class="hljs-keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> environ.get(<span class="hljs-string">'HTTPS'</span>, <span class="hljs-string">'off'</span>) <span class="hljs-keyword">in</span> (<span class="hljs-string">'on'</span>, <span class="hljs-string">'1'</span>):</span><br><span class="line">        environ[<span class="hljs-string">'wsgi.url_scheme'</span>] = <span class="hljs-string">'https'</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        environ[<span class="hljs-string">'wsgi.url_scheme'</span>] = <span class="hljs-string">'http'</span></span><br><span class="line"></span><br><span class="line">    headers_set = []</span><br><span class="line">    headers_sent = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span><span class="hljs-params">(data)</span>:</span></span><br><span class="line">        out = sys.stdout.buffer</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> headers_set:</span><br><span class="line">             <span class="hljs-keyword">raise</span> AssertionError(<span class="hljs-string">"write() before start_response()"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> headers_sent:</span><br><span class="line">             <span class="hljs-comment"># Before the first output, send the stored headers</span></span><br><span class="line">             status, response_headers = headers_sent[:] = headers_set</span><br><span class="line">             out.write(wsgi_to_bytes(<span class="hljs-string">'Status: %s\r\n'</span> % status))</span><br><span class="line">             <span class="hljs-keyword">for</span> header <span class="hljs-keyword">in</span> response_headers:</span><br><span class="line">                 out.write(wsgi_to_bytes(<span class="hljs-string">'%s: %s\r\n'</span> % header))</span><br><span class="line">             out.write(wsgi_to_bytes(<span class="hljs-string">'\r\n'</span>))</span><br><span class="line"></span><br><span class="line">        out.write(data)</span><br><span class="line">        out.flush()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_response</span><span class="hljs-params">(status, response_headers, exc_info=None)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> exc_info:</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                <span class="hljs-keyword">if</span> headers_sent:</span><br><span class="line">                    <span class="hljs-comment"># Re-raise original exception if headers sent</span></span><br><span class="line">                    <span class="hljs-keyword">raise</span> exc_info[<span class="hljs-number">1</span>].with_traceback(exc_info[<span class="hljs-number">2</span>])</span><br><span class="line">            <span class="hljs-keyword">finally</span>:</span><br><span class="line">                exc_info = <span class="hljs-keyword">None</span>     <span class="hljs-comment"># avoid dangling circular ref</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> headers_set:</span><br><span class="line">            <span class="hljs-keyword">raise</span> AssertionError(<span class="hljs-string">"Headers already set!"</span>)</span><br><span class="line"></span><br><span class="line">        headers_set[:] = [status, response_headers]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># Note: error checking on the headers should happen here,</span></span><br><span class="line">        <span class="hljs-comment"># *after* the headers are set.  That way, if an error</span></span><br><span class="line">        <span class="hljs-comment"># occurs, start_response can only be re-called with</span></span><br><span class="line">        <span class="hljs-comment"># exc_info set.</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> write</span><br><span class="line"></span><br><span class="line">    result = application(environ, start_response)</span><br><span class="line">    <span class="hljs-keyword">try</span>:</span><br><span class="line">        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> result:</span><br><span class="line">            <span class="hljs-keyword">if</span> data:    <span class="hljs-comment"># don't send headers until body appears</span></span><br><span class="line">                write(data)</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> headers_sent:</span><br><span class="line">            write(<span class="hljs-string">''</span>)   <span class="hljs-comment"># send headers now if body was empty</span></span><br><span class="line">    <span class="hljs-keyword">finally</span>:</span><br><span class="line">        <span class="hljs-keyword">if</span> hasattr(result, <span class="hljs-string">'close'</span>):</span><br><span class="line">            result.close()</span><br></pre></td></tr></table></figure><h2 id="中间件：左右逢源的组件（Middleware-Components-that-Play-Both-Sides）"><a href="#中间件：左右逢源的组件（Middleware-Components-that-Play-Both-Sides）" class="headerlink" title="中间件：左右逢源的组件（Middleware: Components that Play Both Sides）"></a>中间件：左右逢源的组件（Middleware: Components that Play Both Sides）</h2><p>要注意的是，一个对象对于一些应用可能发挥服务器的作用，对于一些服务器，又可能表现得像应用。这种中间件组件能够执行以下功能：</p><ul><li>根据目标URL，重写了对应<code>environ</code>之后，将一个请求路由到不同的应用程序对象</li><li>可以让多个应用或者框架在一个进程中并行运行</li><li>通过网络转发请求和响应，实现负载均衡和远程处理</li><li>执行内容后处理，比如应用XSL样式表</li></ul><p>一般来说，中间件对于服务器/网关端和应用/框架端的接口都是透明的，而且不应该需要特殊支持。用户想要把中间件嵌入应用中只需要简单的把中间件提供给服务器，就好像中间件也是一个应用一样；而且（如果想要把中间件嵌入服务器）配置中间件组件调用应用程序，就好像中间件组件是一个服务器一样。当然，这个中间件包裹的应用实际上可能是另外一个包裹着另一个应用的中间件，以此类推，就创造出了被称为中间件栈的东西。</p><p>在很大程度上，中间件必须遵循服务器端和应用端的限制和需求。在一些情况下，中间件的要求要比一个单纯的服务器或者应用还要严格，这些情况会在规范中指出。</p><p>下面是一个很随意的例子，功能是将<code>text/plain</code>响应转换成pigLatin。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">m piglatin <span class="hljs-keyword">import</span> piglatin</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LatinIter</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-string">"""Transform iterated output to piglatin, if it's okay to do so</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Note that the "okayness" can change until the application yields</span></span><br><span class="line"><span class="hljs-string">    its first non-empty bytestring, so 'transform_ok' has to be a mutable</span></span><br><span class="line"><span class="hljs-string">    truth value.</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, result, transform_ok)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> hasattr(result, <span class="hljs-string">'close'</span>):</span><br><span class="line">            self.close = result.close</span><br><span class="line">        self._next = iter(result).__next__</span><br><span class="line">        self.transform_ok = transform_ok</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__next__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.transform_ok:</span><br><span class="line">            <span class="hljs-keyword">return</span> piglatin(self._next())   <span class="hljs-comment"># call must be byte-safe on Py3</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> self._next()</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Latinator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># by default, don't transform output</span></span><br><span class="line">    transform = <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self, environ, start_response)</span>:</span></span><br><span class="line"></span><br><span class="line">        transform_ok = []</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_latin</span><span class="hljs-params">(status, response_headers, exc_info=None)</span>:</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment"># Reset ok flag, in case this is a repeat call</span></span><br><span class="line">            <span class="hljs-keyword">del</span> transform_ok[:]</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> response_headers:</span><br><span class="line">                <span class="hljs-keyword">if</span> name.lower() == <span class="hljs-string">'content-type'</span> <span class="hljs-keyword">and</span> value == <span class="hljs-string">'text/plain'</span>:</span><br><span class="line">                    transform_ok.append(<span class="hljs-keyword">True</span>)</span><br><span class="line">                    <span class="hljs-comment"># Strip content-length if present, else it'll be wrong</span></span><br><span class="line">                    response_headers = [(name, value)</span><br><span class="line">                        <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> response_headers</span><br><span class="line">                            <span class="hljs-keyword">if</span> name.lower() != <span class="hljs-string">'content-length'</span></span><br><span class="line">                    ]</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">            write = start_response(status, response_headers, exc_info)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> transform_ok:</span><br><span class="line">                <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_latin</span><span class="hljs-params">(data)</span>:</span></span><br><span class="line">                    write(piglatin(data))   <span class="hljs-comment"># call must be byte-safe on Py3</span></span><br><span class="line">                <span class="hljs-keyword">return</span> write_latin</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> write</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> LatinIter(self.application(environ, start_latin), transform_ok)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Run foo_app under a Latinator's control, using the example CGI gateway</span></span><br><span class="line"><span class="hljs-keyword">from</span> foo_app <span class="hljs-keyword">import</span> foo_app</span><br><span class="line">run_with_cgi(Latinator(foo_app))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      PEP 3333 Python Web Server Gateway Interface 阅读笔记
    
    </summary>
    
      <category term="Python" scheme="https://todebug.com/categories/Python/"/>
    
      <category term="PEP" scheme="https://todebug.com/categories/Python/PEP/"/>
    
    
      <category term="pep" scheme="https://todebug.com/tags/pep/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 第五章 题39-52题解 Python版</title>
    <link href="https://todebug.com/2018/08/25/offer39-52/"/>
    <id>https://todebug.com/2018/08/25/offer39-52/</id>
    <published>2018-08-24T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:48.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bryceyang/python_to_the_offer" target="_blank" rel="noopener">Github</a></p><a id="more"></a><h2 id="时间效率类考察题："><a href="#时间效率类考察题：" class="headerlink" title="时间效率类考察题："></a>时间效率类考察题：</h2><p>节省时间就是延长生命。：）</p><hr><h3 id="题39：数组中出现次数超过一半的数字"><a href="#题39：数组中出现次数超过一半的数字" class="headerlink" title="题39：数组中出现次数超过一半的数字"></a>题39：数组中出现次数超过一半的数字</h3><blockquote><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如，输入一个长度为9的数组{1， 2， 3，2， 2， 2， 5， 4， 2}</p></blockquote><p><strong>解法：</strong> <br><br>1.借用partition函数：<br></p><blockquote><p>如果一个元素在数组中出现次数超过一半，那么该元素一定也占据<strong>排序数组</strong>中位数位置。我们可以利用快排partition过程求得数组中位数元素。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">MoreThanHalfNum_Solution</span><span class="hljs-params">(self, numbers)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(numbers) &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        length = len(numbers)</span><br><span class="line">        l, r = <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span></span><br><span class="line">        middle = length &gt;&gt; <span class="hljs-number">1</span></span><br><span class="line">        m_left, m_right = self.partition(numbers, l, r)</span><br><span class="line">        <span class="hljs-keyword">while</span> middle <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> range(m_left, m_right+<span class="hljs-number">1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> middle &lt; m_left:</span><br><span class="line">                r = m_left - <span class="hljs-number">1</span></span><br><span class="line">                m_left, m_right = self.partition(numbers, l, r)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                l = m_right + <span class="hljs-number">1</span></span><br><span class="line">                m_left, m_right = self.partition(numbers, l, r)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> numbers[middle] <span class="hljs-keyword">if</span> numbers.count(numbers[middle]) &gt; length // <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(self, numbers, l, r)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""快排partition过程</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            numbers &#123;list&#125; -- 数组</span></span><br><span class="line"><span class="hljs-string">            l &#123;int&#125; -- 左边界</span></span><br><span class="line"><span class="hljs-string">            r &#123;int&#125; -- 右边界</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            tuple -- 第一个元素为本轮选中元素占据的最左索引，第二个元素为本轮选中元素占据的最右索引</span></span><br><span class="line"><span class="hljs-string">                     如果本轮选中元素在数组中只有一个，那么tuple中两个元素就是相等的。</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        self.swap(numbers, random.randint(l, r), r)</span><br><span class="line">        start = l - <span class="hljs-number">1</span></span><br><span class="line">        end = r</span><br><span class="line">        <span class="hljs-keyword">while</span> l &lt; end:</span><br><span class="line">            <span class="hljs-keyword">if</span> numbers[l] &lt; numbers[r]:</span><br><span class="line">                start += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">if</span> start != l:</span><br><span class="line">                    self.swap(numbers, start, l)</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> numbers[l] == numbers[r]:</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                end -= <span class="hljs-number">1</span></span><br><span class="line">                self.swap(numbers, l, end)</span><br><span class="line">        self.swap(numbers, end, r)</span><br><span class="line">        <span class="hljs-keyword">return</span> start + <span class="hljs-number">1</span>, end</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, numbers, i, j)</span>:</span></span><br><span class="line">        numbers[i], numbers[j] = numbers[j], numbers[i]</span><br></pre></td></tr></table></figure><p>2.使用题目中元素特性<br></p><blockquote><p>如果数组中一个元素出现的次数大于数组长度的一半，那么该元素出现的次数大于数组中其他元素出现的次数和。所以可以设计一个count变量用来统计元素个数，具体过程如下：<br><br>1.count初始值设为0， 遍历数组<br><br>2.当前遍历到的数组元素假定为cur，那么如果此时count值为0，count值就加一，继续遍历，如果遍历到的元素等于cur，count值就加一，反之就减一；<br><br>3.返回最后一个将count设为1的元素；<br><br>同样的，我们需要检测最后输出元素是否出现次数是大于数组长度的一半的。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">MoreThanHalfNum_Solution</span><span class="hljs-params">(self, numbers)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(numbers) &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        count = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(numbers)):</span><br><span class="line">            <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:</span><br><span class="line">                flag = numbers[i]</span><br><span class="line">                count += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">if</span> numbers[i] != flag:</span><br><span class="line">                    count -= <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    count += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> flag <span class="hljs-keyword">if</span> numbers.count(flag) &gt; len(numbers) // <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></span><br></pre></td></tr></table></figure><hr><h3 id="题39衍生题：给定整数K，求长度为N的数组中元素出现次数超过N-K的元素"><a href="#题39衍生题：给定整数K，求长度为N的数组中元素出现次数超过N-K的元素" class="headerlink" title="题39衍生题：给定整数K，求长度为N的数组中元素出现次数超过N/K的元素"></a>题39衍生题：给定整数K，求长度为N的数组中元素出现次数超过N/K的元素</h3><p><strong>解法：</strong> <br><br>这个题跟题39一脉相承，在题39中，我们的解法原型其实是每次都数组里删除两个不同的元素，如果数组中存在出现次数超过数组一般的元素，那么不同元素对删除完成之后剩下的元素一定是所求元素。<br><br>现在拓展开来，如果我们要求数组中出现次数大于N/K的元素，那么我们一次删除k-1个，最后剩余的k-1个也就包含出现次数大于N/K的元素。<br><br>拓展情况是包括题39的，拓展情况代码流程如下：<br><br>&emsp;&emsp;1.首先设定一个大小为k-1的字典（出现次数超过N/K的元素，最多只可能有k-1个）;<br><br>&emsp;&emsp;2.遍历数组，检测当前元素是否在字典里，<br><br>&emsp;&emsp;&emsp;&emsp;1.如果在字典里，字典里对应key的value值加一; <br><br>&emsp;&emsp;&emsp;&emsp;2.如果不在字典里:<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;字典未满时，以当前遍历到的数组元素为key，value设为1;<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如果字典已满，那么将字典中所有key对应的value值都减去1（即从数组中删除了K个不同的元素）;<br><br>&emsp;&emsp;3.每遍历一个元素，删除字典中value值小于1的元素。<br><br>最后在字典里的元素就包括所求元素，我们做最后的检查就行了。<br>上面两种情况所求的的数据，我们都要最终校验数据是不是真的出现了符合要求的次数。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_nk_item</span><span class="hljs-params">(arr, k)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""求数组中出现次数超过N/K的元素</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Arguments:</span></span><br><span class="line"><span class="hljs-string">        arr &#123;list&#125; -- 数组</span></span><br><span class="line"><span class="hljs-string">        k &#123;int&#125; -- 分母</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Returns:</span></span><br><span class="line"><span class="hljs-string">        tuple -- 所求元素</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> len(arr) &lt; k:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    buf_dict = &#123;&#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr)):</span><br><span class="line">        <span class="hljs-keyword">if</span> arr[i] <span class="hljs-keyword">in</span> buf_dict:</span><br><span class="line">            buf_dict[arr[i]] += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> len(buf_dict) &lt; k - <span class="hljs-number">1</span>:</span><br><span class="line">                buf_dict[arr[i]] = <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> buf_dict:</span><br><span class="line">                    buf_dict[item] -= <span class="hljs-number">1</span></span><br><span class="line">        remove_invalid(buf_dict)</span><br><span class="line"></span><br><span class="line">    check_valid(arr, k, buf_dict)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> tuple(buf_dict.keys())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_invalid</span><span class="hljs-params">(buf_dict)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""删除buf_dict中value值小于1的元素"""</span></span><br><span class="line"></span><br><span class="line">    buf_remove = []</span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> buf_dict:</span><br><span class="line">        <span class="hljs-keyword">if</span> buf_dict[item] &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            buf_remove.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> buf_remove:</span><br><span class="line">        buf_dict.pop(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_valid</span><span class="hljs-params">(arr, k, buf_dict)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""检测所求的元素是否满足次数要求"""</span></span><br><span class="line"></span><br><span class="line">    buf_remove = []</span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> buf_dict:</span><br><span class="line">        <span class="hljs-keyword">if</span> arr.count(item) &lt;= len(arr) // k:</span><br><span class="line">            buf_remove.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> buf_remove:</span><br><span class="line">        buf_dict.pop(item)</span><br></pre></td></tr></table></figure><hr><h3 id="题40：最小的k个数"><a href="#题40：最小的k个数" class="headerlink" title="题40：最小的k个数"></a>题40：最小的k个数</h3><blockquote><p>输入n个整数，找出其中个最小的k个数。例如，输入4、5、1、6、2、7、3、8这八个数，则最小的4个数字是1、2、3、4.</p></blockquote><p><strong>解法：</strong> <br><br>1.借用partition函数<br></p><blockquote><p>如题39，我们可以借用partition函数在O(n)的时间复杂度内找到排序数组中索引为k的元素，然后输出前k个元素就行了，<strong>注意：此时输出的前k个元素是无序的。</strong></p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetLeastNumbers_Solution</span><span class="hljs-params">(self, tinput, k)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> tinput <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> k <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> k &gt; len(tinput) <span class="hljs-keyword">or</span> k &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line">        <span class="hljs-keyword">if</span> k == len(tinput):</span><br><span class="line">            <span class="hljs-keyword">return</span> tinput</span><br><span class="line"></span><br><span class="line">        l, r = <span class="hljs-number">0</span>, len(tinput) - <span class="hljs-number">1</span></span><br><span class="line">        m_left, m_right = self.partition(tinput, l, r)</span><br><span class="line">        <span class="hljs-keyword">while</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> range(m_left, m_right+<span class="hljs-number">1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> k &lt; m_left:</span><br><span class="line">                r = m_left - <span class="hljs-number">1</span></span><br><span class="line">                m_left, m_right = self.partition(tinput, l, r)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                l = m_right + <span class="hljs-number">1</span></span><br><span class="line">                m_left, m_right = self.partition(tinput, l, r)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> tinput[:k]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(self, arr, l, r)</span>:</span></span><br><span class="line">        self.swap(arr, random.randint(l, r), r)</span><br><span class="line">        start = l - <span class="hljs-number">1</span></span><br><span class="line">        end = r</span><br><span class="line">        <span class="hljs-keyword">while</span> l &lt; end:</span><br><span class="line">            <span class="hljs-keyword">if</span> arr[l] &lt; arr[r]:</span><br><span class="line">                start += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">if</span> l != start:</span><br><span class="line">                    self.swap(arr, l, start)</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> arr[l] == arr[r]:</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                end -= <span class="hljs-number">1</span></span><br><span class="line">                self.swap(arr, l, end)</span><br><span class="line">        self.swap(arr, end, r)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> start+<span class="hljs-number">1</span>, end</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, arr, i, j)</span>:</span></span><br><span class="line">        arr[i], arr[j] = arr[j], arr[i]</span><br></pre></td></tr></table></figure><p>2.借用堆的概念<br></p><blockquote><p>使用partition函数我们会破坏原有数组，如果不破坏原有数组就得复制一个新数组，如果数组很长，那么无疑partition的解法就有了缺点；<br><br>使用堆我们就能很好的处理大数据的问题：<br><br>1.首先我们利用数组前k个元素建立一个大小为k的最大堆；<br><br>2.然后从数组第k+1个元素开始, <br><br>&emsp;&emsp;如果当前元素小于堆顶，那么将堆顶弹出，然后将当前元素加入堆，并再次调节好堆, 继续遍历过程；<br><br>&emsp;&emsp;如果当前元素大于堆顶，那么继续遍历；<br></p></blockquote><p><strong>在方法二的代码实现中，我利用了python自带模块<code>heapq</code>.</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetLeastNumbers_Solution</span><span class="hljs-params">(self, tinput, k)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> tinput <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> k <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> k &gt; len(tinput) <span class="hljs-keyword">or</span> k &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(k):</span><br><span class="line">            res.append(-tinput[i])</span><br><span class="line">        heapq.heapify(res)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(k, len(tinput)):</span><br><span class="line">            <span class="hljs-keyword">if</span> tinput[i] &lt; -res[<span class="hljs-number">0</span>]:</span><br><span class="line">                res[<span class="hljs-number">0</span>] = -tinput[i]</span><br><span class="line">                heapq.heapify(res)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> sorted(list(map(<span class="hljs-keyword">lambda</span> x: -x, res)))</span><br></pre></td></tr></table></figure><hr><h3 id="题41：数据流中的中位数"><a href="#题41：数据流中的中位数" class="headerlink" title="题41：数据流中的中位数"></a>题41：数据流中的中位数</h3><blockquote><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数组排序之后位于中间的值。如果从数据流中读出偶数个个数值，那么中位数就是所有数组排序之后中间两个数的平均值。</p></blockquote><p><strong>解法：</strong> <br><br>要求中位数随时可以求得，那么构建一个最大堆，一个最小堆，并且保持最大堆与最小堆中元素个数差值不超过2.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.min_heap = list([])</span><br><span class="line">        self.max_heap = list([])</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Insert</span><span class="hljs-params">(self, num)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.min_heap <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.max_heap:</span><br><span class="line">            heapq.heappush(self.min_heap, num)</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        <span class="hljs-keyword">if</span> num &gt; self.min_heap[<span class="hljs-number">0</span>]:</span><br><span class="line">            heapq.heappush(self.min_heap, num)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            heapq.heappush(self.max_heap, -num)</span><br><span class="line">        <span class="hljs-keyword">if</span> abs(len(self.min_heap) - len(self.max_heap)) &gt; <span class="hljs-number">1</span>:</span><br><span class="line">            self.balance()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">balance</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        pop_heap, push_heap = (self.min_heap, self.max_heap) <span class="hljs-keyword">if</span> len(</span><br><span class="line">            self.min_heap) &gt; len(self.max_heap) <span class="hljs-keyword">else</span> (self.max_heap, self.min_heap)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> len(pop_heap) - len(push_heap) &gt; <span class="hljs-number">1</span>:</span><br><span class="line">            heapq.heappush(push_heap, -heapq.heappop(pop_heap))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetMedian</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(self.max_heap) == len(self.min_heap):</span><br><span class="line">            <span class="hljs-keyword">return</span> (-self.max_heap[<span class="hljs-number">0</span>] + self.min_heap[<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> -self.max_heap[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> len(self.max_heap) &gt; len(self.min_heap) <span class="hljs-keyword">else</span> self.min_heap[<span class="hljs-number">0</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="题42：连续子数组的最大和"><a href="#题42：连续子数组的最大和" class="headerlink" title="题42：连续子数组的最大和"></a>题42：连续子数组的最大和</h3><blockquote><p>输入一个整型数组，数组里有正数也有负数。数组中一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n).</p></blockquote><p><strong>解法：</strong> <br><br>1.普通方法，遍历数组求解最大和：<br><br> 在遍历数组过程中，我们设定一个变量cur_sum用来统计当前和，设定一个变量max_sum用来保存当前已经遍历过的元素组成的数组里的最大子数组和。 在每一步遍历中，我们都比较cur_sum和我们记录的max_sum, 将较大的那个值设定为新的max_sum：<br><br>如果cur_sum当前值为正，那么cur_sum加上当前遍历元素可能比cur_sum要更大，此时cur_sum 就加上当前遍历元素；<br><br>如果cur_sum当前值为负，那么cur_sum机上当前遍历元素一定要比当前遍历到的元素小，那么明显的这个cur_sum不可能是最大的子数组和，此时将cur_sum设置为当前遍历到的元素，开启一个新的子数组和的计算。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindGreatestSumOfSubArray</span><span class="hljs-params">(self, array)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> array <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(array) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> sum(array)</span><br><span class="line"></span><br><span class="line">        max_sum = min(array)</span><br><span class="line">        cur_sum = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> array:</span><br><span class="line">            <span class="hljs-keyword">if</span> cur_sum &lt; <span class="hljs-number">0</span>:</span><br><span class="line">                cur_sum = item</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                cur_sum += item</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> cur_sum &gt; max_sum:</span><br><span class="line">                max_sum = cur_sum</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> max_sum</span><br></pre></td></tr></table></figure><p>2.使用动态规划：<br></p><blockquote><p>状态方程： <br><br>233333，这题用动态规划好简单。。<br><br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f(n) = f(n-1) + arr[n] if f(n-1) &gt; 0 &lt;br&gt;</span><br><span class="line">f(n) = arr[n] if f(n-1) &lt;= 0</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindGreatestSumOfSubArray</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> sum(arr)</span><br><span class="line"></span><br><span class="line">        res = [arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(len(arr))]</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(arr)):</span><br><span class="line">            <span class="hljs-keyword">if</span> res[i<span class="hljs-number">-1</span>] &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">                res[i] = arr[i]</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                res[i] = res[i<span class="hljs-number">-1</span>] + arr[i]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> max(res)</span><br></pre></td></tr></table></figure><hr><h3 id="题43：1-n整数中1出现的次数"><a href="#题43：1-n整数中1出现的次数" class="headerlink" title="题43：1~n整数中1出现的次数"></a>题43：1~n整数中1出现的次数</h3><blockquote><p>输入一个整数n，求1~n这n个数整数的十进制表示中1出现的次数。例如，输入12，1~12这些证书中包含1的数字有1、10、11和12，1一共出现了5次。</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/occurrencesOf1.jpeg" alt="1-n中1出现的次数"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetOccurTimesOfOne</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""计算1-n中所有数字中1出现的次数"""</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_occur_time_of_one</span><span class="hljs-params">(self, num)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> num &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        length = self.get_num_length(num)</span><br><span class="line">        first = int(str(num)[<span class="hljs-number">0</span>])</span><br><span class="line">        <span class="hljs-comment"># 第一位</span></span><br><span class="line">        <span class="hljs-keyword">if</span> first == <span class="hljs-number">1</span>:</span><br><span class="line">            first_sum = num % self.base_10(length<span class="hljs-number">-1</span>) + <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> first != <span class="hljs-number">1</span>:</span><br><span class="line">            first_sum = self.base_10(length - <span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-comment"># 其他位</span></span><br><span class="line">        other_num = self.base_10(length - <span class="hljs-number">2</span>) * (length - <span class="hljs-number">1</span>) * first</span><br><span class="line">        next_num = self.get_occur_time_of_one(num % self.base_10(length<span class="hljs-number">-1</span>))</span><br><span class="line">        <span class="hljs-keyword">return</span> first_sum + other_num + next_num</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base_10</span><span class="hljs-params">(self, length)</span>:</span></span><br><span class="line">        num = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> length &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            num *= <span class="hljs-number">10</span></span><br><span class="line">            length -= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_num_length</span><span class="hljs-params">(self, num)</span>:</span></span><br><span class="line">        length = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> num != <span class="hljs-number">0</span>:</span><br><span class="line">            length += <span class="hljs-number">1</span></span><br><span class="line">            num = num // <span class="hljs-number">10</span></span><br><span class="line">        <span class="hljs-keyword">return</span> length</span><br></pre></td></tr></table></figure><hr><h3 id="题44：-数字序列中某一位的数字"><a href="#题44：-数字序列中某一位的数字" class="headerlink" title="题44： 数字序列中某一位的数字"></a>题44： 数字序列中某一位的数字</h3><blockquote><p>数字以 0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从0开始计数）是5，第13位是1， 第19位是4，等等。倾斜一个函数，求任意第n位对应的数字。</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/nth_int_in_sequence.jpeg" alt="解法"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_nth_num_of_sequence</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> n &lt; <span class="hljs-number">0</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> n</span><br><span class="line">    <span class="hljs-comment"># 判断第n位的数组是几位数组以及对应位数数组在序列中开始的位置</span></span><br><span class="line">    full_length, start = get_length_and_delta(n)</span><br><span class="line">    <span class="hljs-comment"># n位为几位数的第几个数的第几位</span></span><br><span class="line">    nth, delta = (n - start) // full_length, (n - start) % full_length</span><br><span class="line">    num = base_10(full_length - <span class="hljs-number">1</span>) + nth</span><br><span class="line">    <span class="hljs-keyword">return</span> int(str(num)[delta])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_nth_of_num</span><span class="hljs-params">(num, i)</span>:</span></span><br><span class="line">    num = list(str(num))</span><br><span class="line">    <span class="hljs-keyword">return</span> int(num[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base_10</span><span class="hljs-params">(length)</span>:</span></span><br><span class="line">    num = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> length &gt; <span class="hljs-number">0</span>:</span><br><span class="line">        num *= <span class="hljs-number">10</span></span><br><span class="line">        length -= <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_length_and_delta</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    start = i = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> start &lt;= n:</span><br><span class="line">        more = <span class="hljs-number">9</span> * (<span class="hljs-number">10</span> ** (i - <span class="hljs-number">1</span>)) * i</span><br><span class="line">        start += more</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> i - <span class="hljs-number">1</span>, start - more</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    n = int(sys.argv[<span class="hljs-number">1</span>])</span><br><span class="line">    print(get_nth_num_of_sequence(n))</span><br></pre></td></tr></table></figure><hr><h3 id="题45：把数组排成最小的数"><a href="#题45：把数组排成最小的数" class="headerlink" title="题45：把数组排成最小的数"></a>题45：把数组排成最小的数</h3><blockquote><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如，输入数组{3， 32， 321}， 则打印出这三个数字能排成的最小数字321323.</p></blockquote><p><strong>解法：</strong> <br></p><ol><li>剑指offer上的解法定义自定义比较器很贪心，自己用了另外一种解法，更清楚明了。<br><img src="/assets/blog_images/arrange_list_to_min_value.jpeg" alt="arrange list to min value"></li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">PrintMinNumber</span><span class="hljs-params">(self, numbers)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> numbers <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(numbers) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        temp_dict = &#123;key: str(value) <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> enumerate(numbers)&#125;</span><br><span class="line">        longest = self.get_longest(temp_dict.values())</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(temp_dict)):</span><br><span class="line">            <span class="hljs-keyword">while</span> len(temp_dict[i]) &lt; longest:</span><br><span class="line">                temp_dict[i] = temp_dict[i] + temp_dict[i][<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> sorted(temp_dict.items(), key=<span class="hljs-keyword">lambda</span> item: item[<span class="hljs-number">1</span>]):</span><br><span class="line">            res.append(numbers[item[<span class="hljs-number">0</span>]])</span><br><span class="line">        <span class="hljs-keyword">return</span> int(<span class="hljs-string">''</span>.join(map(str, res)))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_longest</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        longest = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> arr:</span><br><span class="line">            <span class="hljs-keyword">if</span> len(item) &gt; longest:</span><br><span class="line">                longest = len(item)</span><br><span class="line">        <span class="hljs-keyword">return</span> longest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">321</span>]</span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.PrintMinNumber(nums))</span><br></pre></td></tr></table></figure><hr><h3 id="题46：把数字翻译成字符串"><a href="#题46：把数字翻译成字符串" class="headerlink" title="题46：把数字翻译成字符串"></a>题46：把数字翻译成字符串</h3><blockquote><p>给定一个数字，我们按照如下规则把它翻译成字符串：0翻译成’a’, 1翻译成‘b’， ……， 11翻译成‘I’， ……， 25翻译成‘z’。一个数字可能有多个翻译。例如，12258有5种不同的翻译，分别是’bccfi’、‘bwfi’、‘bczi’、‘mcfi’和’mzi’。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/convert_int_to_str.jpeg" alt="convert int to str"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 暴力递归版本</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_int_to_str_recur</span><span class="hljs-params">(self, num)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        num = str(num)</span><br><span class="line">        <span class="hljs-keyword">return</span> self.process(num, <span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process</span><span class="hljs-params">(self, num, index)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> index &gt;= len(num) - <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        p1 = self.process(num, index+<span class="hljs-number">1</span>)</span><br><span class="line">        p2 = self.process(num, index+<span class="hljs-number">2</span>) <span class="hljs-keyword">if</span> int(num[index:index+<span class="hljs-number">2</span>]) &lt;= <span class="hljs-number">25</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> p1 + p2</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 动态规划版本</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_int_to_str</span><span class="hljs-params">(self, num)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        num = str(num)</span><br><span class="line">        res = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(num))]</span><br><span class="line">        res [<span class="hljs-number">-1</span>], res[<span class="hljs-number">-2</span>] = <span class="hljs-number">1</span>, <span class="hljs-number">2</span> <span class="hljs-keyword">if</span> int(num[<span class="hljs-number">-2</span>:]) &lt;= <span class="hljs-number">25</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(num)<span class="hljs-number">-3</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            res[i] = res[i+<span class="hljs-number">1</span>]</span><br><span class="line">            <span class="hljs-keyword">if</span> int(num[i:i+<span class="hljs-number">2</span>]) &lt;= <span class="hljs-number">25</span>:</span><br><span class="line">                res[i] += res[i+<span class="hljs-number">2</span>]</span><br><span class="line">        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    num = <span class="hljs-number">12226</span></span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.convert_int_to_str(num))</span><br></pre></td></tr></table></figure><hr><h3 id="题47：礼物的最大价值"><a href="#题47：礼物的最大价值" class="headerlink" title="题47：礼物的最大价值"></a>题47：礼物的最大价值</h3><blockquote><p>在一个mxn的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于0）。你可以从棋盘左下角开始拿格子里的礼物，并且每次向右或者向下移动一格，直到到达棋盘的右下角。给定一个棋盘以及上面的礼物，请计算能达到的最大价值数。</p></blockquote><p><img src="/assets/blog_images/max_value_of_presents.jpeg" alt="max value of presents"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_value_of_presents_recur</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(arr) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> len(arr[<span class="hljs-number">0</span>]) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        row_l = len(arr)</span><br><span class="line">        col_l = len(arr[<span class="hljs-number">0</span>])</span><br><span class="line">        <span class="hljs-keyword">return</span> self.process(arr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, row_l<span class="hljs-number">-1</span>, col_l<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process</span><span class="hljs-params">(self, arr, i, j, row_l, col_l)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> i == row_l <span class="hljs-keyword">and</span> j == col_l:</span><br><span class="line">            <span class="hljs-keyword">return</span> arr[i][j]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> i == row_l:</span><br><span class="line">            res = arr[i][j] + self.process(arr, i, j+<span class="hljs-number">1</span>, row_l, col_l)</span><br><span class="line">        <span class="hljs-keyword">elif</span> j == col_l:</span><br><span class="line">            res = arr[i][j] + self.process(arr, i+<span class="hljs-number">1</span>, j, row_l, col_l)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            res = arr[i][j] + max(self.process(arr, i, j+<span class="hljs-number">1</span>, row_l, col_l),</span><br><span class="line">                                  self.process(arr, i+<span class="hljs-number">1</span>, j, row_l, col_l))</span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 动态规划版本</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_value_of_presents</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(arr) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> len(arr[<span class="hljs-number">0</span>]) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        row_l = len(arr)</span><br><span class="line">        col_l = len(arr[<span class="hljs-number">0</span>])</span><br><span class="line">        res = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr[<span class="hljs-number">0</span>]))] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr))]</span><br><span class="line">        res[row_l<span class="hljs-number">-1</span>][col_l<span class="hljs-number">-1</span>] = arr[row_l<span class="hljs-number">-1</span>][col_l<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">        i = row_l - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(col_l<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            res[i][j] = arr[i][j] + res[i][j+<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">        j = col_l - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(row_l<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            res[i][j] = arr[i][j] + res[i+<span class="hljs-number">1</span>][j]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(row_l<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(col_l<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">                res[i][j] = arr[i][j] + max(res[i+<span class="hljs-number">1</span>][j], res[i][j+<span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    arr = [[<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>],</span><br><span class="line">           [<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>],</span><br><span class="line">           [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>],</span><br><span class="line">           [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>],</span><br><span class="line">           ]</span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.max_value_of_presents(arr))</span><br></pre></td></tr></table></figure><hr><h3 id="题48：最长不含重复字符的子字符串"><a href="#题48：最长不含重复字符的子字符串" class="headerlink" title="题48：最长不含重复字符的子字符串"></a>题48：最长不含重复字符的子字符串</h3><blockquote><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长字符串的长度。假设字符串中只包含‘a’-‘z’的字符。例如，在字符串“arabcacfr”中，最长的不含重复字符的字符串是“acfr”，长度为4.</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/max_length_of_undup_str.jpeg" alt="max length of undup str"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_max_length_of_undup_str</span><span class="hljs-params">(self, string)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> string <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(string) &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> int(string) <span class="hljs-keyword">if</span> string <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        res = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(string))]</span><br><span class="line">        index_arr = [<span class="hljs-number">-1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">52</span>)]</span><br><span class="line">        res[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span></span><br><span class="line">        index_arr[self.get_index(<span class="hljs-number">0</span>, string)] = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(string)):</span><br><span class="line">            char_index = self.get_index(i, string)</span><br><span class="line">            delta = i - index_arr[char_index]</span><br><span class="line">            <span class="hljs-keyword">if</span> index_arr[char_index] == <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> delta &gt; res[i<span class="hljs-number">-1</span>]:</span><br><span class="line">                res[i] = res[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                res[i] = delta</span><br><span class="line">            <span class="hljs-comment"># 更新当前字符的最新索引</span></span><br><span class="line">            index_arr[char_index] = i</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res[<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_index</span><span class="hljs-params">(self, index, string)</span>:</span></span><br><span class="line">        temp = ord(string[index])</span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-number">65</span> &lt;= temp &lt;= <span class="hljs-number">90</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> temp - ord(<span class="hljs-string">'A'</span>)</span><br><span class="line">        <span class="hljs-keyword">elif</span> <span class="hljs-number">97</span> &lt;= temp &lt;= <span class="hljs-number">122</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> temp - ord(<span class="hljs-string">'a'</span>) + <span class="hljs-number">26</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">'not a valid char!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    string = <span class="hljs-string">'arabcacfr'</span> <span class="hljs-comment"># answer is 4</span></span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.get_max_length_of_undup_str(string))</span><br></pre></td></tr></table></figure><h2 id="时间效率与空间效率的平衡"><a href="#时间效率与空间效率的平衡" class="headerlink" title="时间效率与空间效率的平衡"></a>时间效率与空间效率的平衡</h2><p>鱼与熊掌兼得</p><hr><h3 id="题49：-丑数"><a href="#题49：-丑数" class="headerlink" title="题49： 丑数"></a>题49： 丑数</h3><blockquote><p>我们把只包含因子2、3和5的数称为丑数（Ugly Number）。求从小到大的书序的第1500个丑数。例如6、8都是丑数，但14不是，因为它包含因子7.习惯上我们把1当做第一个丑数。</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/ugly_number.jpeg" alt="ugly number"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetUglyNumber_Solution</span><span class="hljs-params">(self, index)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">assert</span> isinstance(index, numbers.Integral)</span><br><span class="line">        <span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        ugly = [<span class="hljs-number">1</span>]</span><br><span class="line">        <span class="hljs-keyword">while</span> len(ugly) &lt;= index:</span><br><span class="line">            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ugly:</span><br><span class="line">                <span class="hljs-keyword">if</span> item * <span class="hljs-number">2</span> &gt; ugly[<span class="hljs-number">-1</span>]:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">            p1 = item * <span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ugly:</span><br><span class="line">                <span class="hljs-keyword">if</span> item * <span class="hljs-number">3</span> &gt; ugly[<span class="hljs-number">-1</span>]:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">            p2 = item * <span class="hljs-number">3</span></span><br><span class="line">            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ugly:</span><br><span class="line">                <span class="hljs-keyword">if</span> item * <span class="hljs-number">5</span> &gt; ugly[<span class="hljs-number">-1</span>]:</span><br><span class="line">                    <span class="hljs-keyword">break</span></span><br><span class="line">            p3 = item * <span class="hljs-number">5</span></span><br><span class="line">            ugly.append(min(p1, p2, p3))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> ugly[<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    n = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]</span><br><span class="line">    ex = Solution()</span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> n:</span><br><span class="line">        print(ex.GetUglyNumber_Solution(item))</span><br></pre></td></tr></table></figure><hr><h3 id="题50：第一个只出现一次的字符"><a href="#题50：第一个只出现一次的字符" class="headerlink" title="题50：第一个只出现一次的字符"></a>题50：第一个只出现一次的字符</h3><blockquote><p>在字符串中找出第一个只出现一次的字符。如输入“abaccdeff”, 则输出‘b’</p></blockquote><p><strong>解法：</strong> <br></p><ol><li>耍流氓式解法：利用Python标准库Counter计数器。<br>Counter计算器会根据字符在字符串中出现的先后顺序返回字符在字符串中出现的次数，我们只要找到Counter中第一个value值为1的key就好了。</li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FirstNotRepeatingChar</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(s) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">        counter = Counter(s)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="hljs-keyword">if</span> counter[s[i]] == <span class="hljs-number">1</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> i</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br></pre></td></tr></table></figure><hr><h3 id="题51：-数组中的逆序对"><a href="#题51：-数组中的逆序对" class="headerlink" title="题51： 数组中的逆序对"></a>题51： 数组中的逆序对</h3><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/Inversed_pairs.jpeg" alt="Inverse Pairs"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">InversePairs_recur</span><span class="hljs-params">(self, data)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(data) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.merge(data, <span class="hljs-number">0</span>, len(data)<span class="hljs-number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(self, data, left, right)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> left == right:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        middle = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">        left_pairs = self.merge(data, left, middle)</span><br><span class="line">        right_pairs = self.merge(data, middle+<span class="hljs-number">1</span>, right)</span><br><span class="line">        merge_pairs = self.process(data, left, right, middle)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> left_pairs + right_pairs + merge_pairs</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process</span><span class="hljs-params">(self, data, left, right, middle)</span>:</span></span><br><span class="line">        l, r = left, middle+<span class="hljs-number">1</span></span><br><span class="line">        pairs = <span class="hljs-number">0</span></span><br><span class="line">        cur = left</span><br><span class="line">        temp_arr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(data))]</span><br><span class="line">        <span class="hljs-keyword">while</span> l &lt;= middle <span class="hljs-keyword">and</span> r &lt;= right:</span><br><span class="line">            <span class="hljs-comment"># 如果左边数组元素l大于右边数组元素r，则有逆序对middle - l + 1</span></span><br><span class="line">            <span class="hljs-keyword">if</span> data[l] &gt; data[r]:</span><br><span class="line">                temp_arr[cur] = data[r]</span><br><span class="line">                r += <span class="hljs-number">1</span></span><br><span class="line">                cur += <span class="hljs-number">1</span></span><br><span class="line">                pairs += middle - l + <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                temp_arr[cur] = data[l]</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">                cur += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> l &lt;= middle:</span><br><span class="line">            temp_arr[cur] = data[l]</span><br><span class="line">            cur += <span class="hljs-number">1</span></span><br><span class="line">            l += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> r &lt;= right:</span><br><span class="line">            temp_arr[cur] = data[r]</span><br><span class="line">            r += <span class="hljs-number">1</span></span><br><span class="line">            cur += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(left, right+<span class="hljs-number">1</span>):</span><br><span class="line">            data[i] = temp_arr[i]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> pairs</span><br></pre></td></tr></table></figure><p><strong>牛客网提示这个算法超时，我开始以为写的有问题，还改成了非递归归并，后来仔细想了想，不管是递归归并还是非递归归并时间复杂度都是O(nlogn)，所以应该是牛客的问题，后来果然发现，随便直接输出一个值也会提示超时。。。呵呵哒。。</strong></p><hr><h3 id="题52：两个链表的第一个公共节点"><a href="#题52：两个链表的第一个公共节点" class="headerlink" title="题52：两个链表的第一个公共节点"></a>题52：两个链表的第一个公共节点</h3><blockquote><p>输入两个链表，找出他们的第一个公共节点。链表节点定义如下：<br><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span>  m_nkey;</span><br><span class="line">ListNode* m_pNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/common_node_of_LinkedLists.jpeg" alt="common node of linkedlists"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindFirstCommonNode</span><span class="hljs-params">(self, pHead1, pHead2)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> pHead1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> pHead2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        loop1 = self.check_loop(pHead1)</span><br><span class="line">        loop2 = self.check_loop(pHead2)</span><br><span class="line">        <span class="hljs-comment"># 都有环</span></span><br><span class="line">        <span class="hljs-keyword">if</span> loop1 <span class="hljs-keyword">and</span> loop2:</span><br><span class="line">            p = loop1</span><br><span class="line">            <span class="hljs-keyword">while</span> p.next != loop1:</span><br><span class="line">                <span class="hljs-keyword">if</span> p == loop2:</span><br><span class="line">                    <span class="hljs-keyword">return</span> loop1</span><br><span class="line">                p = p.next</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-comment"># 都无环</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> (<span class="hljs-keyword">not</span> loop1) <span class="hljs-keyword">and</span> (<span class="hljs-keyword">not</span> loop2):</span><br><span class="line">            p1, p2 = pHead1, pHead2</span><br><span class="line">            <span class="hljs-keyword">while</span> p1 != p2:</span><br><span class="line">                p1 = pHead1 <span class="hljs-keyword">if</span> p1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">else</span> p1.next</span><br><span class="line">                p2 = pHead2 <span class="hljs-keyword">if</span> p2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">else</span> p2.next</span><br><span class="line">            <span class="hljs-keyword">return</span> p1</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @staticmethod</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_loop</span><span class="hljs-params">(pHead)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> pHead.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        buf_dict = &#123;&#125;</span><br><span class="line">        p = pHead</span><br><span class="line">        <span class="hljs-keyword">while</span> p <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> p <span class="hljs-keyword">in</span> buf_dict:</span><br><span class="line">                <span class="hljs-keyword">return</span> p</span><br><span class="line">            buf_dict[pHead] = <span class="hljs-number">0</span></span><br><span class="line">            p = p.next</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer39-52题解
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
    
      <category term="剑指offer" scheme="https://todebug.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 第六章 题53-66题解 Python版</title>
    <link href="https://todebug.com/2018/08/25/offer53-66/"/>
    <id>https://todebug.com/2018/08/25/offer53-66/</id>
    <published>2018-08-24T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:48.102Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bryceyang/python_to_the_offer" target="_blank" rel="noopener">Github</a></p><a id="more"></a><h2 id="知识迁移能力"><a href="#知识迁移能力" class="headerlink" title="知识迁移能力"></a>知识迁移能力</h2><p>举一反三：能力是培养的，加油吧。</p><hr><h3 id="题53：在排序数组中查找数字"><a href="#题53：在排序数组中查找数字" class="headerlink" title="题53：在排序数组中查找数字"></a>题53：在排序数组中查找数字</h3><h4 id="题目一：数字在排序数组中出现的次数"><a href="#题目一：数字在排序数组中出现的次数" class="headerlink" title="题目一：数字在排序数组中出现的次数"></a>题目一：数字在排序数组中出现的次数</h4><blockquote><p>统计一个数字在排序数组中出现的次数。例如，输入排序数组{1，2，3，3，3，3，4，5}和数字3，由于3在这个数组中出现了4次，因此输出4.</p></blockquote><h4 id="题目二：0-n-1中缺失的数字"><a href="#题目二：0-n-1中缺失的数字" class="headerlink" title="题目二：0~n-1中缺失的数字"></a>题目二：0~n-1中缺失的数字</h4><blockquote><p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0~n-1之内。在范围0~n-1之内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p></blockquote><h4 id="题目三：数组中数值和下标相等的元素"><a href="#题目三：数组中数值和下标相等的元素" class="headerlink" title="题目三：数组中数值和下标相等的元素"></a>题目三：数组中数值和下标相等的元素</h4><blockquote><p>假设一个单调递增的数组里的每个元素都是整数并且是唯一的。请编程实现一个函数，找出数组中任意一个数值等于其下标的元素。例如，在数组{-3， -1， 1， 3， 5}中，数字3和它的下标相等。</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/binary_find_item_in_arr.jpeg" alt="binary find item in arr part1"><br><img src="/assets/blog_images/binary_find_item_in_arr_part2.jpeg" alt="binary find item in arr part2"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetNumberOfK</span><span class="hljs-params">(self, data, k)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""计算排序数组中数字出现的次数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            data &#123;list&#125; -- 数组</span></span><br><span class="line"><span class="hljs-string">            k &#123;int&#125; -- 待寻找数字</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            int -- 找到返回个数，找不到返回0</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> k <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(data) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> k &lt; data[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> k &gt; data[<span class="hljs-number">-1</span>]:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        first = self.get_occur_location(data, k, <span class="hljs-keyword">True</span>)</span><br><span class="line">        last = self.get_occur_location(data, k, <span class="hljs-keyword">False</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> first == last <span class="hljs-keyword">and</span> first == <span class="hljs-number">-1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> last - first + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_occur_location</span><span class="hljs-params">(self, data, k, first)</span>:</span></span><br><span class="line">        right = len(data) - <span class="hljs-number">1</span></span><br><span class="line">        left = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">if</span> data[middle] == k:</span><br><span class="line">                <span class="hljs-keyword">if</span> first:</span><br><span class="line">                    <span class="hljs-keyword">if</span> middle - <span class="hljs-number">1</span> &gt; <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> data[middle<span class="hljs-number">-1</span>] == k:</span><br><span class="line">                        right = middle - <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">else</span>:</span><br><span class="line">                        <span class="hljs-keyword">return</span> middle</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">if</span> middle + <span class="hljs-number">1</span> &lt; len(data) <span class="hljs-keyword">and</span> data[middle+<span class="hljs-number">1</span>] == k:</span><br><span class="line">                        left = middle + <span class="hljs-number">1</span></span><br><span class="line">                    <span class="hljs-keyword">else</span>:</span><br><span class="line">                        <span class="hljs-keyword">return</span> middle</span><br><span class="line">            <span class="hljs-keyword">elif</span> data[middle] &gt; k:</span><br><span class="line">                right = middle - <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                left = middle + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_missing_number</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""找到长度为n-1的递增排序数组中不在0~n-1范围内的数字</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            arr &#123;list&#125; -- 长度为n-1的递增排序数组</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.binary_find_missing_number(arr)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_find_missing_number</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        left, right = <span class="hljs-number">0</span>, len(arr) - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">if</span> arr[middle] == middle:</span><br><span class="line">                left = middle + <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> middle == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> (middle - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[middle<span class="hljs-number">-1</span>] == middle<span class="hljs-number">-1</span>):</span><br><span class="line">                <span class="hljs-keyword">return</span> middle</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                right = middle - <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_index_equls_value_item</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""找到单调递增且不重复数组中数值和下标相等的元素</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            arr &#123;list&#125; -- 数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            int -- 找到返回下标，找不到返回1</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> self.binary_find_equls_item(arr)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_find_equls_item</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        left, right = <span class="hljs-number">0</span>, len(arr) - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = left + ((right - left) &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">if</span> arr[middle] == middle:</span><br><span class="line">                <span class="hljs-keyword">return</span> middle</span><br><span class="line">            <span class="hljs-keyword">elif</span> arr[middle] &lt; middle:</span><br><span class="line">                left = middle + <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                right = middle - <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]</span><br><span class="line">    nums2 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">    nums3 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</span><br><span class="line">    nums4 = [<span class="hljs-number">-3</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]</span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.GetNumberOfK(nums, <span class="hljs-number">3</span>))</span><br><span class="line">    print(ex.get_missing_number(nums2))</span><br><span class="line">    print(ex.get_missing_number(nums3))</span><br><span class="line">    print(ex.find_index_equls_value_item(nums4))</span><br></pre></td></tr></table></figure><hr><h3 id="题54：二叉搜索树的第K大节点"><a href="#题54：二叉搜索树的第K大节点" class="headerlink" title="题54：二叉搜索树的第K大节点"></a>题54：二叉搜索树的第K大节点</h3><p><strong>题目：</strong></p><blockquote><p>给定一颗二叉搜索树，请找出第k大的节点。</p></blockquote><p><strong>解法：</strong> <br><br>利用二叉搜索树的中序遍历为递增数组的特性，即可得结果。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 返回对应节点TreeNode</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">KthNode</span><span class="hljs-params">(self, pRoot, k)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> pRoot <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> k &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        cur = pRoot</span><br><span class="line">        res = <span class="hljs-number">-1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> cur:</span><br><span class="line">            most_right = cur.left</span><br><span class="line">            <span class="hljs-keyword">if</span> most_right:</span><br><span class="line">                <span class="hljs-keyword">while</span> most_right.right <span class="hljs-keyword">and</span> most_right.right != cur:</span><br><span class="line">                    most_right = most_right.right</span><br><span class="line"></span><br><span class="line">                <span class="hljs-comment"># 第一次遍历到cur节点</span></span><br><span class="line">                <span class="hljs-keyword">if</span> most_right.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                    most_right.right = cur</span><br><span class="line">                    cur = cur.left</span><br><span class="line">                    <span class="hljs-keyword">continue</span></span><br><span class="line">                <span class="hljs-comment"># 第二次遍历到cur节点</span></span><br><span class="line">                <span class="hljs-keyword">if</span> most_right.right == cur:</span><br><span class="line">                    most_right.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">            k -= <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:</span><br><span class="line">                <span class="hljs-comment"># 为了不破坏原二叉树结构，没有直接返回cur节点</span></span><br><span class="line">                res = cur</span><br><span class="line">            cur = cur.right</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">if</span> res == <span class="hljs-number">-1</span> <span class="hljs-keyword">else</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    root = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line">    root.left = TreeNode(<span class="hljs-number">3</span>)</span><br><span class="line">    root.right = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    root.left.left = TreeNode(<span class="hljs-number">2</span>)</span><br><span class="line">    root.left.right = TreeNode(<span class="hljs-number">4</span>)</span><br><span class="line">    root.right.left = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root.right.right = TreeNode(<span class="hljs-number">8</span>)</span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.KthNode(root, <span class="hljs-number">4</span>)) <span class="hljs-comment"># The answer is TreeNode(5)</span></span><br></pre></td></tr></table></figure><hr><h3 id="题55：-二叉树的深度"><a href="#题55：-二叉树的深度" class="headerlink" title="题55： 二叉树的深度"></a>题55： 二叉树的深度</h3><h4 id="题目一：-求二叉树的深度"><a href="#题目一：-求二叉树的深度" class="headerlink" title="题目一： 求二叉树的深度"></a>题目一： 求二叉树的深度</h4><blockquote><p>输入一课二叉树的根节点，求该树的深度。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">TreeDepth</span><span class="hljs-params">(self, pRoot)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> pRoot <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        depthl = self.TreeDepth(pRoot.left)</span><br><span class="line">        depthr = self.TreeDepth(pRoot.right)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> max(depthl, depthr) + <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><h4 id="题目二：-平衡二叉树"><a href="#题目二：-平衡二叉树" class="headerlink" title="题目二： 平衡二叉树"></a>题目二： 平衡二叉树</h4><blockquote><p>输入一课二叉树的根节点，判断该树是不是平衡二叉树。</p></blockquote><p><strong>解法：</strong> <br><br>这个题在我前面关于树形dp的帖子里。</p><hr><h3 id="题56：数组中数字出现的次数"><a href="#题56：数组中数字出现的次数" class="headerlink" title="题56：数组中数字出现的次数"></a>题56：数组中数字出现的次数</h3><h4 id="题目一：数组中只出现一次的两个数字"><a href="#题目一：数组中只出现一次的两个数字" class="headerlink" title="题目一：数组中只出现一次的两个数字"></a>题目一：数组中只出现一次的两个数字</h4><blockquote><p>一个整型数组里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n),空间复杂度是O(1).</p></blockquote><p><strong>解法：</strong> <br><br>空间复杂度O(1)意味着我们不能借用辅助数组。解法如下：<br><img src="/assets/blog_images/occurOneTimeItem.jpeg" alt="find two occur one time item"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 返回[a,b] 其中ab是出现一次的两个数字</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindNumsAppearOnce</span><span class="hljs-params">(self, array)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> array <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(array) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        res = self.get_xor(array)</span><br><span class="line"></span><br><span class="line">        flag = self.get_index(res)</span><br><span class="line">        help_arr1, help_arr2 = [], []</span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> array:</span><br><span class="line">            res = self.get_bit(item, flag)</span><br><span class="line">            <span class="hljs-keyword">if</span> res:</span><br><span class="line">                help_arr1.append(item)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                help_arr2.append(item)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> [self.get_xor(help_arr1), self.get_xor(help_arr2)]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_xor</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        res = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> arr:</span><br><span class="line">            res = res ^ item</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_index</span><span class="hljs-params">(self, res)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""得到异或结果其中一位为1的位置</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            res &#123;int&#125; -- 原数组异或结果</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line">        period = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> period &lt; <span class="hljs-number">32</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> res &amp; <span class="hljs-number">1</span> == <span class="hljs-number">1</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> period</span><br><span class="line">            res = res &gt;&gt; <span class="hljs-number">1</span></span><br><span class="line">            period += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bit</span><span class="hljs-params">(self, num, index)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># 将给定index位置的bit移到最低位</span></span><br><span class="line">        <span class="hljs-keyword">while</span> index &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            num = num &gt;&gt; <span class="hljs-number">1</span></span><br><span class="line">            index -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> num &amp; <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    ex = Solution()</span><br><span class="line">    nums = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]</span><br><span class="line">    print(ex.FindNumsAppearOnce(nums)) <span class="hljs-comment"># The answer is [6, 4].</span></span><br></pre></td></tr></table></figure><h4 id="题目二：数组中唯一只出现一次的数字。"><a href="#题目二：数组中唯一只出现一次的数字。" class="headerlink" title="题目二：数组中唯一只出现一次的数字。"></a>题目二：数组中唯一只出现一次的数字。</h4><blockquote><p>在一个数组中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现了一次的数字。</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/onlyOccur1TimeItem.jpeg" alt="find occur 1 time item"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_item</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> len(arr) % <span class="hljs-number">3</span> != <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        temp = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>)]</span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> arr:</span><br><span class="line">            bit_mark = <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">31</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line"><span class="hljs-comment"># 使用bit_mark每次左移结果去与可以防止溢出</span></span><br><span class="line">                bit = item &amp; bit_mark</span><br><span class="line">                <span class="hljs-keyword">if</span> bit != <span class="hljs-number">0</span>:</span><br><span class="line">                    temp[i] += <span class="hljs-number">1</span></span><br><span class="line">                bit_mark = bit_mark &lt;&lt; <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        res = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-comment"># 注意生成数时候的顺序</span></span><br><span class="line">        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> temp:</span><br><span class="line">            res = res &lt;&lt; <span class="hljs-number">1</span></span><br><span class="line">            res += _ % <span class="hljs-number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    ex = Solution()</span><br><span class="line">    arr = [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]</span><br><span class="line">    print(ex.find_item(arr))</span><br></pre></td></tr></table></figure><hr><h3 id="题57：和为s的数字"><a href="#题57：和为s的数字" class="headerlink" title="题57：和为s的数字"></a>题57：和为s的数字</h3><h4 id="题目一：和为s的两个数字"><a href="#题目一：和为s的两个数字" class="headerlink" title="题目一：和为s的两个数字"></a>题目一：和为s的两个数字</h4><blockquote><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p></blockquote><p><strong>解法：</strong> <br><br>因为数组是递增的，那就好办了，首尾相加求和，然后往里推进。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">two_sum</span><span class="hljs-params">(arr, g_sum)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">    start, end = <span class="hljs-number">0</span>, len(arr) <span class="hljs-number">-1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> start &lt; end:</span><br><span class="line">        <span class="hljs-keyword">if</span> arr[start] + arr[end] == g_sum:</span><br><span class="line">            <span class="hljs-keyword">return</span> arr[start], arr[end]</span><br><span class="line">        <span class="hljs-keyword">elif</span> arr[start] + arr[end] &lt; g_sum:</span><br><span class="line">            start += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            end -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>]</span><br><span class="line">    g_sum = <span class="hljs-number">15</span></span><br><span class="line">    print(two_sum(arr, g_sum))</span><br></pre></td></tr></table></figure><h4 id="题目二：和为s的连续正数序列"><a href="#题目二：和为s的连续正数序列" class="headerlink" title="题目二：和为s的连续正数序列"></a>题目二：和为s的连续正数序列</h4><blockquote><p>输入一个正数s，打印出所有和为s的连续正数序列（至少含有两个数）。例如，输入15，由于1+2+3+4+5=4+5+6=7+8=15，所以打印出3个连续序列1~5，4~6和7~8.</p></blockquote><p><strong>解法：</strong> <br><br>类比题目一，构建初始区间，然后检测条件，根据条件更改区间。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sequence</span><span class="hljs-params">(g_sum)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> g_sum &lt; <span class="hljs-number">3</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">    small, big = <span class="hljs-number">1</span>, <span class="hljs-number">2</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="hljs-keyword">while</span> small &lt;= g_sum // <span class="hljs-number">2</span>:</span><br><span class="line">        cur_sum = sum(range(small, big+<span class="hljs-number">1</span>))</span><br><span class="line">        <span class="hljs-keyword">if</span> cur_sum == g_sum:</span><br><span class="line">            res.append((small, big))</span><br><span class="line">            big += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> cur_sum &lt; g_sum:</span><br><span class="line">            big += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            small += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    print(get_sequence(<span class="hljs-number">15</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="题58：翻转字符串"><a href="#题58：翻转字符串" class="headerlink" title="题58：翻转字符串"></a>题58：翻转字符串</h3><h4 id="题目一：翻转单词顺序"><a href="#题目一：翻转单词顺序" class="headerlink" title="题目一：翻转单词顺序"></a>题目一：翻转单词顺序</h4><blockquote><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序保持不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串“I am a student.”,则输出“student. a am I”.</p></blockquote><p><strong>解法：</strong> <br><br>这个题用Python写也跟作弊似的。但是有正经解法的，正经解法是先把字符串整个翻转，然后再以空格为区分，翻转字符串里的每一个单词。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ReverseSentence</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(s) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line">        <span class="hljs-comment"># 排除只含有空格的字符串</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s.strip() == <span class="hljs-string">''</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        s = s.split()</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">' '</span>.join(s[::<span class="hljs-number">-1</span>])</span><br></pre></td></tr></table></figure><h4 id="题目二：左旋转字符串"><a href="#题目二：左旋转字符串" class="headerlink" title="题目二：左旋转字符串"></a>题目二：左旋转字符串</h4><blockquote><p>字符串的左旋转操作是字符串前面的若干个字符转移到字符串尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefgt” 和数字2，该函数将返回左旋转两位得到的结果“cdefgab”<br>”</p></blockquote><p><strong>解法：</strong> <br><br>这个用Python切片可以作弊式完成。但建议非Python语言使用者还是用正经解法把：<br><br>1.首先用给定数字把字符分成两部分，第一部分为待左移字符串，第二部分为原剩余字符串;<br><br>2.再分别翻转这两个部分；<br><br>3.将这两个部分合并起来，然后再翻转合并后的字符串。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LeftRotateString</span><span class="hljs-params">(self, s, n)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> s <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(s) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        n = n % len(s)</span><br><span class="line">        pre, post = s[:n], s[n:]</span><br><span class="line">        <span class="hljs-keyword">return</span> post + pre</span><br></pre></td></tr></table></figure><hr><h3 id="题59：队列的最大值"><a href="#题59：队列的最大值" class="headerlink" title="题59：队列的最大值"></a>题59：队列的最大值</h3><h4 id="题目一：滑动窗口的最大值"><a href="#题目一：滑动窗口的最大值" class="headerlink" title="题目一：滑动窗口的最大值"></a>题目一：滑动窗口的最大值</h4><blockquote><p>给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。例如，如果输入数组{2，3，4，2，6，2，5，1}及滑动窗口的大小3，那么一共存在6个滑动窗口，它们的最大值分别为{4，4，6，6，6，5}.</p></blockquote><p><strong>解法：</strong> <br><br><img src="/assets/blog_images/max_in_window.jpeg" alt="max in window"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxInWindows</span><span class="hljs-params">(self, num, size)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> size <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line">        <span class="hljs-keyword">if</span> size &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> size &gt; len(num):</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        helper = deque()</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(size):</span><br><span class="line">            self.expand(num, i, helper)</span><br><span class="line">        res.append(num[helper[<span class="hljs-number">0</span>]])</span><br><span class="line"></span><br><span class="line">        l = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(size, len(num)):</span><br><span class="line">            self.expand(num, i, helper)</span><br><span class="line">            l += <span class="hljs-number">1</span></span><br><span class="line">            self.shrink(num, l, helper)</span><br><span class="line">            res.append(num[helper[<span class="hljs-number">0</span>]])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">expand</span><span class="hljs-params">(self, num, index, helper)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> helper:</span><br><span class="line">            helper.append(index)</span><br><span class="line">        <span class="hljs-keyword">elif</span> num[index] &lt; helper[<span class="hljs-number">-1</span>]:</span><br><span class="line">            helper.append(index)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">while</span> helper <span class="hljs-keyword">and</span> num[index] &gt;= num[helper[<span class="hljs-number">-1</span>]]:</span><br><span class="line">                helper.pop()</span><br><span class="line">            helper.append(index)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shrink</span><span class="hljs-params">(self, num, l, helper)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">while</span> helper <span class="hljs-keyword">and</span> helper[<span class="hljs-number">0</span>] &lt; l:</span><br><span class="line">            helper.popleft()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    ex = Solution()</span><br><span class="line">    num = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]</span><br><span class="line">    print(ex.maxInWindows(num, <span class="hljs-number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="题目二：队列的最大值"><a href="#题目二：队列的最大值" class="headerlink" title="题目二：队列的最大值"></a>题目二：队列的最大值</h4><blockquote><p>请定义一个队列并实现max得到队列里的最大值，要求函数<code>max</code>，<code>push_back</code> 和<code>pop_front</code>的时间复杂度都是O(1)。</p></blockquote><p><strong>解法：</strong> <br><br>借用上题的思想，给队列建立一个影子队列用来存放最大值，当队列添加一个元素的时候，影子队列执行<code>expand</code>操作，当队列<code>pop_front</code>的时候，影子队列执行一次<code>shrink</code>操作。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WithMaxQueue</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""能O(1)时间复杂度返回队列最大值的队列实现：</span></span><br><span class="line"><span class="hljs-string">    实现了pop_front以及push_back方法</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""初始化，self.__l, self.__r两个参数很重要</span></span><br><span class="line"><span class="hljs-string">        params:</span></span><br><span class="line"><span class="hljs-string">        self.__queue:  存储数据的队列</span></span><br><span class="line"><span class="hljs-string">        self.__shadow: 存储数据队列中最大值的队列</span></span><br><span class="line"><span class="hljs-string">        self.__l:      等价于滑动窗口左边界，表示当前队列头部是第几个添加进来的元素</span></span><br><span class="line"><span class="hljs-string">        self.__r:      等价于滑动窗口右边界，表示当前队列尾部是第几个添加进来的元素</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        self.__queue = deque()</span><br><span class="line">        self.__shadow = deque()</span><br><span class="line">        self.__l, self.__r = <span class="hljs-number">0</span>, <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push_back</span><span class="hljs-params">(self, item)</span>:</span></span><br><span class="line">        self.__queue.append(item)</span><br><span class="line">        self.expand(item)</span><br><span class="line">        self.__r += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop_front</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.__queue:</span><br><span class="line">            self.__queue.popleft()</span><br><span class="line">            self.__l += <span class="hljs-number">1</span></span><br><span class="line">            self.shrink()</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">"pop from emtpy queue"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">expand</span><span class="hljs-params">(self, item)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""滑动窗口的扩大过程：即当有新元素时，对最大值队列的调整</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.__shadow:</span><br><span class="line">            self.__shadow.append((self.__r, item))</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> item &lt; self.__shadow[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>]:</span><br><span class="line">                self.__shadow.append((self.__r, item))</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">while</span> self.__shadow <span class="hljs-keyword">and</span> item &gt;= self.__shadow[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>]:</span><br><span class="line">                    self.__shadow.pop()</span><br><span class="line">                self.__shadow.append((self.__r, item))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shrink</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""滑动窗口的缩小过程（窗口左边界右移）即：当弹出元素时，对最大值队列的调整</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> self.__shadow <span class="hljs-keyword">and</span> self.__l &gt; self.__shadow[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]:</span><br><span class="line">            self.__shadow.popleft()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_max</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.__shadow[<span class="hljs-number">0</span>][<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    ex = WithMaxQueue()</span><br><span class="line">    num = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]</span><br><span class="line">    <span class="hljs-comment"># The anster is 4, 4, 6, 6, 6, 5</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):</span><br><span class="line">        ex.push_back(num[i])</span><br><span class="line">    print(ex.get_max())</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>, len(num)):</span><br><span class="line">        ex.push_back(num[i])</span><br><span class="line">        ex.pop_front()</span><br><span class="line">        print(ex.get_max())</span><br></pre></td></tr></table></figure><hr><h2 id="抽象建模能力"><a href="#抽象建模能力" class="headerlink" title="抽象建模能力"></a>抽象建模能力</h2><p>建模两步走：</p><ol><li>选择合理的数据结构来表述问题；</li><li>分析模型中的内在规律，并用编程语言表述这种规律。</li></ol><hr><h3 id="题60：n个骰子的点数"><a href="#题60：n个骰子的点数" class="headerlink" title="题60：n个骰子的点数"></a>题60：n个骰子的点数</h3><blockquote><p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能值出现的概率。</p></blockquote><p><strong>解法：</strong><br><img src="/assets/blog_images/dice_numbers.jpg" alt="probability of dice numbers"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> numbers</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""求n个骰子扔在地上，所有骰子正面向上点数和s的各种情况及其出现概率</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, dice=<span class="hljs-number">6</span>)</span>:</span></span><br><span class="line">        self.dice_numbers = dice</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sum_recur</span><span class="hljs-params">(self, n)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""递归求解版本</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            n &#123;int&#125; -- 骰子个数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            list -- 包含元素为（s, probability）, s为和，probability为s出现概率。</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">assert</span> isinstance(n, numbers.Integral)</span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line">        res_arr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range((self.dice_numbers - <span class="hljs-number">1</span>) * n + <span class="hljs-number">1</span>)]</span><br><span class="line">        self.recur_process(n, res_arr)</span><br><span class="line"></span><br><span class="line">        total = self.dice_numbers ** n</span><br><span class="line">        res_arr = [(i + n, res_arr[i] / total) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(res_arr))]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res_arr</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recur_process</span><span class="hljs-params">(self, n, res_arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, self.dice_numbers + <span class="hljs-number">1</span>):</span><br><span class="line">            self.process(n, n, i, res_arr)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process</span><span class="hljs-params">(self, n, remain, cur_sum, res_arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> remain == <span class="hljs-number">1</span>:</span><br><span class="line">            res_arr[cur_sum - n] += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, self.dice_numbers+<span class="hljs-number">1</span>):</span><br><span class="line">                self.process(n, remain<span class="hljs-number">-1</span>, cur_sum+i, res_arr)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sum</span><span class="hljs-params">(self, n)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""非递归求解版本</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">assert</span> isinstance(n, numbers.Integral)</span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)]</span><br><span class="line"></span><br><span class="line">        p1 = [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span></span><br><span class="line">        p1[<span class="hljs-number">0</span>] = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.dice_numbers*n+<span class="hljs-number">2</span>)]</span><br><span class="line">        p1[<span class="hljs-number">1</span>] = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.dice_numbers*n+<span class="hljs-number">2</span>)]</span><br><span class="line">        <span class="hljs-comment"># flag用来每次循环时，复用上轮循环的结果</span></span><br><span class="line">        flag = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, self.dice_numbers+<span class="hljs-number">1</span>):</span><br><span class="line">            p1[flag][i] = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i):</span><br><span class="line">                <span class="hljs-comment"># 和不可能小于i</span></span><br><span class="line">                p1[<span class="hljs-number">1</span>-flag][j] = <span class="hljs-number">0</span></span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, self.dice_numbers*i+<span class="hljs-number">1</span>):</span><br><span class="line">                p1[<span class="hljs-number">1</span>-flag][j] = <span class="hljs-number">0</span></span><br><span class="line">                k = <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">while</span> k &lt;= self.dice_numbers <span class="hljs-keyword">and</span> k &lt; j:</span><br><span class="line">                    p1[<span class="hljs-number">1</span>-flag][j] += p1[flag][j-k]</span><br><span class="line">                    k += <span class="hljs-number">1</span></span><br><span class="line">            flag = <span class="hljs-number">1</span> - flag</span><br><span class="line"></span><br><span class="line">        total = self.dice_numbers ** n</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n, self.dice_numbers*n+<span class="hljs-number">1</span>):</span><br><span class="line">            res.append((i, p1[flag][i]/total))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    n = <span class="hljs-number">10</span></span><br><span class="line">    print(<span class="hljs-string">'&#123;&#125;个骰子的情况下：'</span>.format(n))</span><br><span class="line">    ex = Solution()</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="hljs-string">"递归求解结果：\n&#123;&#125;"</span>.format(ex.get_sum_recur(n)))</span><br><span class="line">    first_period = time.time() - start</span><br><span class="line"></span><br><span class="line">    print(<span class="hljs-string">"非递归求解结果：\n&#123;&#125;"</span>.format(ex.get_sum(n)))</span><br><span class="line">    second_period = time.time() - start - first_period</span><br><span class="line"></span><br><span class="line">    print(<span class="hljs-string">"递归用时：&#123;&#125;, 非递归用时：&#123;&#125; \n递归用时是非递归用时的 &#123;&#125; 倍。"</span>.format(</span><br><span class="line">        first_period, second_period, first_period/second_period))</span><br></pre></td></tr></table></figure><p>当n=10的时候，就已经能看见巨大差距了：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">递归用时：24.436681985855103, 非递归用时：0.0007491111755371094</span><br><span class="line">递归用时是非递归用时的 32620.90165499682 倍。</span><br></pre></td></tr></table></figure><h3 id="题61：扑克牌中的顺子"><a href="#题61：扑克牌中的顺子" class="headerlink" title="题61：扑克牌中的顺子"></a>题61：扑克牌中的顺子</h3><blockquote><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这五张牌是不是连续的。2~10为数字本身，A为1， J为11， Q为12，K为13，而大小王可以看成任意数字。</p></blockquote><p><strong>解法：</strong><br>这类题就是看看代码能力了。<br><br>有两点需要注意：<br><br>1.数组中不能出现除了0之外的重复数字;<br>2.连续的非零数字之间的正常间距为1</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">IsContinuous</span><span class="hljs-params">(self, numbers)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> numbers <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(numbers) != <span class="hljs-number">5</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        numbers.sort()</span><br><span class="line">        length = len(numbers)</span><br><span class="line"></span><br><span class="line">        times = numbers.count(<span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length<span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> numbers[i] == <span class="hljs-number">0</span>:</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            delta = numbers[i+<span class="hljs-number">1</span>] - numbers[i]</span><br><span class="line">            <span class="hljs-keyword">if</span> delta == <span class="hljs-number">0</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> delta - <span class="hljs-number">1</span> &lt;= times:</span><br><span class="line">                times -= delta - <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    nums = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>]</span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.IsContinuous(nums))</span><br></pre></td></tr></table></figure><h3 id="题62：圆圈中最后剩下的数字"><a href="#题62：圆圈中最后剩下的数字" class="headerlink" title="题62：圆圈中最后剩下的数字"></a>题62：圆圈中最后剩下的数字</h3><blockquote><p>0,1,…, n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里出去第m个数字，求这个圆圈里剩下的最后一个数字。</p></blockquote><p><strong>解法：</strong><br><img src="/assets/blog_images/lastReaming_part1.jpg" alt="last remaing part1"><br><img src="/assets/blog_images/lastRemaing_part2.jpg" alt="last remaing part2"><br><img src="/assets/blog_images/lastRemaing_part3.jpg" alt="last remaing part3"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LastRemaining_Solution_1</span><span class="hljs-params">(self, n, m)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""利用辅助数组解法</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            n &#123;int&#125; -- 人数</span></span><br><span class="line"><span class="hljs-string">            m &#123;int&#125; -- 删除第m个元素</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            int -- 最后剩余人代号</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m &lt; <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">        arr = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n)]</span><br><span class="line">        cur = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> len(arr) != <span class="hljs-number">1</span>:</span><br><span class="line">            period = m - <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">while</span> period:</span><br><span class="line">                cur = self.next_index(arr, cur)</span><br><span class="line">                period -= <span class="hljs-number">1</span></span><br><span class="line">            arr.pop(cur)</span><br><span class="line">            <span class="hljs-keyword">if</span> cur &gt;= len(arr):</span><br><span class="line">                cur = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> arr[<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next_index</span><span class="hljs-params">(self, arr, cur)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> cur &gt;= len(arr) - <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> cur + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LastRemaining_Solution_2</span><span class="hljs-params">(self, n, m)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""f(n, m) = (f(n - 1, m) + m) % n</span></span><br><span class="line"><span class="hljs-string">        如果不做映射，f(n-1, m)结果相当于f(n, m)淘汰第一个人之后的下一步，但调整了剩余的n-1</span></span><br><span class="line"><span class="hljs-string">        人的代号之后，我们需要确定的映射关系，能把调整之后的代号转换到初始包含n个人的情况下的代号</span></span><br><span class="line"><span class="hljs-string">        这样返回的结果也是和最初数据对应的。</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">        last = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):</span><br><span class="line">            last = (last + m) % i</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> last</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    ex = Solution()</span><br><span class="line">    n, m = <span class="hljs-number">5</span>, <span class="hljs-number">3</span></span><br><span class="line">    print(ex.LastRemaining_Solution_2(n, m))</span><br></pre></td></tr></table></figure><h3 id="题63：股票的最大利润"><a href="#题63：股票的最大利润" class="headerlink" title="题63：股票的最大利润"></a>题63：股票的最大利润</h3><blockquote><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？例如，一只股票在某些时间节点的价格为{9， 11， 8，5，7， 12， 16， 14}。如果我们能在价格为5的时候买入并在价格为16时卖出，则能收获最大利润11.</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_max_profit</span><span class="hljs-params">(arr)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    min_price = arr[<span class="hljs-number">0</span>]</span><br><span class="line">    max_profit = arr[<span class="hljs-number">1</span>] - min_price</span><br><span class="line">    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> arr[<span class="hljs-number">2</span>:]:</span><br><span class="line">        <span class="hljs-keyword">if</span> item &lt; min_price:</span><br><span class="line">            min_price = item</span><br><span class="line">        max_profit = max(max_profit, item - min_price)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> max_profit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    num = [<span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">14</span>]</span><br><span class="line">    print(get_max_profit(num))  <span class="hljs-comment"># The anster is 11</span></span><br></pre></td></tr></table></figure><h2 id="发散思维能力："><a href="#发散思维能力：" class="headerlink" title="发散思维能力："></a>发散思维能力：</h2><p>积累越多，发散能力自然越强，加油！</p><h3 id="题64：求1-2-…-n"><a href="#题64：求1-2-…-n" class="headerlink" title="题64：求1+2+…+n"></a>题64：求1+2+…+n</h3><blockquote><p>求1+2+…+n，要求不能用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）</p></blockquote><p><strong>解法：</strong> <br><br>短路求值：<br><br>对于Python来说: <code>a and b if a return b else return a</code></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Sum_Solution</span><span class="hljs-params">(self, n)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        ans = n</span><br><span class="line">        emp = n <span class="hljs-keyword">and</span> self.Sum_Solution(n<span class="hljs-number">-1</span>)</span><br><span class="line">        ans += temp</span><br><span class="line">        <span class="hljs-keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="题65：不用加减乘除做加法"><a href="#题65：不用加减乘除做加法" class="headerlink" title="题65：不用加减乘除做加法"></a>题65：不用加减乘除做加法</h3><blockquote><p>写一个函数，求两个整数之和，要求函数体内不得使用“+”、“_”、“*”、“/”四则运算符号</p></blockquote><p><strong>解法：</strong><br>Python中的位操作和其他语言是有些许不同的。。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Add</span><span class="hljs-params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">while</span>(b &amp; <span class="hljs-number">0xFFFFFFFF</span> &gt; <span class="hljs-number">0</span>): <span class="hljs-comment"># 防止b溢出32位范围</span></span><br><span class="line">            a, b = (a ^ b), ((a &amp; b) &lt;&lt; <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-comment"># 判断a是否溢出</span></span><br><span class="line">        <span class="hljs-keyword">if</span> abs(a) &gt;= <span class="hljs-number">0xFFFFFFFF</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> a &amp; <span class="hljs-number">0xFFFFFFFF</span></span><br><span class="line">        <span class="hljs-keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="题66：构建乘积数组"><a href="#题66：构建乘积数组" class="headerlink" title="题66：构建乘积数组"></a>题66：构建乘积数组</h3><blockquote><p>给定一个数组A[0,1, … n-1], 请构建一个数组B[0,1,…,n-1],其中B中的元素B[i] = A[0]xA[1]x…xA[i-1]xA[i+1]x..xA[n-1]。不能使用除法。</p></blockquote><p><strong>解法：</strong> <br><br>这个题如果自己解，就只有用笨办法了，但剑指offer提供的这种解法未免太6了，分成两部分，同时代码实现也很巧妙，Python版如下，请飨。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_multi_list</span><span class="hljs-params">(arr)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></span><br><span class="line">    <span class="hljs-keyword">if</span> len(arr) == <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    length = len(arr)</span><br><span class="line">    res = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr))]</span><br><span class="line"></span><br><span class="line">    res[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length):</span><br><span class="line">        res[i] = res[i<span class="hljs-number">-1</span>]*arr[i<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">    temp = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(length<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">        temp *= arr[j+<span class="hljs-number">1</span>]</span><br><span class="line">        res[j] *= temp</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    num = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]</span><br><span class="line">    print(get_multi_list(num))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer53-66题解
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
    
      <category term="剑指offer" scheme="https://todebug.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://todebug.com/2018/08/23/how-the-heck-does-async-and-await-work-in-python3.5/"/>
    <id>https://todebug.com/2018/08/23/how-the-heck-does-async-and-await-work-in-python3.5/</id>
    <published>2018-08-22T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:47.936Z</updated>
    
    <content type="html"><![CDATA[<p><strong>To be continued.</strong></p><p><strong><a href="https://snarky.ca/how-the-heck-does-async-await-work-in-python-3-5/" target="_blank" rel="noopener">原文链接</a></strong></p><a id="more"></a><h2 id="async-await在Python3-5中到底是怎么工作的？"><a href="#async-await在Python3-5中到底是怎么工作的？" class="headerlink" title="async/await在Python3.5中到底是怎么工作的？"></a>async/await在Python3.5中到底是怎么工作的？</h2><p>作为一个Python的核心开发者，我会想要去了解这种语言通常是怎么工作的。我意识到总会有那些我不知道所有细节的模糊角落出现，但是为了有助于解决问题以及Python的z总体设计，我感觉我应该尝试着理解它的核心语义以及这些东西在底层到底是如何工作的？</p><p>但是直到最近，我还是不理解<code>async/await</code>在<code>Python3.5</code>中是怎么工作的。我知道在<code>Python3.3</code>中的<code>yield from</code>和<code>Python3.4</code>中的<code>asyncio</code>一起引出了这种新语法。但是由于网络相关的工作我做的不多–虽然<code>asyncio</code>不是局限于网络工作，但它的确是专注于此–这就让我没有对<code>async/await</code>投入太多关注。我的意思是我知道：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> iterator</span><br></pre></td></tr></table></figure><p>是（实际上）等效于：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> iterator:</span><br><span class="line">    <span class="hljs-keyword">yield</span> x</span><br></pre></td></tr></table></figure><p>我还知道<code>asyncio</code>是一个能够用来异步编程的事件循环框架，以及这些名词本身是什么意思。但是我从来没有深入到<code>async/await</code>语法中，去了解这些都是怎么结合到一起的。我觉得我并不了解<code>Python</code>中的异步编程，这让我有些苦恼。所以我决定慢慢来，去尝试弄明白这些东西到底是怎么工作的。并且我还从不同的人那里听到过他们也不太了解这个新的异步编程是怎么怎样的，所以我决定写这篇短文。（是的，这篇post用了太长时间，也写得太长了以至于我的妻子把它标记为essay）。</p><p>现在，因为我想正确理解这种语法是如何工作，所以本文有一些关于<code>CPython</code>是如何工作的底层技术细节。如果细节比你需要的多，或者由于我不想把这篇文章编程一本书而没有介绍<code>CPython</code>内部每一个细微差别导致你并不完全理解这些细节，这都是可以的。（举个例子，如果你不明白<code>code</code>对象有<code>flags</code>，更不用提连<code>code</code>对象都不知道，那你就不需要关心从这篇文章得到的相关<code>code</code>对象的东西。）我试着在每一个版块的尾部提供了一个很便于访问的总结，所以如果你发现你并不想了解那么多细节的话，你可以跳过它们，直接看总结。</p><h3 id="协程在Python中的历史"><a href="#协程在Python中的历史" class="headerlink" title="协程在Python中的历史"></a>协程在Python中的历史</h3><p>根据<a href="https://www.wikipedia.org/" title="Wikipedia" target="_blank" rel="noopener">Wikipedia</a>，<a href="https://en.wikipedia.org/wiki/Coroutine" title="协程" target="_blank" rel="noopener">协程</a>是和子例程类似的面向非抢占式多任务的计算机程序组件，它允许多个进入点在一定位置暂停或继续执行。这是一种相当学术的说法，“协程是可以暂停执行的函数”。 如果你对自己解释说，“这听起来像生成器”，你就是对的。</p><p>在<code>Python2.2</code>中， 生成器（也被叫做生成迭代器，因为生成器实现了迭代器协议）是由<a href="https://www.python.org/dev/peps/pep-0255/" title="PEP 255" target="_blank" rel="noopener">PEP 255</a>第一次引进的。主要受到<a href="http://www2.cs.arizona.edu/icon/" title="Icon programming language" target="_blank" rel="noopener">Icon programming language</a>的影响，生成器允许一种非常简单的，在计算下一个值时不浪费内存的创建迭代器的方法（你也可以实现一个实现了<code>__iter__()</code>和<code>__next__()</code>方法并且不保存迭代器每一个值的类，但这很费力气。）举个例子，如果你想创建你自己的<code>range()</code>函数，你可以通过创建一个整型列表来完成：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eager_range</span><span class="hljs-params">(up_to)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""创建一个整型列表，从0到up_to, 不包括up_to"""</span></span><br><span class="line">    sequence = []</span><br><span class="line">    index = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> index &lt; up_to:</span><br><span class="line">        sequence.append(index)</span><br><span class="line">        index += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> sequence</span><br></pre></td></tr></table></figure><p>这种实现的问题是，如果你需要一个很长的序列，比如从<code>0</code>到<code>1000000</code>，那么你需要创建一个足够长的能容纳<code>100000</code>个整数的列表。但是当生成器被引入<code>Python</code>之后，你就能够轻松的创建一个不需要提前生成整个序列的迭代器。实际上，你需要的只是一次有一个整型的内存就行了。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lazy_range</span><span class="hljs-params">(up_to)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""返回0到up_to, 不包括上界的整型序列"""</span></span><br><span class="line">    index = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> index &lt; up_to:</span><br><span class="line">        <span class="hljs-keyword">yield</span> index</span><br><span class="line">        index += <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>不管函数在做什么，当它遇到一个yield表达式它就会暂停执行————虽然<code>yield</code>这个语句直到Python 2.5才出现————然后能够在接下来继续执行，这种特性对于减少内存使用以及生成无穷序列等等都是非常有用的。</p><p>但是你可能也已经发现了，生成器就是迭代器的样子。既然现在有一种更棒的构建迭代器的方法明显是更好地（这表现在当你在一个生成器对象上定义一个<strong>iter</strong>()方法的时候），但是人们知道如果我们把生成器中“暂停”的部分去掉，然后添加一种“把东西传入”的方法，Python就猛然有了协程的概念（除非我在其他地方说明了，要不然你把这些就当做Python里的概念；我们会稍后讨论Python中真正的协程）。然后生成器中能传递东西的方法是在Python 2.5引入的，感谢<a href="https://www.python.org/dev/peps/pep-0342/" title="PEP 342" target="_blank" rel="noopener">PEP 342</a>。除此之外，<a href="https://www.python.org/dev/peps/pep-0342/" title="PEP 342" target="_blank" rel="noopener">PEP 342</a>给生成器引入了<code>send()</code>方法。这不仅允许我们暂停生成器， 还允许我们把值传回到生成器暂停的地方。继续深入我们的<code>range()</code>例子，实现序列可以前跳或者后跳一定量：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jumping_range</span><span class="hljs-params">(up_to)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Generator for the sequence of integers from 0 to up_to, exclusive.</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    sending a value into the generator will shift the sequence by that amount.</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    index = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> index &lt; up_to:</span><br><span class="line">        jump = <span class="hljs-keyword">yield</span> index</span><br><span class="line">        <span class="hljs-keyword">if</span> jump <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            jump = <span class="hljs-number">1</span></span><br><span class="line">        index += jump</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    iterator = jumping_range(<span class="hljs-number">5</span>)</span><br><span class="line">    print(next(iterator))</span><br><span class="line">    print(iterator.send(<span class="hljs-number">2</span>))</span><br><span class="line">    print(next(iterator))</span><br><span class="line">    print(iterator.send(<span class="hljs-number">-1</span>))</span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> iterator:</span><br><span class="line">        print(x)</span><br></pre></td></tr></table></figure><p>直到Python3.3，当<a href="https://www.python.org/dev/peps/pep-0380/" title="PEP 380" target="_blank" rel="noopener">PEP 380</a>添加<code>yield from</code> 的时候生成器定义才再次被修改。严格的说，这个特性使得从迭代器(刚巧生成器也是迭代器）产出值变得更简单了，从而允许你以一种简单的方式重构生成器。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lazy_range</span><span class="hljs-params">(up_to)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""Generator to return the sequence of integers from 0 to up_to, exclusive."""</span></span><br><span class="line">    index = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gratuitous_refactor</span><span class="hljs-params">()</span>:</span></span><br><span class="line">        <span class="hljs-keyword">nonlocal</span> index</span><br><span class="line">        <span class="hljs-keyword">while</span> index &lt; up_to:</span><br><span class="line">            <span class="hljs-keyword">yield</span> index</span><br><span class="line">            index += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> gratuitous_refactor()</span><br></pre></td></tr></table></figure><p>除了重构更容易了之外，<code>yield from</code>还能够让你将生成器链到一起，这样无需代码做任何特殊的事情, 值就可以在调用栈中上下浮动。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bottom</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-comment"># Returning the yield lets the value that goes up the call stack to come right back</span></span><br><span class="line">    <span class="hljs-comment"># down.</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">yield</span> <span class="hljs-number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">middle</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> bottom())</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> middle())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Get the generator.</span></span><br><span class="line">gen = top()</span><br><span class="line">value = next(gen)</span><br><span class="line">print(value)  <span class="hljs-comment"># Prints '42'.</span></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    value = gen.send(value * <span class="hljs-number">2</span>)</span><br><span class="line"><span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> exc:</span><br><span class="line">    value = exc.value</span><br><span class="line">print(value)  <span class="hljs-comment"># Prints '84'.</span></span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>在Python 2.2中，生成器可以暂停执行的代码。然后在Python 2.5中引进了回传值到暂停的生成器中的功能之后，协程的概念在Python中出现就变得有可能了。再然后Python 3.3中新加入的<code>yield from</code>让重构生成器以及链接生成器都变得简单了。</p><h3 id="事件循环是什么？"><a href="#事件循环是什么？" class="headerlink" title="事件循环是什么？"></a>事件循环是什么？</h3><p>如果你开始关注<code>async</code>/<code>await</code>，那么理解什么是时间循环以及它如何有利于异步编程就很重要了。如果你曾经做过GUI编程————包括网页前后端的工作————那么你就已经和时间循环打过交道了。但是鉴于在Python中异步编程是一种新的语言结构，所以如果你暂时不明白时间循环是什么也是可以的。</p><p>在Wikipedia的解释中， <a href="https://en.wikipedia.org/wiki/Event_loop" title="时间循环" target="_blank" rel="noopener">时间循环</a>“是一种编程结构，用来等待或者分发程序中的事件或者消息”。基本上，时间循环允许你执行，“当A发生时，执行B”，这种逻辑。解释这一点的最简单的例子可能是遍布于每个浏览器中JavaScript的时间循环。每当你单击某个内容（“当A发生时”），点击事件就被传递给JavaScript中的时间循环，它检查是否有<code>onclick</code>回调被注册用来处理这个点击事件（“do B”）。如果有任何回调被注册，那么附带着点击的细节，该回调就会被调用。事件循环之所以被认为是一个循环是因为它不断的收集事件并循环检测事件，以找到如何处理事件的方法。</p><p>在Python里，<code>asyncio</code>被添加到标准库中来提供事件循环。在使用<code>asyncio</code>进行网络编程的时候需要注意，在这种情况下，事件循环把“when A happens”当做是一个套接字的I/O已经准备好读或者写的时候（通过<code>selectors</code>模块）。除了GUI以及I/O，事件循环还通常作为调度器，用来执行另外一个线程或者子进程中的代码，比如<a href="https://en.wikipedia.org/wiki/Cooperative_multitasking" title="cooperative multitasking" target="_blank" rel="noopener">cooperative multiasking</a>。如果你恰好也了解Python的GIL，那么在释放GIL是可能和有用的情况下，事件循环是很有用的。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>事件循环提供了一种循环使得你可以做到，“当A发生时，执行B”。实际上，事件循环就是监测一些事件的发生，然后当事件发生了之后，就调用关注该事件发生的代码。在Python3.4中，标准库<code>asyncio</code>用于提供事件循环。</p><h3 id="async和await是怎样工作的？"><a href="#async和await是怎样工作的？" class="headerlink" title="async和await是怎样工作的？"></a><code>async</code>和<code>await</code>是怎样工作的？</h3><h4 id="在Python3-4中工作的方式"><a href="#在Python3-4中工作的方式" class="headerlink" title="在Python3.4中工作的方式"></a>在Python3.4中工作的方式</h4><p>在Python3.3中有了生成器以后到有了<code>asyncio</code>形式的事件循环之间，Python3.4用<a href="https://en.wikipedia.org/wiki/Concurrent_computing" title="并发编程" target="_blank" rel="noopener">并发编程</a>的形式就足以支持异步编程。异步编程其实就是我们提前不知道执行顺序的编程（这也是异步而不是同步的原因）。并发编程是我们编写执行时与其他部分独立的代码，即使这些代码是在一个线程中执行的（并发不是并行）。例如，下面是在两个异步并发函数调用中每秒倒计时的Python3.4代码:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Borrowed from http://curio.readthedocs.org/en/latest/tutorial.html.</span></span><br><span class="line"><span class="hljs-meta">@asyncio.coroutine</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countdown</span><span class="hljs-params">(number, n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:</span><br><span class="line">        print(<span class="hljs-string">'T-minus'</span>, n, <span class="hljs-string">'(&#123;&#125;)'</span>.format(number))</span><br><span class="line">        <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> asyncio.sleep(<span class="hljs-number">1</span>)</span><br><span class="line">        n -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(countdown(<span class="hljs-string">"A"</span>, <span class="hljs-number">2</span>)),</span><br><span class="line">    asyncio.ensure_future(countdown(<span class="hljs-string">"B"</span>, <span class="hljs-number">3</span>))]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>在Python3.4中， <code>asyncio.coroutine</code> 装饰器用于将函数标记为协程，用于<code>asyncio</code>它的事件循环。这为Python提供了它对协程的第一个具体定义：一个对象，它实现了添加到<a href="https://www.python.org/dev/peps/pep-0342/" title="PEP 342" target="_blank" rel="noopener">PEP 342</a>中的生成器的方法，并由<code>collections.abc.coroutine</code>抽象基类表示。这意味着，突然之间，所有的生成器都实现了协程接口，即使它们并不是被当做协程使用的。为了解决这个问题，<code>asyncio</code>要求将所有要用作协程的生成器都必须用<code>asyncio.coroutine</code>修饰。</p><p>有了这个协程的具体定义（与生成器提供的API相匹配），你就可以在任何[<code>aysncio.Future</code>对象][]上使用<code>yield from</code>，将这个对象传递到事件循环中，在等待事情发生的时候暂停其执行（<code>future</code>对象是<code>asyncio</code>的实现细节，并不重要）。一旦<code>future</code>对象到达了事件循环，它就会被监视, 直到<code>future</code>对象完成任何它需要完成的工作。一旦<code>future</code>完成了自己的工作，事件循环就会监测到，然后处于暂停状态的等待<code>future</code>结果的协程就会再次启动，它的结果也被send()方法传递到协程中。</p><p>接着分析上面的那个例子。事件循环启动每一个<code>countdown()</code>协程调用，一直执行到其中一个的<code>yield from</code>和<code>asyncio.sleep()</code>函数处。到这里会产生一个<code>asyncio.Future</code>对象，并被传递到事件循环中，然后暂停协程的执行。在事件循环中，事件循环监测这个<code>future</code>对象直到sleep的这一秒结束（同时也检查它正在监测的其他事物，比如其他的协程）。一旦这一秒结束了，事件循环找到那个提供<code>future</code>对象的处于暂停状态的协程，然后把<code>future</code>对象的结果发送到这个协程，然后协程继续运行。这个过程一直持续到所有的<code>countdown()</code>协程借宿运行，并且事件循环没有监测对象的时候。稍后，我会给你展示一个完整的协程或者事件循环这些东西工作的例子, 但是首先我想解释一下<code>async</code>和<code>await</code>是怎么工作的。</p><h4 id="Python3-5-从yield-from到await"><a href="#Python3-5-从yield-from到await" class="headerlink" title="Python3.5: 从yield from到await"></a>Python3.5: 从<code>yield from</code>到<code>await</code></h4><p>在Python3.4中，出于异步编程的目的把一个函数标记为协程的过程想下面这样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 在Python3.5中同样生效</span></span><br><span class="line"><span class="hljs-meta">@asyncio.coroutine</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">py34_coro</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> stuff()</span><br></pre></td></tr></table></figure><p>在Python3.5中，加入了<code>types.coroutine</code>装饰器和<code>asyncio.coroutine</code>一样用来标记一个生成器为协程。你还可以使用<code>async def</code>来语法上定义一个函数为协程，虽然它不能包含任何形式的<code>yield</code>表达式；只有<code>return</code>和<code>await</code>被允许从协程中返回一个值。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">py35_coro</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">await</span> stuff()</span><br></pre></td></tr></table></figure><p><code>async</code>和<code>types.coroutine</code>做的一个关键的事情就是缩减了协程的定义。它把协程从一个只是接口变成了一种确切的类型，把其他生成器和用来做协程的生成器之间的区别更严格了（<code>inspect.iscoroutine()</code>函数更严格了，它固定协程必须使用<code>async</code>）。</p><p>你可能还注意到了除了<code>async</code>，在Python3.5的例子中还引入了<code>await</code>表达式（只能在<code>async def</code>定义的函数中使用）。虽然<code>await</code>运行起来跟<code>yield from</code>很像，但是<code>await</code>表达式接收的对象确是不同的。协程可以在<code>await</code>表达式中使用，因为协程就是所有这些东西的基础。但是当你在一个对象上调用<code>await</code>时，这个对象技术上需要是一个<code>awaitable</code>对象：一个定义了<code>__await__()</code>方法并且返回一个迭代器，而不是返回协程本身的对象。协程被认为是<code>awaitable</code>对象（这也是为什么<code>collections.abc.Coroutine</code>继承自<code>collections.abc.Awaitable</code>）。这个定义遵循了Python底层上把大部分的语法定义都转换到一个方法调用上的传统，就像<code>a+b</code>在底层实际上是<code>a.__add__(b)</code>或者<code>b.__radd__(a)</code>。</p><p>那么在底层上<code>yield from</code>和<code>awati</code>有什么区别呢（也就是一个使用<code>types.coroutine</code>装饰器定义的生成器和一个用<code>async def</code>定义的生成器的区别）？让我们看一下上面的两个例子在Python3.5中的字节码，来了解一下本质区别。`py34_coro()的字节码是：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>dis.dis(py34_coro)</span><br><span class="line">  <span class="hljs-number">2</span>           <span class="hljs-number">0</span> LOAD_GLOBAL              <span class="hljs-number">0</span> (stuff)</span><br><span class="line">              <span class="hljs-number">3</span> CALL_FUNCTION            <span class="hljs-number">0</span> (<span class="hljs-number">0</span> positional, <span class="hljs-number">0</span> keyword pair)</span><br><span class="line">              <span class="hljs-number">6</span> GET_YIELD_FROM_ITER</span><br><span class="line">              <span class="hljs-number">7</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-keyword">None</span>)</span><br><span class="line">             <span class="hljs-number">10</span> YIELD_FROM</span><br><span class="line">             <span class="hljs-number">11</span> POP_TOP</span><br><span class="line">             <span class="hljs-number">12</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-keyword">None</span>)</span><br><span class="line">             <span class="hljs-number">15</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><p><code>py35_coro()</code>的字节码是：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&gt;&gt;&gt; </span>dis.dis(py35_coro)</span><br><span class="line">  <span class="hljs-number">1</span>           <span class="hljs-number">0</span> LOAD_GLOBAL              <span class="hljs-number">0</span> (stuff)</span><br><span class="line">              <span class="hljs-number">3</span> CALL_FUNCTION            <span class="hljs-number">0</span> (<span class="hljs-number">0</span> positional, <span class="hljs-number">0</span> keyword pair)</span><br><span class="line">              <span class="hljs-number">6</span> GET_AWAITABLE</span><br><span class="line">              <span class="hljs-number">7</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-keyword">None</span>)</span><br><span class="line">             <span class="hljs-number">10</span> YIELD_FROM</span><br><span class="line">             <span class="hljs-number">11</span> POP_TOP</span><br><span class="line">             <span class="hljs-number">12</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-keyword">None</span>)</span><br><span class="line">             <span class="hljs-number">15</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><p>忽略那行由于<code>py34_coro()</code>拥有<code>asyncio.coroutine</code>装饰器造成的区别，两者唯一肉眼可见的区别就是<code>GET_YIELD_FROM_ITER</code>字节码和<code>GET_AWAITABLE</code>字节码的不同。两个函数都被正确的标记成协程，所以并没有什么区别。在使用<code>GET_YIELD_FROM_ITER</code>的情况下，它只是简单的检查一下它的参数是不是一个生成器或者协程，如果不是，它就会对它的参数调用<code>iter()</code>方法（只有当<code>yield from</code>的字节码在协程里使用的时候，该字节码才能接受一个协程对象，在这个例子中是正确的需要感谢<code>types.coroutine</code>装饰器标记了这个生成器就像在C语言层面上用<code>CO_ITERABLE_COROUTINE</code> 标记代码对象一样）。</p><p>但是，<code>GET_AWAITABLE</code>字节码做了一些不同的事情。虽然这个字节码接收一个跟<code>GET_YIELD_FROM_ITER</code>接收的一样的协程，但是它不会接收一个没有被标记为协程的生成器。除了协程，这个字节码还像我们前面讨论的那样接收一个<code>awaitable</code>对象。这就使得<code>yield from</code>表达式和<code>await</code>表达式都接收协程对象，同时不同的地方在于它们是否分别接收一个普通的生成器或者<code>awaitable</code>对象。</p><p>你可能想知道为什么基于<code>async</code>的协程和基于生成器的协程在各自的暂停表达式中会接收不同的参数？这样做的原因是Python尽最大的努力确保你不会搞砸了，并且意外的混合和匹配那些恰好拥有相同API的对象。鉴于生成器继承性的实现了协程的API，那么当你希望使用一个协程的时候，就很可能意外的使用了生成器。而且由于并不是所有的生成器都被用编写用在一个基于协程的控制流程中，你需要避免不正确的使用生成器。但是由于Python不是静态编译的，Python能给你的最大保障就是当你使用一个基于生成器的协程的时候执行运行时检查。这意味着当使用<code>types.coroutine</code>的时候，Python的编译器分辨不出这个生成器是要被用作协程或者只是用着生成器（记住，语法上写<code>types.coroutine&#39;并不意味着有人已经提前做了</code>types = spam`的检查），因此，不同的操作码有不同的限制是由编译器根据它当时的情景给出的。</p><p>关于基于生成器的协同程序和基于<code>async</code>的协程之间的区别，我想说的一个非常关键的一点是，只有基于生成器的协程才能真正暂停执行并且强制传递一些东西到时间循环。你通常不会注意到这一重要的细节，因为你通常会调用事件循环特定的函数，比如<code>asyncio.sleep()</code>由于事件循环实现了它们自己的API，这些函数都必须考虑这个小细节。对于大多数的我们，我们会使用事件循环而不是编写它们，因此我们只编写<code>aync</code>协程而不需要真正的关心这个问题。但是如果你和我一样，并且正在好奇为什么你不能编写一些像<code>asyncio.sleep()</code>这种只使用<code>async</code>协程的函数，那么这将是一个非常好的时刻。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>让我们简单总结一下上面的东西。使用<code>async def</code>定义一个方法使得这个函数成为协程。另一个制作协程的方式是用<code>types.coroutine</code>标记一个生成器——实际上这个标记其实是对代码对象做<code>CO_ITERABLE_COROUTINE</code>标记——或者是一个<code>collections.abc.Coroutine</code>的子类。你只能使用一个基于生成器的协程的时候才能暂停一个协程调用链。</p><p>一个<code>awaitable</code>对象要么是一个协程，要么是一个定义了<code>__await__()</code>的对象——实际上是<code>collections.abc.Awaitable</code>——它返回一个迭代器而不是协程。一个<code>await表达式基本上就是</code>yield from<code>，但是有只能和</code>awaitable<code>对象一起使用（纯粹的生成器不能再</code>await<code>表达式中使用）。一个</code>async<code>函数是一个协程，它要么含有</code>return<code>语句——包括Python中每一个函数末尾都有的隐式</code>return None<code>语句——要么还包括或者只有</code>await<code>表达式（</code>yield<code>表达式是不允许使用的）。这个对于</code>async`函数的限制是为了确保你不会意外的将基于生成器的协程和其他生成器混用，毕竟这两种类型的生成器的期望使用方式是相当不同的。</p><h3 id="把async-await当做异步编程的一个API"><a href="#把async-await当做异步编程的一个API" class="headerlink" title="把async/await当做异步编程的一个API"></a>把<code>async</code>/<code>await</code>当做异步编程的一个API</h3><p>我想指出的一个关键事情是直到我看了David Beazley’s Python Brasil 2015年的幻灯片之前都没有深入思考过的事情。在那个讲座里，David指出了<code>async/await</code>实际上是异步编程的一个API（这也是他在twitter上对我重申的）。David说这个的意思是人们不应该把<code>async</code>/<code>await</code>当成和<code>asyncio</code>一样的东西，而是把<code>asyncio</code>想象成一个替异步编程实现<code>async</code>/<code>await</code>API的框架。</p><p>David相信<code>async</code>/<code>await</code>是一个异步编程的API以至于他创建了<code>curio</code>项目去实现他自己的事件循环。这让我更清楚的认识到，<code>async</code>/<code>await</code>允许Python为异步编程提供基础，但是并不将你绑定到特定的事件循环或者其他的底层细节当中（这与直接将事件循环集成到语言中的其他编程语言不通）。这使得<code>curio</code>这样的项目，不仅能够在较低的级别上以不同的方式运行（例如，<code>aasyncio</code>使用<code>future</code>对象来作为和事件循环交流的API，而<code>curio</code>使用元组），而且还可以具有不同的关注点和性能特种（例如，<code>asyncio</code>有一个完整的框架来实现传输和协议层，这使得它具有扩展性，而<code>curio</code>更简单，并且希望用户自己关心这类问题，但是也让它运行的更快了）。</p><p>基于Python中（短））的异步编程历史，人们可能认为<code>async</code>/<code>await</code> == <code>asyncio</code>就是可以理解的。我是说<code>asyncio</code>是使得在Python3.4中异步编程变得可能以及在Python3.5中添加<code>async</code>/<code>await</code>的动力因素。但是<code>async</code>/<code>await</code>的设计目的是要足够灵活到不再需要<code>asyncio</code>或者针对该框架扭曲任何关键决策。换句话说，<code>async</code>/<code>await</code>延续了Python的传统，即设计东西时尽可能灵活，同时又能实用的使用（和实现）。</p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>到了现在你脑子里可能充斥着各种名词和概念，使得明白所有这些东西时如何使用来给你提供异步编程变得有些困难。为了使得这些都更确切，这是一个完整的（如果设计的）异步编程例子，从事件循环和相关函数到用户代码的端到端示例。这个例子有代表独立火箭发射倒计时的协程，但是看起来确是同步倒计时的。这就是通过并发的异步编程；三个独立的协程会独立运行，而且这一切都在一个线程中完成。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">一个完整的异步编程的例子</span></span><br><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-keyword">import</span> datetime</span><br><span class="line"><span class="hljs-keyword">import</span> heapq</span><br><span class="line"><span class="hljs-keyword">import</span> types</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span>:</span></span><br><span class="line">    <span class="hljs-string">"""代表一个协程在重新运行之前应该等待多久</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    实现的比较运算符是给heapq用的。不幸的是，由于当datetime.datetime实例相等的时候，比较就会传到协程，而协程没有实现比较方法，两个元素的元组就不能用。</span></span><br><span class="line"><span class="hljs-string">    把这个当成asyncio.Task/curio.Task.</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, wait_until, coro)</span>:</span></span><br><span class="line">        self.coro = coro</span><br><span class="line">        self.waiting_until = wait_until</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span><span class="hljs-params">(self, other)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.waiting_until == other.waiting_until</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__lt__</span><span class="hljs-params">(self, other)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.waiting_until &lt; other.waiting_until</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SleepingLoop</span>:</span></span><br><span class="line">    <span class="hljs-string">"""着重于延迟协程执行的事件循环</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    把这个想象成`asyncio.BaseEventLoop/curio.Kernel`。</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, *coros)</span>:</span></span><br><span class="line">        self._new = coros</span><br><span class="line">        self._waiting = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_unitl_complete</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># 启动所有协程</span></span><br><span class="line">        <span class="hljs-keyword">for</span> coro <span class="hljs-keyword">in</span> self._new:</span><br><span class="line">            wait_for = coro.send(<span class="hljs-keyword">None</span>)</span><br><span class="line">            heapq.heappush(self._waiting, Task(wait_for, coro))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 一直运行到没有任务</span></span><br><span class="line">        <span class="hljs-keyword">while</span> self._waiting:</span><br><span class="line">            now = datetime.datetime.now()</span><br><span class="line">            <span class="hljs-comment"># 获取具有最近恢复时间的协程</span></span><br><span class="line">            task = heapq.heappop(self._waiting)</span><br><span class="line">            <span class="hljs-keyword">if</span> now &lt; task.waiting_until:</span><br><span class="line">                <span class="hljs-comment"># 我们比计算超前，等待直到下次运行时间</span></span><br><span class="line">                delta = task.waiting_until - now</span><br><span class="line">                time.sleep(delta.total_seconds())</span><br><span class="line">                now = datetime.datetime.now()</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                <span class="hljs-comment"># 唤醒协程</span></span><br><span class="line">                wait_until = task.coro.send(now)</span><br><span class="line">                heapq.heappush(self._waiting, Task(wait_until, task.coro))</span><br><span class="line">            <span class="hljs-keyword">except</span> StopIteration:</span><br><span class="line">                <span class="hljs-comment"># 协程结束</span></span><br><span class="line">                <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@types.coroutine</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sleep</span><span class="hljs-params">(seconds)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""暂停一个协程指定的秒数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    把这个当成`asyncio.sleep()/curio.sleep()`</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    wait_until = now + datetime.timedelta(seconds=seconds)</span><br><span class="line">    <span class="hljs-comment"># 将所有调用栈的协程暂停；`yield`的使用使得这个函数成为一个基于生成器的而不是基于`async`的协程</span></span><br><span class="line">    actual = <span class="hljs-keyword">yield</span> wait_until</span><br><span class="line">    <span class="hljs-comment"># 唤醒执行函数栈，返回我们实际上等待了多久</span></span><br><span class="line">    <span class="hljs-keyword">return</span> actual - now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countdown</span><span class="hljs-params">(label, length, *, delay=<span class="hljs-number">0</span>)</span>:</span></span><br><span class="line">    <span class="hljs-string">""" length秒的发射倒计时，等待delay秒数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    这是一个用户的普通写法。</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    print(label, <span class="hljs-string">'waiting'</span>, delay, <span class="hljs-string">'seconds before starting countdown'</span>)</span><br><span class="line">    delta = <span class="hljs-keyword">await</span> sleep(delay)</span><br><span class="line">    print(label, <span class="hljs-string">'starting after waiting'</span>, delta)</span><br><span class="line">    <span class="hljs-keyword">while</span> length:</span><br><span class="line">        print(label, <span class="hljs-string">'T-minus'</span>, length)</span><br><span class="line">        waited = <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">1</span>)</span><br><span class="line">        length -= <span class="hljs-number">1</span></span><br><span class="line">    print(label, <span class="hljs-string">'lift-off!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""启动事件循环，倒数三个独立的发射</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    这就是一个用户会编写的经典代码。</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    loop = SleepingLoop(countdown(<span class="hljs-string">'A'</span>, <span class="hljs-number">5</span>), countdown(</span><br><span class="line">        <span class="hljs-string">'B'</span>, <span class="hljs-number">3</span>, delay=<span class="hljs-number">2</span>), countdown(<span class="hljs-string">'C'</span>, <span class="hljs-number">4</span>, delay=<span class="hljs-number">1</span>))</span><br><span class="line">    start = datetime.datetime.now()</span><br><span class="line">    loop.run_unitl_complete()</span><br><span class="line">    print(<span class="hljs-string">'Total elapsed time is'</span>, datetime.datetime.now() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>To be continued.</strong></p>]]></content>
    
    <summary type="html">
    
      Try to understand async/await
    
    </summary>
    
      <category term="Python" scheme="https://todebug.com/categories/Python/"/>
    
    
      <category term="翻译" scheme="https://todebug.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 第四章 题27-38题解 Python版</title>
    <link href="https://todebug.com/2018/08/21/offer27-38/"/>
    <id>https://todebug.com/2018/08/21/offer27-38/</id>
    <published>2018-08-20T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:47.852Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bryceyang/python_to_the_offer" target="_blank" rel="noopener">Github</a></p><a id="more"></a><h3 id="举例让抽象问题具体化"><a href="#举例让抽象问题具体化" class="headerlink" title="举例让抽象问题具体化"></a>举例让抽象问题具体化</h3><blockquote><p>如果没有思路，那就尝试手推几个例子吧。</p></blockquote><hr><h4 id="题27：二叉树的镜像"><a href="#题27：二叉树的镜像" class="headerlink" title="题27：二叉树的镜像"></a>题27：二叉树的镜像</h4><p><strong>题目：</strong></p><blockquote><p>请完成一个函数，输入一课二叉树，请函数输出它的镜像。</p></blockquote><p><strong>解法：</strong><br>镜像也就意味着每一个子树的左右节点都得互换，所以自然可以想到可以使用递归交换每个节点的左右子树就好了；<br><br>顺手也写了个非递归版.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 返回镜像树的根节点</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Mirror</span><span class="hljs-params">(self, root)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        stack = []</span><br><span class="line">        stack.append(root)</span><br><span class="line">        <span class="hljs-keyword">while</span> stack:</span><br><span class="line">            temp = stack.pop()</span><br><span class="line">            <span class="hljs-keyword">if</span> temp.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> temp.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                temp.left, temp.right = temp.right, temp.left</span><br><span class="line">            <span class="hljs-keyword">if</span> temp.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                stack.append(temp.left)</span><br><span class="line">            <span class="hljs-keyword">if</span> temp.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                stack.append(temp.right)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Mirror_recur</span><span class="hljs-params">(self, root)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""递归版"""</span></span><br><span class="line">        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">or</span> root.right:</span><br><span class="line">            root.left, root.right = root.right, root.left</span><br><span class="line">        self.Mirror_recur(root.left)</span><br><span class="line">        self.Mirror_recur(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mirror</span><span class="hljs-params">(self, root1, root2)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""检测两棵二叉树是不是镜像树</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            root1 (TreeNode): 二叉树头结点</span></span><br><span class="line"><span class="hljs-string">            root2 (TreeNode): 二叉树头结点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool: 是否为镜像树</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> root1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">and</span> root2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">if</span> root1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> root2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> root1.val != root2.val:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.mirror(root1.left, root2.right) <span class="hljs-keyword">and</span> self.mirror(root1.right, root2.left)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    root = TreeNode(<span class="hljs-number">8</span>)</span><br><span class="line">    root.left = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root.right = TreeNode(<span class="hljs-number">10</span>)</span><br><span class="line">    root.left.left = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line">    root.left.right = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    root.right.left = TreeNode(<span class="hljs-number">9</span>)</span><br><span class="line">    root.right.right = TreeNode(<span class="hljs-number">11</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 镜像树</span></span><br><span class="line">    root1 = TreeNode(<span class="hljs-number">8</span>)</span><br><span class="line">    root1.left = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root1.right = TreeNode(<span class="hljs-number">10</span>)</span><br><span class="line">    root1.left.left = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line">    root1.left.right = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    root1.right.left = TreeNode(<span class="hljs-number">9</span>)</span><br><span class="line">    root1.right.right = TreeNode(<span class="hljs-number">11</span>)</span><br><span class="line"></span><br><span class="line">    ex = Solution()</span><br><span class="line">    ex.Mirror(root)</span><br><span class="line">    print(ex.mirror(root1, root))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="题28：对称的二叉树"><a href="#题28：对称的二叉树" class="headerlink" title="题28：对称的二叉树"></a>题28：对称的二叉树</h4><p><strong>题目：</strong></p><blockquote><p>请实现一个函数，用来判断一课二叉树是不是对称的。如果一个二叉树和它的镜像一样，那么他就是对称的.</p></blockquote><p><strong>解法：</strong> <br></p><ol><li><p>题意说的很清楚，可以通过判断二叉树和它的镜像是否相等来判断二叉树是否对象，或者换一种说法，检测二叉树和它自己是否是镜像才.</p></li><li><p>利用树的遍历，前序中左右，我们再写一个自定义序中右左，那么对于对称树，这两个遍历序是一样的，可以利用这个来确定是否是对称树。</p></li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_symmetry_tree</span><span class="hljs-params">(self, root1, root2)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""检测两棵二叉树是不是镜像树</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            root1 (TreeNode): 二叉树头结点</span></span><br><span class="line"><span class="hljs-string">            root2 (TreeNode): 二叉树头结点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool: 是否为镜像树</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> root1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">and</span> root2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">if</span> root1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> root2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> root1.val != root2.val:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.is_symmetry_tree(root1.left, root2.right) <span class="hljs-keyword">and</span> \</span><br><span class="line">               self.is_symmetry_tree(root1.right, root2.left)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    root = TreeNode(<span class="hljs-number">8</span>)</span><br><span class="line">    root.left = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root.right = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root.left.left = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line">    root.left.right = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    root.right.left = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    root.right.right = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.is_symmetry_tree(root, root))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="题29：顺时针打印矩阵"><a href="#题29：顺时针打印矩阵" class="headerlink" title="题29：顺时针打印矩阵"></a>题29：顺时针打印矩阵</h4><p><strong>题目：</strong></p><blockquote><p>输入一个矩阵，按照从外向内以顺时针一次打印出每一个数字。</p></blockquote><p><strong>解法：</strong> <br><br>这个题主要是确定每次的打印范围，然后规范化打印之后再处理特殊情况：<br><img src="/assets/blog_images/print_matrix_clocked.jpeg" alt="print matrix clocked"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-string">"""matrix类型为二维列表，需要返回列表"""</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printMatrix</span><span class="hljs-params">(self, matrix)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        row_length = len(matrix)</span><br><span class="line">        col_length = len(matrix[<span class="hljs-number">0</span>])</span><br><span class="line">        <span class="hljs-keyword">if</span> row_length == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> col_length == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> res</span><br><span class="line">        i = j = <span class="hljs-number">0</span></span><br><span class="line">        m = row_length - <span class="hljs-number">1</span></span><br><span class="line">        n = col_length - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; m <span class="hljs-keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(j, n):</span><br><span class="line">                res.append(matrix[i][_])</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(i, m):</span><br><span class="line">                res.append(matrix[_][n])</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n, j, <span class="hljs-number">-1</span>):</span><br><span class="line">                res.append(matrix[m][_])</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(m, i, <span class="hljs-number">-1</span>):</span><br><span class="line">                res.append(matrix[_][j])</span><br><span class="line">            i += <span class="hljs-number">1</span></span><br><span class="line">            j += <span class="hljs-number">1</span></span><br><span class="line">            m -= <span class="hljs-number">1</span></span><br><span class="line">            n -= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> i == m == j == n:</span><br><span class="line">            res.append(matrix[i][j])</span><br><span class="line">        <span class="hljs-keyword">elif</span> i == m:</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(j, n+<span class="hljs-number">1</span>):</span><br><span class="line">                res.append(matrix[i][_])</span><br><span class="line">        <span class="hljs-keyword">elif</span> j == n:</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(i, m+<span class="hljs-number">1</span>):</span><br><span class="line">                res.append(matrix[_][n])</span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="举例让抽象问题具体化-1"><a href="#举例让抽象问题具体化-1" class="headerlink" title="举例让抽象问题具体化"></a>举例让抽象问题具体化</h3><p>如果规律不能一眼看出来，那就试着用具体例子模拟过程吧。<strong>不要钻牛角尖，因为没有用。</strong></p><h4 id="题30：包含min函数的栈"><a href="#题30：包含min函数的栈" class="headerlink" title="题30：包含min函数的栈"></a>题30：包含min函数的栈</h4><blockquote><p>使用辅助栈，辅助栈与主栈同步增长，辅助栈中放入已压入元素的最小值；辅助栈与主栈同步弹出；</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.stack_min = []</span><br><span class="line">        self.min_value = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, node)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.stack:</span><br><span class="line">            self.min_value = node</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            self.min_value = min(self.min_value, node)</span><br><span class="line"></span><br><span class="line">        self.stack.append(node)</span><br><span class="line">        self.stack_min.append(self.min_value)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.stack_min.pop()</span><br><span class="line">        <span class="hljs-keyword">return</span> self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.stack[<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">min</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.stack_min[<span class="hljs-number">-1</span>]</span><br></pre></td></tr></table></figure><hr><h4 id="题31：栈的压入、弹出序列"><a href="#题31：栈的压入、弹出序列" class="headerlink" title="题31：栈的压入、弹出序列"></a>题31：栈的压入、弹出序列</h4><p><strong>解法：</strong> <br><br>如果要判断一个序列是不是栈的弹出序列，那么把压入序列真正的压入一遍就知道了。此题分析如下：</p><ol><li>设立一个辅助栈和两个变量用作标志，一个指向弹出序列中的待弹出元素，一个指向压入序列中还未压入栈的元素，两个变量初始值都为0；</li><li>如果待弹出元素和栈顶元素不相同，那么就去待压入元素中寻找和待弹出元素相等的值，将其压入栈；<br></li><li>如果待弹出元素和栈顶元素相同，那么弹出栈顶，待弹出元素往后继续，重复这个过程直到变成条件2，再重复条件2；</li><li>在3中如果找不到相等元素，那么就说明弹出序列有问题。</li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">IsPopOrder</span><span class="hljs-params">(self, pushV, popV)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(pushV) != len(popV):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        cur_push = <span class="hljs-number">0</span></span><br><span class="line">        cur_pop = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">or</span> cur_push &lt; len(pushV):</span><br><span class="line">            <span class="hljs-comment"># cur_pop与栈顶相同，则弹出，cur_pop + 1</span></span><br><span class="line">            <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">and</span> stack[<span class="hljs-number">-1</span>] == popV[cur_pop]:</span><br><span class="line">                stack.pop()</span><br><span class="line">                cur_pop += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-comment"># cur_pop与栈顶不同，那么开始压栈，直到找到相等值</span></span><br><span class="line">                <span class="hljs-keyword">while</span> cur_push &lt; len(pushV) <span class="hljs-keyword">and</span> pushV[cur_push] != popV[cur_pop]:</span><br><span class="line">                    stack.append(pushV[cur_push])</span><br><span class="line">                    cur_push += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">if</span> cur_push &lt; len(pushV):</span><br><span class="line">                    stack.append(pushV[cur_push])</span><br><span class="line">                    cur_push += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-comment"># 去除长度不等之外的唯一错误情况：找不到相等值压栈</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br></pre></td></tr></table></figure><hr><h4 id="题32：从上往下打印二叉树"><a href="#题32：从上往下打印二叉树" class="headerlink" title="题32：从上往下打印二叉树"></a>题32：从上往下打印二叉树</h4><h5 id="题目一：不分行打印"><a href="#题目一：不分行打印" class="headerlink" title="题目一：不分行打印"></a>题目一：不分行打印</h5><h5 id="题目二：分行打印"><a href="#题目二：分行打印" class="headerlink" title="题目二：分行打印"></a>题目二：分行打印</h5><blockquote><p>从上到下打印二叉树的每个节点，同一层的节点按照从左到右的顺序打印，代码实现的为分行打印。</p></blockquote><p><strong>解法：</strong><br><br>层次遍历，利用队列解，剩下的大家就都知道了。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, val)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_tree_with_level</span><span class="hljs-params">(self, root)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        qu = []</span><br><span class="line">        qu.append(root)</span><br><span class="line">        count = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> qu:</span><br><span class="line">            to_be_print = len(qu)</span><br><span class="line">            <span class="hljs-keyword">while</span> to_be_print &gt; <span class="hljs-number">0</span>:</span><br><span class="line">                temp = qu.pop(<span class="hljs-number">0</span>)</span><br><span class="line">                print(temp.val, end=<span class="hljs-string">' '</span>)</span><br><span class="line">                <span class="hljs-keyword">if</span> temp.left:</span><br><span class="line">                    qu.append(temp.left)</span><br><span class="line">                <span class="hljs-keyword">if</span> temp.right:</span><br><span class="line">                    qu.append(temp.right)</span><br><span class="line">                to_be_print -= <span class="hljs-number">1</span></span><br><span class="line">            count += <span class="hljs-number">1</span></span><br><span class="line">            print(<span class="hljs-string">'第%d层\n'</span> % count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    root = TreeNode(<span class="hljs-number">1</span>)</span><br><span class="line">    root.left = TreeNode(<span class="hljs-number">2</span>)</span><br><span class="line">    root.right = TreeNode(<span class="hljs-number">3</span>)</span><br><span class="line">    root.left.left = TreeNode(<span class="hljs-number">4</span>)</span><br><span class="line">    root.left.right = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line">    root.right.left = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root.right.right = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    ex = Solution()</span><br><span class="line">    ex.print_tree_with_level(root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="题目三：之字形打印二叉树"><a href="#题目三：之字形打印二叉树" class="headerlink" title="题目三：之字形打印二叉树"></a>题目三：之字形打印二叉树</h5><p><strong>题目：</strong></p><blockquote><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，如此反复。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, val)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-string">"""分层之字形打印二叉树</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Print</span><span class="hljs-params">(self, pRoot)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> pRoot <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        s1, s2, res = [], [], []</span><br><span class="line">        s1.append(pRoot)</span><br><span class="line">        <span class="hljs-keyword">while</span> s1 <span class="hljs-keyword">or</span> s2:</span><br><span class="line">            <span class="hljs-keyword">if</span> s1:</span><br><span class="line">                cur_level_res = []</span><br><span class="line">                <span class="hljs-keyword">while</span> s1:</span><br><span class="line">                    item = s1.pop()</span><br><span class="line">                    cur_level_res.append(item.val)</span><br><span class="line">                    <span class="hljs-keyword">if</span> item.left:</span><br><span class="line">                        s2.append(item.left)</span><br><span class="line">                    <span class="hljs-keyword">if</span> item.right:</span><br><span class="line">                        s2.append(item.right)</span><br><span class="line">                res.append(cur_level_res)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> s2:</span><br><span class="line">                cur_level_res = []</span><br><span class="line">                <span class="hljs-keyword">while</span> s2:</span><br><span class="line">                    item = s2.pop()</span><br><span class="line">                    cur_level_res.append(item.val)</span><br><span class="line">                    <span class="hljs-keyword">if</span> item.right:</span><br><span class="line">                        s1.append(item.right)</span><br><span class="line">                    <span class="hljs-keyword">if</span> item.left:</span><br><span class="line">                        s1.append(item.left)</span><br><span class="line">                res.append(cur_level_res)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    root = TreeNode(<span class="hljs-number">1</span>)</span><br><span class="line">    root.left = TreeNode(<span class="hljs-number">2</span>)</span><br><span class="line">    root.right = TreeNode(<span class="hljs-number">3</span>)</span><br><span class="line">    root.left.left = TreeNode(<span class="hljs-number">4</span>)</span><br><span class="line">    root.left.right = TreeNode(<span class="hljs-number">5</span>)</span><br><span class="line">    root.right.left = TreeNode(<span class="hljs-number">6</span>)</span><br><span class="line">    root.right.right = TreeNode(<span class="hljs-number">7</span>)</span><br><span class="line">    ex = Solution()</span><br><span class="line">    print(ex.Print(root))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="题33：二叉搜索树的后序遍历序列"><a href="#题33：二叉搜索树的后序遍历序列" class="headerlink" title="题33：二叉搜索树的后序遍历序列"></a>题33：二叉搜索树的后序遍历序列</h4><p><strong>题目：</strong></p><blockquote><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。假设数组中没有相同元素。</p></blockquote><p><strong>解法：</strong> <br><br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">VerifySquenceOfBST</span><span class="hljs-params">(self, sequence)</span>:</span></span><br><span class="line">        length = len(sequence)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        root = sequence[<span class="hljs-number">-1</span>]</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            <span class="hljs-keyword">if</span> sequence[i] &gt; root:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">        j = i</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, length<span class="hljs-number">-1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> sequence[j] &lt; root:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        left = <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            left = self.VerifySquenceOfBST(sequence[:i])</span><br><span class="line">        right = <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">if</span> i &lt; length - <span class="hljs-number">1</span>:</span><br><span class="line">            right = self.VerifySquenceOfBST(sequence[i:<span class="hljs-number">-1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> left <span class="hljs-keyword">and</span> right</span><br></pre></td></tr></table></figure></p><h4 id="题34：二叉树中和为某一值的路径"><a href="#题34：二叉树中和为某一值的路径" class="headerlink" title="题34：二叉树中和为某一值的路径"></a>题34：二叉树中和为某一值的路径</h4><p><strong>题目：</strong></p><blockquote><p>输入一棵二叉树和一个整数，打印出二叉树中节点值得和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindPath</span><span class="hljs-params">(self, root, expectNumber)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""找到二叉树中和为某个值的路径</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            root (TreeNode): 二叉树根节点</span></span><br><span class="line"><span class="hljs-string">            expectNumber (int): 目标和</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            list: 二维列表，内部每个列表表示找到的路径</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_main</span><span class="hljs-params">(root, path, cur_sum)</span>:</span></span><br><span class="line">            cur_sum += root.val</span><br><span class="line">            path.append(root)</span><br><span class="line"></span><br><span class="line">            is_leaf = <span class="hljs-keyword">True</span> <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">and</span> root.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">False</span></span><br><span class="line">            <span class="hljs-keyword">if</span> cur_sum == expectNumber <span class="hljs-keyword">and</span> is_leaf:</span><br><span class="line">                one_path = []</span><br><span class="line">                <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> path:</span><br><span class="line">                    one_path.append(item.val)</span><br><span class="line">                res.append(one_path)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> cur_sum &lt; expectNumber:</span><br><span class="line">                <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                    find_main(root.left, path, cur_sum)</span><br><span class="line">                <span class="hljs-keyword">if</span> root.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                    find_main(root.right, path, cur_sum)</span><br><span class="line"></span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line">        find_main(root, [], <span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="分解让复杂问题简单化"><a href="#分解让复杂问题简单化" class="headerlink" title="分解让复杂问题简单化"></a>分解让复杂问题简单化</h3><p>将大问题分解成小问题——怎样将大问题分解成小问题？无他，多练，就脑熟了。</p><h4 id="题35：复杂链表的复制"><a href="#题35：复杂链表的复制" class="headerlink" title="题35：复杂链表的复制"></a>题35：复杂链表的复制</h4><p><strong>题目：</strong></p><blockquote><p>请实现函数复制一个复杂链表。在复杂链表中，每个节点除了有一个next指针指向下一个节点，还有一个sibling指针指向链表中的任意节点或者None。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.label = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line">        self.random = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Clone</span><span class="hljs-params">(self, pHead)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""返回克隆的复杂链表的头结点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            pHead (RandomListNode): 复杂链表头部</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            RanddomListNode: 复制链表头部</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> pHead <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        buf_dict = &#123;&#125;</span><br><span class="line">        copy_head = RandomListNode(pHead.label)</span><br><span class="line">        p, copy_p = pHead, copy_head</span><br><span class="line">        <span class="hljs-keyword">while</span> p.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            copy_p.next = RandomListNode(p.next.label)</span><br><span class="line">            p = p.next</span><br><span class="line">            copy_p = copy_p.next</span><br><span class="line">            buf_dict[p] = copy_p</span><br><span class="line"></span><br><span class="line">        p, copy_p = pHead, copy_head</span><br><span class="line">        <span class="hljs-keyword">while</span> p <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> p.random <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                copy_p.random = buf_dict[p.random]</span><br><span class="line">            p = p.next</span><br><span class="line">            copy_p = copy_p.next</span><br><span class="line">        <span class="hljs-keyword">return</span> copy_head</span><br></pre></td></tr></table></figure><h4 id="题36：二叉搜索树与双向链表"><a href="#题36：二叉搜索树与双向链表" class="headerlink" title="题36：二叉搜索树与双向链表"></a>题36：二叉搜索树与双向链表</h4><blockquote><p>输入一个二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新节点，只能调整树中节点指针的指向。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Convert</span><span class="hljs-params">(self, pRootOfTree)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""将二叉搜索树与双向链表</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            pRootOfTree (TreeNode): 二叉树根节点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            TreeNode: 双向链表头部</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> pRootOfTree <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> pRootOfTree</span><br><span class="line">        <span class="hljs-keyword">if</span> pRootOfTree.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">and</span> pRootOfTree.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> pRootOfTree</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mid_order</span><span class="hljs-params">(root, res)</span>:</span></span><br><span class="line">            <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">            mid_order(root.right, res)</span><br><span class="line">            res.append(root)</span><br><span class="line">            mid_order(root.left, res)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> res</span><br><span class="line">        pre_res = mid_order(pRootOfTree, [])</span><br><span class="line">        pre_res = pre_res[::<span class="hljs-number">-1</span>]</span><br><span class="line">        head = pre_res[<span class="hljs-number">0</span>]</span><br><span class="line">        head.left = <span class="hljs-keyword">None</span></span><br><span class="line">        head.right = pre_res[<span class="hljs-number">1</span>]</span><br><span class="line">        <span class="hljs-keyword">if</span> len(pre_res) &gt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(pre_res)<span class="hljs-number">-1</span>):</span><br><span class="line">                temp = pre_res[i]</span><br><span class="line">                temp.left = pre_res[i<span class="hljs-number">-1</span>]</span><br><span class="line">                temp.right = pre_res[i+<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">        pre_res[<span class="hljs-number">-1</span>].right = <span class="hljs-keyword">None</span></span><br><span class="line">        pre_res[<span class="hljs-number">-1</span>].left = pre_res[<span class="hljs-number">-2</span>]</span><br><span class="line">        <span class="hljs-keyword">return</span> head</span><br></pre></td></tr></table></figure><h4 id="题37：序列化二叉树"><a href="#题37：序列化二叉树" class="headerlink" title="题37：序列化二叉树"></a>题37：序列化二叉树</h4><p><strong>题目：</strong></p><blockquote><p>请实现两个函数，分别用来序列化和反序列化二叉树</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Serialize</span><span class="hljs-params">(self, root)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""前序序列化二叉树</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            root (TreeNo): 二叉树根节点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            str: 序列化字符串</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">'#_'</span></span><br><span class="line">        res = <span class="hljs-string">'%d_'</span> % root.val</span><br><span class="line">        res += self.Serialize(root.left)</span><br><span class="line">        res += self.Serialize(root.right)</span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Deserialize</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""根据字符串反序列化由Serialize函数序列化的二叉树</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            s (str): 序列化的字符串</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            TreeNode: 反序列化之后二叉树头结点</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        s = s.split(<span class="hljs-string">'_'</span>)[:<span class="hljs-number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inside</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">            head = s.pop(<span class="hljs-number">0</span>)</span><br><span class="line">            print(head)</span><br><span class="line">            <span class="hljs-keyword">if</span> head == <span class="hljs-string">'#'</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">            head = TreeNode(int(head))</span><br><span class="line">            head.left = inside(s)</span><br><span class="line">            head.right = inside(s)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> inside(s)</span><br></pre></td></tr></table></figure><h4 id="题38：字符串的排列"><a href="#题38：字符串的排列" class="headerlink" title="题38：字符串的排列"></a>题38：字符串的排列</h4><p><strong>解法：</strong> <br><br>全排列问题，可以用递归做。递归做的越多越发现有时候递归不是很好写。暂定以后的递归套路为分析最后情况，制定basecase必须要给递归返回有利条件。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Permutation</span><span class="hljs-params">(self, ss)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> ss <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(ss) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> ss</span><br><span class="line">        ss = list(ss)</span><br><span class="line">        res = set(&#123;&#125;)</span><br><span class="line">        self.permut(ss, <span class="hljs-number">0</span>, res)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> sorted(list(res))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permut</span><span class="hljs-params">(self, ss, begin, res)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> begin == len(ss) - <span class="hljs-number">1</span>:</span><br><span class="line">            res.add(<span class="hljs-string">''</span>.join(ss))</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line"></span><br><span class="line">        cur = begin</span><br><span class="line">        <span class="hljs-keyword">for</span> cur <span class="hljs-keyword">in</span> range(begin, len(ss)):</span><br><span class="line">            self.swap(ss, begin, cur)    <span class="hljs-comment"># 交换</span></span><br><span class="line">            self.permut(ss, begin+<span class="hljs-number">1</span>, res)</span><br><span class="line">            self.swap(ss, begin, cur)    <span class="hljs-comment"># 复位</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, ss, i, j)</span>:</span></span><br><span class="line">        ss[i], ss[j] = ss[j], ss[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer27-38题解
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
    
      <category term="剑指offer" scheme="https://todebug.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer 第三章 题16-26题解 Python版</title>
    <link href="https://todebug.com/2018/08/20/offer16-26/"/>
    <id>https://todebug.com/2018/08/20/offer16-26/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:47.768Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bryceyang/python_to_the_offer" target="_blank" rel="noopener">Github</a></p><a id="more"></a><h3 id="代码完整性"><a href="#代码完整性" class="headerlink" title="代码完整性"></a>代码完整性</h3><blockquote><ul><li>基础功能；</li><li>输入边界值；</li><li>错误处理；</li></ul></blockquote><h4 id="题16：数值的整数次方"><a href="#题16：数值的整数次方" class="headerlink" title="题16：数值的整数次方"></a>题16：数值的整数次方</h4><blockquote><p>此题不需要考虑大数问题，仅仅是计算整数次方，所以处理好特殊值就行了。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Power</span><span class="hljs-params">(self, base, exponent)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""计算base的exponent次方</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            base &#123;int&#125; -- 整数</span></span><br><span class="line"><span class="hljs-string">            exponent &#123;int&#125; -- 指数，可正可负</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            int -- 结果</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> base == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">if</span> base == <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        abs_exponent = self.abs_exp(base, abs(exponent))</span><br><span class="line">        <span class="hljs-keyword">if</span> exponent &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> abs_exponent</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / abs_exponent</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 此处处理有个窍门，可以二分计算</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">abs_exp</span><span class="hljs-params">(self, base, exponent)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> exponent == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> exponent == <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> base</span><br><span class="line"></span><br><span class="line">        res = self.abs_exp(base, exponent &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">        res *= res</span><br><span class="line">        <span class="hljs-keyword">if</span> exponent &amp; <span class="hljs-number">1</span> == <span class="hljs-number">1</span>:</span><br><span class="line">            res *= base</span><br><span class="line">        <span class="hljs-keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="题17：打印从1到最大的n位数"><a href="#题17：打印从1到最大的n位数" class="headerlink" title="题17：打印从1到最大的n位数"></a>题17：打印从1到最大的n位数</h4><blockquote><p>此题其实是想考察大数的处理，在python中，大数的影响几乎不存在，所以可以直接写。但是使用数组或者字符串表示大数的方式还是值得学一学。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_1_to_n</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line"></span><br><span class="line">    i = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> len(str(i)) &lt;= n:</span><br><span class="line">        print(i)</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line">    print(<span class="hljs-string">' '</span>)</span><br></pre></td></tr></table></figure><h4 id="题18：删除链表的节点"><a href="#题18：删除链表的节点" class="headerlink" title="题18：删除链表的节点"></a>题18：删除链表的节点</h4><h4 id="题19：正则表达式匹配"><a href="#题19：正则表达式匹配" class="headerlink" title="题19：正则表达式匹配"></a>题19：正则表达式匹配</h4><blockquote><p>这个题情况分析很复杂。因为*可以表示出现任意次，所以在pattern中出现*时，s的推进情况就很复杂，此时用递归获取结果是最容易想明白的。<br><br> <strong>以模式的第二个字符为判断标准，来构造递归，具体看代码。</strong></p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-comment"># s, pattern都是字符串</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match</span><span class="hljs-params">(self, s, pattern)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(s) == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> len(pattern) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-comment"># 如果s长度不为0，而pattern长度为0，这种情况不可能匹配成功</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> len(s) != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> len(pattern) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-comment"># 如果s长度为0， 而pattern长度不为0，那么可能会有pattern为'（.*）*'的情况</span></span><br><span class="line">        <span class="hljs-keyword">elif</span> len(s) == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> len(pattern) != <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-comment"># 如果pattern第二位为0, pattern推进两个</span></span><br><span class="line">            <span class="hljs-keyword">if</span> len(pattern) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> self.match(s, pattern[<span class="hljs-number">2</span>:])</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        <span class="hljs-comment"># 如果s和pattern长度都不为0</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-comment"># pattern第二位为*</span></span><br><span class="line">            <span class="hljs-keyword">if</span> len(pattern) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">1</span>] == <span class="hljs-string">'*'</span>:</span><br><span class="line">                <span class="hljs-comment"># 如果s[0] != pattern[0]</span></span><br><span class="line">                <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] !=  pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> pattern[<span class="hljs-number">0</span>] != <span class="hljs-string">'.'</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> self.match(s, pattern[<span class="hljs-number">2</span>:])</span><br><span class="line">                <span class="hljs-comment"># 如果s[0] == pattern[0], 那么有三种情况</span></span><br><span class="line">                    <span class="hljs-comment"># 1. s不变，pattern后移两步（pattern前两个字符等价于空）</span></span><br><span class="line">                    <span class="hljs-comment"># 2. s右移一个， pattern右移两个 （pattern前两个字符等价于一个字符）</span></span><br><span class="line">                    <span class="hljs-comment"># 3. s右移一个， pattern不右移 （pattern前两个字符等价于多个字符)）</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> self.match(s, pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> \</span><br><span class="line">                           self.match(s[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> \</span><br><span class="line">                           self.match(s[<span class="hljs-number">1</span>:], pattern)</span><br><span class="line">            <span class="hljs-comment"># pattern第二位不是*</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-comment"># 比较第一位的情况</span></span><br><span class="line">                <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == pattern[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> pattern[<span class="hljs-number">0</span>] == <span class="hljs-string">'.'</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> self.match(s[<span class="hljs-number">1</span>:], pattern[<span class="hljs-number">1</span>:])</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>这个题是真的烦。。</strong></p><h4 id="题20：表示数值的字符串"><a href="#题20：表示数值的字符串" class="headerlink" title="题20：表示数值的字符串"></a>题20：表示数值的字符串</h4><blockquote><p>这个题并没有什么意思，找到所有可有可无的片段凑正则就行了。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-comment"># s字符串</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isNumeric</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span> <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">r"^[\+\-]?[0-9]*(\.[0-9]*)?([eE][\+\-]?[0-9]+)?$"</span>, s) <span class="hljs-keyword">else</span> <span class="hljs-keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="题21：调整数组顺序使奇数位于偶数前面"><a href="#题21：调整数组顺序使奇数位于偶数前面" class="headerlink" title="题21：调整数组顺序使奇数位于偶数前面"></a>题21：调整数组顺序使奇数位于偶数前面</h4><blockquote><p>这个题可以借助荷兰国旗问题求解。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reOrderArray</span><span class="hljs-params">(self, array)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> array <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(array) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> array</span><br><span class="line"></span><br><span class="line">        p1 = <span class="hljs-number">0</span></span><br><span class="line">        p2 = len(array) - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> p1 &lt; p2:</span><br><span class="line">            <span class="hljs-keyword">if</span> self.is_even(array[p1]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.is_even(array[p2]):</span><br><span class="line">                self.swap(array, p1, p2)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.is_even(array[p1]):</span><br><span class="line">                p1 += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">while</span> self.is_even(array[p2]):</span><br><span class="line">                p2 -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_even</span><span class="hljs-params">(self, item)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> item &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, array, i, j)</span>:</span></span><br><span class="line">        array[i], array[j] = array[j], array[i]</span><br></pre></td></tr></table></figure><p><strong>如果要求保留原数组奇数间的顺序以及偶数间的顺序，借助了辅助数组的代码如下:</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_even</span><span class="hljs-params">(self, item)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> item &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reOrderArray</span><span class="hljs-params">(self, array)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> array <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(array) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> array</span><br><span class="line"></span><br><span class="line">        assi_array = []</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> array:</span><br><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.is_even(item):</span><br><span class="line">                assi_array.append(item)</span><br><span class="line">        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> array:</span><br><span class="line">            <span class="hljs-keyword">if</span> self.is_even(item):</span><br><span class="line">                assi_array.append(item)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> assi_array</span><br></pre></td></tr></table></figure><h3 id="代码鲁棒性"><a href="#代码鲁棒性" class="headerlink" title="代码鲁棒性"></a>代码鲁棒性</h3><ul><li>判断输入</li><li>容错性</li></ul><h4 id="题22：链表中倒数第k个节点"><a href="#题22：链表中倒数第k个节点" class="headerlink" title="题22：链表中倒数第k个节点"></a>题22：链表中倒数第k个节点</h4><p><strong>题目：</strong></p><blockquote><p>输入一个链表，输出该链表中倒数第k个节点。本题从1开始计数，即尾节点为倒数第1个节点。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FindKthToTail</span><span class="hljs-params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""打印链表倒数第k个节点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            head (ListNode): 链表头结点</span></span><br><span class="line"><span class="hljs-string">            k (int): 指定数字</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            ListNode: 倒数第k个节点</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        p_ahead = head</span><br><span class="line">        p_behind = head</span><br><span class="line">        <span class="hljs-keyword">while</span> k &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> p_ahead <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">            p_ahead = p_ahead.next</span><br><span class="line"></span><br><span class="line">            k -= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> p_ahead <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            p_ahead = p_ahead.next</span><br><span class="line">            p_behind = p_behind.next</span><br><span class="line">        <span class="hljs-keyword">return</span> p_behind</span><br></pre></td></tr></table></figure><h4 id="题23：链表中环的入口节点"><a href="#题23：链表中环的入口节点" class="headerlink" title="题23：链表中环的入口节点"></a>题23：链表中环的入口节点</h4><p><strong>题目：</strong></p><blockquote><p>如果一个链表中包含环，如何找出环的入口节点？</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">EntryNodeOfLoop</span><span class="hljs-params">(self, pHead)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""找到链表中环的入口节点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            pHead (ListNode): 链表头结点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            ListNode: 入口节点（如果没有返回None）</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> pHead <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> pHead.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        p1 = p2 = pHead</span><br><span class="line">        <span class="hljs-keyword">while</span> p2.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            p2 = p2.next.next</span><br><span class="line">            p1 = p1.next</span><br><span class="line">            <span class="hljs-keyword">if</span> p1 == p2:</span><br><span class="line">                first_met = p1</span><br><span class="line">                count = <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">while</span> p1.next != first_met:</span><br><span class="line">                    p1 = p1.next</span><br><span class="line">                    count += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">                p1 = p2 = pHead</span><br><span class="line">                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(count):</span><br><span class="line">                    p1 = p1.next</span><br><span class="line">                <span class="hljs-keyword">while</span> p1 != p2:</span><br><span class="line">                    p1 = p1.next</span><br><span class="line">                    p2 = p2.next</span><br><span class="line">                <span class="hljs-keyword">return</span> p1</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br></pre></td></tr></table></figure><h4 id="题24：反转链表"><a href="#题24：反转链表" class="headerlink" title="题24：反转链表"></a>题24：反转链表</h4><p><strong>题目：</strong></p><blockquote><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ReverseList</span><span class="hljs-params">(self, pHead)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""反转链表，返回反转后的头</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            pHead (ListNode): 链表头</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            ListNode: 反转之后链表头</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> pHead <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> pHead.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> pHead</span><br><span class="line">        new_head = self.ReverseList(pHead.next)</span><br><span class="line"></span><br><span class="line">        pHead.next.next = pHead</span><br><span class="line">        pHead.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> new_head</span><br></pre></td></tr></table></figure><h4 id="题25：合并两个排序的链表"><a href="#题25：合并两个排序的链表" class="headerlink" title="题25：合并两个排序的链表"></a>题25：合并两个排序的链表</h4><p><strong>题目：</strong></p><blockquote><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Merge</span><span class="hljs-params">(self, pHead1, pHead2)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""合并两个排序链表</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> pHead1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> pHead2</span><br><span class="line">        <span class="hljs-keyword">elif</span> pHead2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> pHead1</span><br><span class="line"></span><br><span class="line">        p1, p2 = pHead1, pHead2</span><br><span class="line">        merge_head = <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-keyword">if</span> p1.val &lt; p2.val:</span><br><span class="line">            merge_head = p1</span><br><span class="line">            merge_head.next = self.Merge(p1.next, p2)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            merge_head = p2</span><br><span class="line">            merge_head.next = self.Merge(p1, p2.next)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> merge_head</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer16-26题解
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
    
      <category term="剑指offer" scheme="https://todebug.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>排序总结</title>
    <link href="https://todebug.com/2018/08/19/summary-of-sort/"/>
    <id>https://todebug.com/2018/08/19/summary-of-sort/</id>
    <published>2018-08-18T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:47.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对数器："><a href="#对数器：" class="headerlink" title="对数器："></a>对数器：</h3><blockquote><p>对数器用来检测自定义排序算法是否正确。以下排序算法都经过10万个随机数组测试。</p></blockquote><a id="more"></a><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comparator</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compare</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> sorted(arr)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_arr</span><span class="hljs-params">(self, max_length, max_value)</span>:</span></span><br><span class="line">        length = random.randint(<span class="hljs-number">0</span>, max_length)</span><br><span class="line">        arr = [random.randint(-max_value, max_value) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length)]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">confirm</span><span class="hljs-params">(self, arr1, arr2)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> arr1 == arr2</span><br></pre></td></tr></table></figure><h3 id="1-堆排序"><a href="#1-堆排序" class="headerlink" title="1. 堆排序"></a>1. 堆排序</h3><p><strong>下面这个堆排序写复杂了！！！！，堆还有一个性质是可以利用的：当用数组表示存储n个元素的堆时，叶节点下标分别是[n//2, n//2+1, …, n-1]，这样的话我们构建堆的时候只要自下往上对不是叶节点的坐标执行heapify操作就可以了。</strong></p><blockquote><p>堆是一个极其重要的数据结构，堆排序主要是利用了堆的思想,其时间复杂度为<code>O(N*logN)</code>,额外空间复杂度为<code>O(1)</code>。<br><br>&emsp;&emsp;1.将数组调整成大根堆：<br><br>&emsp;&emsp;&emsp;&emsp;在数组中，如果我们把index i位置的数字看作是根节点，那么它的左子节点在<code>index (2 * i) + 1</code>位置，右子节点在<code>index (2 * i) + 2</code>位置。反之index i位置的节点的父节点的位置在<code>(i - 1) // 2</code>位置。遍历数组添加元素，对每个新添加的元素执行<code>heap_insert</code>操作，从加入点开始上浮，直到上浮到合适位置；<br><br>&emsp;&emsp;2.将大根堆顶与数组中最后一个元素交换，然后在不包括最后一个元素的数组区间执行<code>heapify</code>操作<br><br>&emsp;&emsp;&emsp;&emsp;在堆顶与数组中最后一个元素交换后，我们需要重新调整堆，使得堆顶最大；<br><br>&emsp;&emsp;3.重复2，直到可执行区间为1</p></blockquote><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heapsort</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">        length = len(arr)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):</span><br><span class="line">            self.heap_insert(arr, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.swap(arr, <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>)</span><br><span class="line">        size = length - <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-keyword">while</span> size &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            self.heapify(arr, <span class="hljs-number">0</span>, size)</span><br><span class="line">            self.swap(arr, <span class="hljs-number">0</span>, size)</span><br><span class="line">            size -= <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heap_insert</span><span class="hljs-params">(self, arr, i)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            parent = (i - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-keyword">if</span> arr[parent] &gt; arr[i]:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                self.swap(arr, parent, i)</span><br><span class="line">                i = parent</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heapify</span><span class="hljs-params">(self, arr, i, size)</span>:</span></span><br><span class="line">        left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> left &lt;= size:</span><br><span class="line">            right = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span></span><br><span class="line">            largest = right <span class="hljs-keyword">if</span> right &lt;= size <span class="hljs-keyword">and</span> arr[right] &gt;= arr[left] <span class="hljs-keyword">else</span> left</span><br><span class="line">            largest = largest <span class="hljs-keyword">if</span> arr[largest] &gt;= arr[i] <span class="hljs-keyword">else</span> i</span><br><span class="line">            <span class="hljs-keyword">if</span> largest == i:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            self.swap(arr, largest, i)</span><br><span class="line">            i = largest</span><br><span class="line">            left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, arr, i, j)</span>:</span></span><br><span class="line">        arr[i], arr[j] = arr[j], arr[i]</span><br></pre></td></tr></table></figure><p><strong>下面是严格根据算法导论实现的堆排序，其中max_heapify的过程写了递归和非递归两个版本，实测排序10万个随机数组，非递归版本和递归版本分别需要24秒和27秒。</strong></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heapsort</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">        self._size = self._length = len(arr)</span><br><span class="line">        self.build_max_heap(arr)</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self._length<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            self.swap(arr, i, <span class="hljs-number">0</span>)</span><br><span class="line">            self._size -= <span class="hljs-number">1</span></span><br><span class="line">            self.max_heapify(arr, <span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_max_heap</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self._length//<span class="hljs-number">2</span><span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):</span><br><span class="line">            self.max_heapify(arr, i)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_heapify</span><span class="hljs-params">(self, arr, i)</span>:</span></span><br><span class="line">        left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> left &lt; self._size:</span><br><span class="line">            right = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span></span><br><span class="line">            largest = right <span class="hljs-keyword">if</span> right &lt; self._size <span class="hljs-keyword">and</span> arr[right] &gt;= arr[left] <span class="hljs-keyword">else</span> left</span><br><span class="line">            largest = largest <span class="hljs-keyword">if</span> arr[largest] &gt;= arr[i] <span class="hljs-keyword">else</span> i</span><br><span class="line">            <span class="hljs-keyword">if</span> largest == i:</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            self.swap(arr, largest, i)</span><br><span class="line">            i = largest</span><br><span class="line">            left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_heapify_recur</span><span class="hljs-params">(self, arr, i)</span>:</span></span><br><span class="line">        left = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span></span><br><span class="line">        right = <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-keyword">if</span> left &lt; self._size <span class="hljs-keyword">and</span> arr[left] &gt; arr[i]:</span><br><span class="line">            largest = left</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            largest = i</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> right &lt; self._size <span class="hljs-keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">            largest = right</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> largest != i:</span><br><span class="line">            self.swap(arr, largest, i)</span><br><span class="line">            self.max_heapify_recur(arr, largest)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, arr, i, j)</span>:</span></span><br><span class="line">        arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    <span class="hljs-keyword">from</span> comparator <span class="hljs-keyword">import</span> Comparator</span><br><span class="line">    com = Comparator()</span><br><span class="line">    ex = HeapSort()</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):</span><br><span class="line">        arr = com.generate_arr(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="line">        arr1 = list(arr)</span><br><span class="line"></span><br><span class="line">        ex.heapsort(arr1)</span><br><span class="line">        arr2 = com.compare(arr)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> com.confirm(arr1, arr2):</span><br><span class="line">            print(<span class="hljs-string">'oops'</span>)</span><br><span class="line">            print(arr, arr1, arr2)</span><br><span class="line">    print(time.time()-start)</span><br></pre></td></tr></table></figure><h3 id="2-快排"><a href="#2-快排" class="headerlink" title="2. 快排"></a>2. 快排</h3><blockquote><p>随机快排就是随机+partition的过程。partition过程其实就是荷兰国旗问题。</p></blockquote><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_min</span><span class="hljs-params">(self, arr)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">        self.quick_sort(arr, <span class="hljs-number">0</span>, len(arr) - <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(self, arr, l, r)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> l &lt; r:</span><br><span class="line">            self.swap(arr, random.randint(l, r), r)</span><br><span class="line">            left, right = self.partation(arr, l, r)</span><br><span class="line">            self.quick_sort(arr, l, left)</span><br><span class="line">            self.quick_sort(arr, right, r)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partation</span><span class="hljs-params">(self, arr, l, r)</span>:</span></span><br><span class="line">        left = l - <span class="hljs-number">1</span></span><br><span class="line">        right = r</span><br><span class="line">        <span class="hljs-keyword">while</span> l &lt; right:</span><br><span class="line">            <span class="hljs-keyword">if</span> arr[l] &lt; arr[r]:</span><br><span class="line">                left += <span class="hljs-number">1</span></span><br><span class="line">                self.swap(arr, l, left)</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> arr[l] == arr[r]:</span><br><span class="line">                l += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                right -= <span class="hljs-number">1</span></span><br><span class="line">                self.swap(arr, l, right)</span><br><span class="line"></span><br><span class="line">        self.swap(arr, right, r)</span><br><span class="line">        <span class="hljs-keyword">return</span> left, right + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span><span class="hljs-params">(self, arr, i, j)</span>:</span></span><br><span class="line">        arr[i], arr[j] = arr[j], arr[i]</span><br></pre></td></tr></table></figure><h3 id="3-归并"><a href="#3-归并" class="headerlink" title="3. 归并"></a>3. 归并</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_main</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> nums</span><br><span class="line">        start = <span class="hljs-number">0</span></span><br><span class="line">        end = length - <span class="hljs-number">1</span></span><br><span class="line">        self.merge_sort_recur(nums, start, end)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(self, nums)</span>:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> nums</span><br><span class="line">        i = <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &lt; length:</span><br><span class="line">            start = <span class="hljs-number">0</span></span><br><span class="line">            <span class="hljs-keyword">while</span> start &lt; length:</span><br><span class="line">                middle = start + i - <span class="hljs-number">1</span></span><br><span class="line">                end = min(start + <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>, length - <span class="hljs-number">1</span>)</span><br><span class="line">                <span class="hljs-keyword">if</span> middle &lt; end:</span><br><span class="line">                    self.merge(nums, start, end, middle)</span><br><span class="line">                start += <span class="hljs-number">2</span> * i</span><br><span class="line">            i *= <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort_recur</span><span class="hljs-params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> start == end:</span><br><span class="line">            <span class="hljs-keyword">return</span></span><br><span class="line">        middle = start + ((end - start) &gt;&gt; <span class="hljs-number">1</span>)</span><br><span class="line">        self.merge_sort_recur(nums, start, middle)</span><br><span class="line">        self.merge_sort_recur(nums, middle+<span class="hljs-number">1</span>, end)</span><br><span class="line">        self.merge(nums, start, end, middle)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(self, nums, start, end, middle)</span>:</span></span><br><span class="line">        cur_left = start</span><br><span class="line">        cur_right = middle + <span class="hljs-number">1</span></span><br><span class="line">        temp_list = []</span><br><span class="line">        <span class="hljs-keyword">while</span> cur_left &lt;= middle <span class="hljs-keyword">and</span> cur_right &lt;= end:</span><br><span class="line">            <span class="hljs-keyword">if</span> nums[cur_left] &lt;= nums[cur_right]:</span><br><span class="line">                temp_list.append(nums[cur_left])</span><br><span class="line">                cur_left += <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                temp_list.append(nums[cur_right])</span><br><span class="line">                cur_right += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> cur_left &lt;= middle:</span><br><span class="line">            temp_list.append(nums[cur_left])</span><br><span class="line">            cur_left += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> cur_right &lt;= end:</span><br><span class="line">            temp_list.append(nums[cur_right])</span><br><span class="line">            cur_right += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(start, end+<span class="hljs-number">1</span>):</span><br><span class="line">            nums[i] = temp_list[i - start]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">from</span> comparator <span class="hljs-keyword">import</span> Comparator</span><br><span class="line">    com = Comparator()</span><br><span class="line">    ex = MergeSort()</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):</span><br><span class="line">        arr = com.generate_arr(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="line">        arr1 = list(arr)</span><br><span class="line"></span><br><span class="line">        ex.merge_sort(arr)</span><br><span class="line">        arr2 = com.compare(arr1)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> com.confirm(arr, arr2):</span><br><span class="line">            print(<span class="hljs-string">'oops'</span>)</span><br><span class="line">            print(arr1, arr, arr2)</span><br><span class="line">    print(time.time()-start)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):</span><br><span class="line">        arr = com.generate_arr(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="line">        arr1 = list(arr)</span><br><span class="line"></span><br><span class="line">        ex.merge_main(arr)</span><br><span class="line">        arr2 = com.compare(arr1)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> com.confirm(arr, arr2):</span><br><span class="line">            print(<span class="hljs-string">'oops'</span>)</span><br><span class="line">            print(arr1, arr, arr2)</span><br><span class="line">    print(time.time()-start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">21.85367202758789</span></span><br><span class="line"><span class="hljs-number">42.81224775314331</span></span><br></pre></td></tr></table></figure><p>可以看出非递归版还是快啊，10万个最大长度为100的数组，时间差达到非递归用时了。。</p>]]></content>
    
    <summary type="html">
    
      排序总结
    
    </summary>
    
      <category term="Algorithm" scheme="https://todebug.com/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指offer 第二章 题3-15题解 Python版</title>
    <link href="https://todebug.com/2018/08/19/offer3-15/"/>
    <id>https://todebug.com/2018/08/19/offer3-15/</id>
    <published>2018-08-18T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:47.606Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bryceyang/python_to_the_offer" target="_blank" rel="noopener">Github</a></p><a id="more"></a><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="题3：-数组中的重复数字"><a href="#题3：-数组中的重复数字" class="headerlink" title="题3： 数组中的重复数字"></a>题3： 数组中的重复数字</h4><blockquote><p>在一个长度为n的数组里所有的数字都在0~n-1的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数组。例如，如果输入长度为7的数组{2，3，1，0，2，5，3}，那么对应的输出是重复的2或3.</p></blockquote><p><strong>解法：</strong><br></p><ol><li>可以用辅助hash表存放已经遍历到的元素，如果发现当前遍历到的元素已经在hash表中了，return；</li><li>如果不适用辅助数据结构,那么就要从数组本身特点出发：<br></li></ol><ul><li>数组所有数字在0~n-1范围内，如果我们把这个数组排序，如果没有重复元素，那么数字i就应该在索引位置为i的位置。如果有重复，那么必然一个数字会占据多个索引。</li><li>基于此，我们从头开始遍历，如果<code>numbers[i] != i</code>那么，就把i位置的元素和<code>numbers[i]</code>位置的元素交换（这样就有一个元素放到了如果不重复的情况下的正确位置），如果我们在交换的时候<code>number[i]</code>位置的元素就等于<code>numbers[i]</code>这说明，该数字出现了最少两次，我们得到了一个可能结果。</li></ul><h4 id="题4：二维数组中的查找"><a href="#题4：二维数组中的查找" class="headerlink" title="题4：二维数组中的查找"></a>题4：二维数组中的查找</h4><p><strong>题目：</strong></p><blockquote><p>一个二维数组，从左到右递增，从上到下递增，给定一个数，判断该数是否在数组里。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Find</span><span class="hljs-params">(self, target, array)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""在一个从左到右递增，从上往下递增的数组中查找元素</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            target (int): 待查找数字</span></span><br><span class="line"><span class="hljs-string">            array (list): 待查找数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool: 是否找到</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        row_length = len(array)</span><br><span class="line">        col_length = len(array[<span class="hljs-number">0</span>])</span><br><span class="line">        <span class="hljs-keyword">if</span> row_length == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> col_length == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        i, j = <span class="hljs-number">0</span>, col_length - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">            <span class="hljs-keyword">if</span> array[i][j] == target:</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> array[i][j] &lt; target:</span><br><span class="line">                <span class="hljs-keyword">if</span> i &lt; row_length - <span class="hljs-number">1</span>:</span><br><span class="line">                    i += <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                <span class="hljs-keyword">if</span> j &gt; <span class="hljs-number">0</span>:</span><br><span class="line">                    j -= <span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="题5：替换空格"><a href="#题5：替换空格" class="headerlink" title="题5：替换空格"></a>题5：替换空格</h4><p><strong>题目：</strong></p><blockquote><p>实现一个函数，将字符串中每个空格替换成“%20”.</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">replaceSpace</span><span class="hljs-params">(self, s)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""将s中的空格替换成%20</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            s (str): 给定字符串</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            str: 替换后字符串</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        blank_nums = s.count(<span class="hljs-string">' '</span>)</span><br><span class="line">        original_length = len(s)</span><br><span class="line">        s = list(s)</span><br><span class="line">        s.extend([<span class="hljs-string">'0'</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>*blank_nums)])</span><br><span class="line">        i = original_length - <span class="hljs-number">1</span></span><br><span class="line">        j = original_length + <span class="hljs-number">2</span> * blank_nums - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i &lt;= j:</span><br><span class="line">            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">' '</span>:</span><br><span class="line">                s[j<span class="hljs-number">-2</span>:j+<span class="hljs-number">1</span>] = <span class="hljs-string">'%20'</span></span><br><span class="line">                j -= <span class="hljs-number">3</span></span><br><span class="line">                i -= <span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                s[j] = s[i]</span><br><span class="line">                j -= <span class="hljs-number">1</span></span><br><span class="line">                i -= <span class="hljs-number">1</span></span><br><span class="line">        s = <span class="hljs-string">''</span>.join(s)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="题6：从尾到头打印链表"><a href="#题6：从尾到头打印链表" class="headerlink" title="题6：从尾到头打印链表"></a>题6：从尾到头打印链表</h4><p><strong>题目：</strong></p><blockquote><p>输入一个链表的头部，从尾到头打印每个节点的值</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.res = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printListFromTailToHead</span><span class="hljs-params">(self, listNode)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""从尾到头打印链表，将打印结果存入数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            listNode (ListNode): 链表头</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            list: 数组结果</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> listNode <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            self.printListFromTailToHead(listNode.next)</span><br><span class="line">            self.res.append(listNode.val)</span><br><span class="line">        <span class="hljs-keyword">return</span> self.res</span><br></pre></td></tr></table></figure><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="题7：重建二叉树"><a href="#题7：重建二叉树" class="headerlink" title="题7：重建二叉树"></a>题7：重建二叉树</h4><p><strong>题目：</strong></p><blockquote><p>给定一个二叉树的前序序列和中序序列，请重建该二叉树。</p></blockquote><p><strong>解法：</strong> <br></p><p>找树根，然后递归建立左右子树。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-string">"""根据前序序列和中序序列重建二叉树</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reConstructBinaryTree</span><span class="hljs-params">(self, pre, tin)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""根据前序序列和中序序列重建二叉树</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            pre (list): 前序遍历序列</span></span><br><span class="line"><span class="hljs-string">            tin (list): 中序遍历序列</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            TreeNode: 重建二叉树头</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> len(pre) != len(tin) <span class="hljs-keyword">or</span> len(pre) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> len(tin) == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        root = TreeNode(pre[<span class="hljs-number">0</span>])</span><br><span class="line">        <span class="hljs-keyword">if</span> pre[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> tin:</span><br><span class="line">            value = tin.index(pre[<span class="hljs-number">0</span>])</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        left_tin, right_tin = tin[:value], tin[value+<span class="hljs-number">1</span>:]</span><br><span class="line">        left_pre, right_pre = pre[<span class="hljs-number">1</span>:<span class="hljs-number">1</span>+len(left_tin)], pre[<span class="hljs-number">1</span>+len(left_tin):]</span><br><span class="line">        root.left = self.reConstructBinaryTree(left_pre, left_tin)</span><br><span class="line">        root.right = self.reConstructBinaryTree(right_pre, right_tin)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    pre = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]</span><br><span class="line">    tin = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]</span><br><span class="line">    ex = Solution()</span><br><span class="line">    root = ex.reConstructBinaryTree(pre, tin)</span><br><span class="line">    print(root.val, <span class="hljs-string">' '</span>, root.left.val, <span class="hljs-string">' '</span>, root.right.val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="题8：二叉树的下一个节点"><a href="#题8：二叉树的下一个节点" class="headerlink" title="题8：二叉树的下一个节点"></a>题8：二叉树的下一个节点</h4><p><strong>题目：</strong></p><blockquote><p>给定一棵二叉树和其中一个节点，如何找出中序序列的下一个节点？树中的节点除了有两个分别指向左、右节点的指针，还有一个指向父节点的指针。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeLinkNode</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="hljs-keyword">None</span></span><br><span class="line">        self.right = <span class="hljs-keyword">None</span></span><br><span class="line">        self.next = <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetNext</span><span class="hljs-params">(self, pNode)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""查找给定节点的下一个节点</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            pNode (TreeLinkNode): 给定二叉树头</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            TreeLinkNode: 给定节点的下一个节点，没有则是None</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> pNode.right:</span><br><span class="line">            p = pNode.right</span><br><span class="line">            <span class="hljs-keyword">while</span> p.left:</span><br><span class="line">                p = p.left</span><br><span class="line">            <span class="hljs-keyword">return</span> p</span><br><span class="line">        <span class="hljs-keyword">elif</span> pNode.next <span class="hljs-keyword">and</span> pNode.next.left == pNode:</span><br><span class="line">            <span class="hljs-keyword">return</span> pNode.next</span><br><span class="line">        <span class="hljs-keyword">elif</span> pNode.next <span class="hljs-keyword">and</span> pNode.next.right == pNode:</span><br><span class="line">            p = pNode</span><br><span class="line">            <span class="hljs-keyword">while</span> p.next <span class="hljs-keyword">and</span> p.next.next:</span><br><span class="line">                <span class="hljs-keyword">if</span> p.next.next.left == p.next:</span><br><span class="line">                    <span class="hljs-keyword">return</span> p.next.next</span><br><span class="line">                p = p.next</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h3><h4 id="题9：用两个栈实现队列"><a href="#题9：用两个栈实现队列" class="headerlink" title="题9：用两个栈实现队列"></a>题9：用两个栈实现队列</h4><p><strong>题目：</strong></p><blockquote><p>用两个栈实现一个队列。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.data = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, item)</span>:</span></span><br><span class="line">        self.data.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.data.pop()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span> <span class="hljs-keyword">if</span> len(self.data) <span class="hljs-keyword">else</span> <span class="hljs-keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.stack1 = Stack()</span><br><span class="line">        self.stack2 = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, node)</span>:</span></span><br><span class="line">        self.stack1.push(node)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.stack2.is_empty():</span><br><span class="line">            self.dao()</span><br><span class="line">        <span class="hljs-keyword">return</span> self.stack2.pop()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dao</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.stack1.is_empty():</span><br><span class="line">            self.stack2.push(self.stack1.pop())</span><br></pre></td></tr></table></figure><h3 id="递归和循环"><a href="#递归和循环" class="headerlink" title="递归和循环"></a>递归和循环</h3><h4 id="题10：-斐波那契数列"><a href="#题10：-斐波那契数列" class="headerlink" title="题10： 斐波那契数列"></a>题10： 斐波那契数列</h4><h5 id="题目一：求斐波那契数列的第n项"><a href="#题目一：求斐波那契数列的第n项" class="headerlink" title="题目一：求斐波那契数列的第n项"></a>题目一：求斐波那契数列的第n项</h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(self, n)</span>:</span></span><br><span class="line">        fib0, fib1 = <span class="hljs-number">0</span>, <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> n</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):</span><br><span class="line">            fibi = fib0 + fib1</span><br><span class="line">            fib0 = fib1</span><br><span class="line">            fib1 = fibi</span><br><span class="line">        <span class="hljs-keyword">return</span> fibi</span><br></pre></td></tr></table></figure><h5 id="题目二：跳台阶问题"><a href="#题目二：跳台阶问题" class="headerlink" title="题目二：跳台阶问题"></a>题目二：跳台阶问题</h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jumpFloor</span><span class="hljs-params">(self, number)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># write code here</span></span><br><span class="line">        fib1 = <span class="hljs-number">1</span></span><br><span class="line">        fib2 = <span class="hljs-number">2</span></span><br><span class="line">        <span class="hljs-keyword">if</span> number == <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> fib1</span><br><span class="line">        <span class="hljs-keyword">if</span> number == <span class="hljs-number">2</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> fib2</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>, number+<span class="hljs-number">1</span>):</span><br><span class="line">            fibi = fib1 + fib2</span><br><span class="line">            fib1 = fib2</span><br><span class="line">            fib2 = fibi</span><br><span class="line">        <span class="hljs-keyword">return</span> fibi</span><br></pre></td></tr></table></figure><h5 id="题目三：变态跳台阶问题"><a href="#题目三：变态跳台阶问题" class="headerlink" title="题目三：变态跳台阶问题"></a>题目三：变态跳台阶问题</h5><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jumpFloorII</span><span class="hljs-params">(self, number)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""有时候我们只是缺少一个发现规律的眼睛</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> ** (number - <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="查找和排序"><a href="#查找和排序" class="headerlink" title="查找和排序"></a>查找和排序</h3><h4 id="题11：旋转数组的最小数字"><a href="#题11：旋转数组的最小数字" class="headerlink" title="题11：旋转数组的最小数字"></a>题11：旋转数组的最小数字</h4><p><strong>题目：</strong></p><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组[3, 4, 5, 1, 2]为[1, 2, 3, 4, 5]的一个旋转，该数组的最小值为1.</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minNumberInRotateArray</span><span class="hljs-params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""找到旋转数组中的最小数字</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Args:</span></span><br><span class="line"><span class="hljs-string">            rotateArray (list): 数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            int: 最小数字</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> rotateArray <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(rotateArray) &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">        low = mid = <span class="hljs-number">0</span></span><br><span class="line">        high = len(rotateArray) - <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> rotateArray[low] &gt;= rotateArray[high]:</span><br><span class="line">            mid = (low + high) // <span class="hljs-number">2</span></span><br><span class="line">            <span class="hljs-keyword">if</span> rotateArray[low] == rotateArray[high] <span class="hljs-keyword">and</span> rotateArray[low] == rotateArray[mid]:</span><br><span class="line">                <span class="hljs-keyword">return</span> self.sequential_compare(rotateArray, low, high)</span><br><span class="line">            <span class="hljs-keyword">if</span> rotateArray[mid] &gt;= rotateArray[low]:</span><br><span class="line">                low = mid</span><br><span class="line">            <span class="hljs-keyword">if</span> rotateArray[mid] &lt;= rotateArray[high]:</span><br><span class="line">                high = mid</span><br><span class="line">            <span class="hljs-keyword">if</span> high - low == <span class="hljs-number">1</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> rotateArray[high]</span><br><span class="line">        <span class="hljs-keyword">return</span> rotateArray[mid]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sequential_compare</span><span class="hljs-params">(self, rotateArray, low, high)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> low == high:</span><br><span class="line">            <span class="hljs-keyword">return</span> rotateArray[low]</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(low, high+<span class="hljs-number">1</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> rotateArray[i] &lt; rotateArray[low]:</span><br><span class="line">                <span class="hljs-keyword">return</span> rotateArray[i]</span><br><span class="line">        <span class="hljs-keyword">return</span> rotateArray[low]</span><br></pre></td></tr></table></figure><h3 id="回溯法："><a href="#回溯法：" class="headerlink" title="回溯法："></a>回溯法：</h3><p>回溯法适合由多个步骤组成的问题，并且每个步骤都有多个选项。当我们在某一步选择了其中一个选项时，就进入下一步，然后又面临新的选项。当当前选项不满足条件时，我们就回退到上一步，选择其他选项。</p><h4 id="题12：矩阵中的路径"><a href="#题12：矩阵中的路径" class="headerlink" title="题12：矩阵中的路径"></a>题12：矩阵中的路径</h4><p><strong>解法：</strong> <br><br>此题用回溯法解，如果发现矩阵当前节点能满足路径需要，但是当前节点周围的四个节点都不等于路径下一个值，那么就回退。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasPath</span><span class="hljs-params">(self, matrix, rows, cols, path)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""寻找字符矩阵中相邻元素是否可以组成给定的path</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            matrix &#123;list&#125; -- 字符矩阵</span></span><br><span class="line"><span class="hljs-string">            rows &#123;int&#125; -- 矩阵总行数</span></span><br><span class="line"><span class="hljs-string">            cols &#123;int&#125; -- 矩阵总列数</span></span><br><span class="line"><span class="hljs-string">            path &#123;str&#125; -- 给定字符串路径</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool -- 是否存在路径</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> matrix <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> rows &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> cols &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> path <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line">        mem = [[<span class="hljs-keyword">False</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(cols)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(rows)]</span><br><span class="line">        cur_path_length = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> range(rows):</span><br><span class="line">            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> range(cols):</span><br><span class="line">                cur_path_length = <span class="hljs-number">0</span></span><br><span class="line">                res = self.has_path(matrix, row, col, rows,</span><br><span class="line">                                    cols, cur_path_length, path, mem)</span><br><span class="line">                <span class="hljs-keyword">if</span> res:</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_path</span><span class="hljs-params">(self, matrix, row, col, rows, cols, cur_path_length, path, mem)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""矩阵路径搜索函数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            matrix &#123;list&#125; -- 字符矩阵</span></span><br><span class="line"><span class="hljs-string">            row &#123;int&#125; -- 当前到达矩阵元素的行</span></span><br><span class="line"><span class="hljs-string">            col &#123;int&#125; -- 当前到达矩阵元素的列</span></span><br><span class="line"><span class="hljs-string">            rows &#123;int&#125; -- 矩阵总行数</span></span><br><span class="line"><span class="hljs-string">            cols &#123;int&#125; -- 矩阵总列数</span></span><br><span class="line"><span class="hljs-string">            cur_path_length &#123;int&#125; -- 当前已经确认存在的路径长度</span></span><br><span class="line"><span class="hljs-string">            path &#123;str&#125; -- 给定字符串路径</span></span><br><span class="line"><span class="hljs-string">            mem &#123;list&#125; -- 记录元素是否已经被访问过的矩阵</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool -- 返回row，col元素的邻居能不能继续匹配path</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> cur_path_length == len(path):</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line"></span><br><span class="line">        inner_res = <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> row &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row &lt; rows <span class="hljs-keyword">and</span> col &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> col &lt; cols <span class="hljs-keyword">and</span> \</span><br><span class="line">                matrix[row][col] == path[cur_path_length] <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> mem[row][col]:</span><br><span class="line"></span><br><span class="line">            cur_path_length += <span class="hljs-number">1</span></span><br><span class="line">            mem[row][col] = <span class="hljs-keyword">True</span></span><br><span class="line">            inner_res = self.has_path(matrix, row, col<span class="hljs-number">-1</span>, rows, cols, cur_path_length, path, mem) <span class="hljs-keyword">or</span> \</span><br><span class="line">                self.has_path(matrix, row<span class="hljs-number">-1</span>, col, rows, cols, cur_path_length, path, mem) <span class="hljs-keyword">or</span> \</span><br><span class="line">                self.has_path(matrix, row, col+<span class="hljs-number">1</span>, rows, cols, cur_path_length, path, mem) <span class="hljs-keyword">or</span> \</span><br><span class="line">                self.has_path(matrix, row+<span class="hljs-number">1</span>, col, rows, cols, cur_path_length, path, mem)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> inner_res:</span><br><span class="line">                cur_path_length -= <span class="hljs-number">1</span></span><br><span class="line">                mem[row][col] = <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> inner_res</span><br></pre></td></tr></table></figure><h4 id="题13-机器人的运动范围"><a href="#题13-机器人的运动范围" class="headerlink" title="题13: 机器人的运动范围"></a>题13: 机器人的运动范围</h4><p><strong>解法：</strong> <br><br>与题12类似，回溯法求解。</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(self, threshold, rows, cols)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""主函数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            threshold &#123;int&#125; -- 阈值，当前访问的格子横纵坐标坐标各位数字加起来不应超过threshold</span></span><br><span class="line"><span class="hljs-string">            rows &#123;int&#125; -- 矩阵总行数</span></span><br><span class="line"><span class="hljs-string">            cols &#123;int&#125; -- 矩阵总列数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            int -- 可以访问的坐标数</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> threshold &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> rows &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> cols &lt;= <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">        visited = [<span class="hljs-keyword">False</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(rows * cols)]</span><br><span class="line"></span><br><span class="line">        count = self.moving_count(threshold, rows, cols, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, visited)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">moving_count</span><span class="hljs-params">(self, threshold, rows, cols, row, col, visited)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""递归计算可去做标数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Arguments:</span></span><br><span class="line"><span class="hljs-string">            row &#123;int&#125; -- 当前横坐标</span></span><br><span class="line"><span class="hljs-string">            col &#123;int&#125; -- 当前纵坐标</span></span><br><span class="line"><span class="hljs-string">            visited &#123;list&#125; -- 记录当前坐标是否已经被计算过</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            [type] -- [description]</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        count = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.check(threshold, rows, cols, row, col, visited):</span><br><span class="line">            <span class="hljs-comment"># 防止重复计算</span></span><br><span class="line">            visited[row * cols + col] = <span class="hljs-keyword">True</span></span><br><span class="line">            count = <span class="hljs-number">1</span> + self.moving_count(threshold, rows, cols, row, col<span class="hljs-number">-1</span>, visited) \</span><br><span class="line">                      + self.moving_count(threshold, rows, cols, row<span class="hljs-number">-1</span>, col, visited) \</span><br><span class="line">                      + self.moving_count(threshold, rows, cols, row, col+<span class="hljs-number">1</span>, visited) \</span><br><span class="line">                      + self.moving_count(threshold, rows, cols, row+<span class="hljs-number">1</span>, col, visited)</span><br><span class="line">        <span class="hljs-keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span><span class="hljs-params">(self, threshold, rows, cols, row, col, visited)</span>:</span></span><br><span class="line">        <span class="hljs-string">"""判断该坐标是否可以访问</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">        Returns:</span></span><br><span class="line"><span class="hljs-string">            bool</span></span><br><span class="line"><span class="hljs-string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> row &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row &lt; rows <span class="hljs-keyword">and</span> col &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> col &lt; cols <span class="hljs-keyword">and</span> \</span><br><span class="line">                self.get_sum(row) + self.get_sum(col) &lt;= threshold <span class="hljs-keyword">and</span> \</span><br><span class="line">                <span class="hljs-keyword">not</span> visited[row * cols + col]:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">True</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sum</span><span class="hljs-params">(self, num)</span>:</span></span><br><span class="line">        total = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>:</span><br><span class="line">            total += num % <span class="hljs-number">10</span></span><br><span class="line">            num //= <span class="hljs-number">10</span></span><br><span class="line">        <span class="hljs-keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="回溯法总结："><a href="#回溯法总结：" class="headerlink" title="回溯法总结："></a>回溯法总结：</h4><p><strong>回溯法顾名思义最重要的是回溯，题12是最典型的回溯法，在该题中，只有当前节点的下一步走不通，我们是会把当前节点重新标记为未访问的，这样就“回退”了。<br><br>但纵观这两个题，其实这就是一个递归，主要的还是对分支情况以及递归分支返回的处理。<br><br>在回溯法中，只有条件符合，才会继续递归，要不然本次递归分支就直接被抛弃了。</strong></p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>如果题目是求最优解，且该题能够分解成若干个子问题，而且子问题还有重叠，这类题就适合用dp来解。<br><br>dp从暴力递归中来，可以用dp解决的题目一般都能用暴力递归解决，但是由于子问题有重叠，所以用递归就会造成大量的重复计算，而dp就是要找到问题之间存在的规律，从小到大的解决问题。</p><h4 id="题14-剪绳子"><a href="#题14-剪绳子" class="headerlink" title="题14: 剪绳子"></a>题14: 剪绳子</h4><p><strong>题目：</strong></p><blockquote><p>给你一根长度为n的绳子，请把绳子剪成m段，使得小段乘积最大。（n&gt;1, m&gt;1）</p></blockquote><p><strong>解法：</strong> <br><br><code>f(n) = max(f(i) * f(n-i))</code></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cut_rope</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n == <span class="hljs-number">3</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">    temp_arr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n+<span class="hljs-number">1</span>)]</span><br><span class="line">    pre = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># f(1), f(2), f(3)作为别人切下的子过程的时候与自己本身返回时不同的</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(pre)):</span><br><span class="line">        temp_arr[i] = pre[i]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>, n+<span class="hljs-number">1</span>):</span><br><span class="line">        max_mul = <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, i//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>):</span><br><span class="line">            max_mul = max(temp_arr[j] * temp_arr[i - j], max_mul)</span><br><span class="line">        temp_arr[i] = max_mul</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> temp_arr[n]</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，f(3)以及f(3)以下的绳子在剪自身和作为别的绳子的子段的时候返回值是不一样的。绳子长度为3，最少剪一刀应该返回2，但从更长的绳子上剪下的绳子长度为3的贡献值应该为3（而不是2.）</strong></p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>位运算在某些情况下非常有用。比如利用异或可以求数组中唯一不重复元素，利用(n - 1）&amp; n可以将n中最后一个1清零，可以计算n中比特位为1的个数，可以判断n是不是2的整数次方等等；</p><h4 id="题15：二进制中1的个数"><a href="#题15：二进制中1的个数" class="headerlink" title="题15：二进制中1的个数"></a>题15：二进制中1的个数</h4><p><strong>解法：</strong> <br><br>这道题有多种解法：<br><br>&emsp;&emsp;1.把数字n和1做与运算，判断n的最低位是不是1，接着把1左移一位，判断n的次低位是不是1。重复这个过程，我们就能判断n中有多少位1；<br><br>&emsp;&emsp;2.有一个小技巧：把一个整数减去1，然后再和原整数做与运算，会把该整数最右边的1变成0。那么整数里有几个1，我们就比较几次就得了。<br></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 解法1：</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numer2</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    count = <span class="hljs-number">0</span></span><br><span class="line">    flag = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">while</span> flag &lt;= <span class="hljs-number">2</span> ** <span class="hljs-number">31</span>:</span><br><span class="line">        <span class="hljs-keyword">if</span> n &amp; flag:</span><br><span class="line">            count += <span class="hljs-number">1</span></span><br><span class="line">        flag = flag &lt;&lt; <span class="hljs-number">1</span></span><br><span class="line">        print(flag, bin(flag))</span><br><span class="line">    <span class="hljs-keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 解法2：</span></span><br><span class="line"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-params">(n)</span>:</span></span><br><span class="line">    count = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> c_int(n).value:</span><br><span class="line">        count += <span class="hljs-number">1</span></span><br><span class="line">        n = (n - <span class="hljs-number">1</span>) &amp; n</span><br><span class="line">    <span class="hljs-keyword">return</span> count</span><br></pre></td></tr></table></figure><p><strong>注意：因为python里int是没有位数限制的，当int超过32位时，python会自动扩充，所以如果解法1中对flag不限制，while会无限循环下去直到溢出；解法2中如果不使用c_int做限制，那么对于n是负数的情况同样会无限循环到溢出。</strong></p>]]></content>
    
    <summary type="html">
    
      剑指offer10-15题解
    
    </summary>
    
      <category term="Coding" scheme="https://todebug.com/categories/Coding/"/>
    
    
      <category term="剑指offer" scheme="https://todebug.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>单调栈题总结</title>
    <link href="https://todebug.com/2018/08/16/summary-of-monotous-stack-questions/"/>
    <id>https://todebug.com/2018/08/16/summary-of-monotous-stack-questions/</id>
    <published>2018-08-15T16:00:00.000Z</published>
    <updated>2018-11-05T08:44:47.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-单调栈求解的基本问题："><a href="#1-单调栈求解的基本问题：" class="headerlink" title="1. 单调栈求解的基本问题："></a>1. 单调栈求解的基本问题：</h3><blockquote><p>给定一个数组，求数组中每个元素左右两边离其最近的元素，要求时间复杂度O(n)。</p></blockquote><a id="more"></a><p>分析：</p><blockquote><p>基本解法为对每一个元素，我们都遍历该元素两边的元素，然后都返回第一个比其小的元素。这样时间复杂度明显为O(n*n)。如果要满足时间复杂度要求，我们就要借助于单调栈来实现。</p></blockquote><h4 id="单调栈思想："><a href="#单调栈思想：" class="headerlink" title="单调栈思想："></a>单调栈思想：</h4><blockquote><p><strong>栈中元素只能是单调的。</strong> <br><br>对于上题我们可以建立一个从底至顶递增的单调栈。<br><br>在遍历数组元素的时候:<br><br>&emsp;&emsp;1.如果栈不为空，且当前遍历到的元素小于栈顶元素，就把栈顶元素抛出直到栈为空或者栈顶元素小于当前遍历到的元素，然后把当前遍历到的元素压栈；<br><br>&emsp;&emsp;2.如果栈为空，且当前遍历到的元素大于栈顶元素，那么就直接把当前遍历到的元素压栈；<br><br>数组遍历完之后，如果栈不为空：<br><br>&emsp;&emsp;从栈中抛出元素，此时从栈中抛出的元素右边没有比其小的值；</p></blockquote><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">monotone_stack</span><span class="hljs-params">(arr)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""基础单调栈实现：求数组里每个元素左右离其最近的小于它的值；</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Arguments:</span></span><br><span class="line"><span class="hljs-string">        arr &#123;[list]&#125; -- [输入数组]</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Returns:</span></span><br><span class="line"><span class="hljs-string">        [list] -- [数组元素为列表，包含原数组对应下标值得左右最小值]</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line"></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    stack = []</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr)):</span><br><span class="line">        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> arr[i] &lt; arr[stack[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]]:</span><br><span class="line">            item = stack.pop()</span><br><span class="line">            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> item:</span><br><span class="line">                res[_] = [arr[stack[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]], arr[i]</span><br><span class="line">                          ] <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">else</span> [<span class="hljs-keyword">None</span>, arr[i]]</span><br><span class="line">        <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">and</span> arr[i] == arr[stack[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]]:</span><br><span class="line">            stack[<span class="hljs-number">-1</span>].append(i)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            stack.append([i])</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> stack:</span><br><span class="line">        item = stack.pop()</span><br><span class="line">        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> item:</span><br><span class="line">            res[_] = [arr[stack[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]], <span class="hljs-keyword">None</span>] <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">else</span> [<span class="hljs-keyword">None</span>, <span class="hljs-keyword">None</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="2-求最大子矩阵的大小"><a href="#2-求最大子矩阵的大小" class="headerlink" title="2. 求最大子矩阵的大小"></a>2. 求最大子矩阵的大小</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><blockquote><p>给定一个整型矩阵map，其中的值只有0和1两种，求其中全是1的所有矩形区域中，最大的矩形区域为1的数量。<br><br>例如：<br><br>1 1 1 1<br><br>其中，最大的矩形区域有3个1，所以返回3。<br><br>再如：<br><br>1 0 1 1<br><br>1 1 1 1<br><br>1 1 1 0<br><br>其中，最大的矩形区域有6个1，所以返回6。</p></blockquote><p>分析：<br></p><blockquote><p>单调栈相关的问题，有些时候就好像在拿着一把竖直的尺子从中间往两边扩，扩到规则限定的边界。比如在题1中就是扩到两边离它最近的比它小的值所在的地方。对于这个题，如果我们把结果要的小矩形的数量，转换为矩形的面积。那么就可以做到如下图的转化：</p></blockquote><p><img src="/assets/blog_images/get_max_submatrix.jpeg" alt="矩阵转化图"></p><blockquote><p>那么把以每一行为底得到的数组看做一个直方图数组，我们就可以利用单调栈求得每个直方图数组上能联通的最大矩形面积。大概过程如下：</p></blockquote><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_max_submatrix</span><span class="hljs-params">(matrix)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""得到矩阵中元素都为1的矩形区域包含的最大元素个数</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Arguments:</span></span><br><span class="line"><span class="hljs-string">        matrix &#123;list&#125; -- 矩阵数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Returns:</span></span><br><span class="line"><span class="hljs-string">        int -- 最大区域元素个数</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    mat = copy.deepcopy(matrix)</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(mat)<span class="hljs-number">-1</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(mat[<span class="hljs-number">0</span>])):</span><br><span class="line">            mat[i+<span class="hljs-number">1</span>][j] = mat[i][j] + mat[i+<span class="hljs-number">1</span>][j] <span class="hljs-keyword">if</span> mat[i+<span class="hljs-number">1</span>][j] != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    max_area = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> mat:</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(len(arr)):</span><br><span class="line">            <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> arr[_] &lt;= arr[stack[<span class="hljs-number">-1</span>]]:</span><br><span class="line">                item = arr[stack.pop()]</span><br><span class="line">                cur_area = item * (_ - stack[<span class="hljs-number">-1</span>] - <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">else</span> item * _</span><br><span class="line">                max_area = max(max_area, cur_area)</span><br><span class="line">            stack.append(_)</span><br><span class="line">        <span class="hljs-keyword">while</span> stack:</span><br><span class="line">            item = arr[stack.pop()]</span><br><span class="line">            cur_area = item * \</span><br><span class="line">                (len(arr) - stack[<span class="hljs-number">-1</span>] - <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">else</span> item * len(arr)</span><br><span class="line">            max_area = max(max_area, cur_area)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> max_area</span><br></pre></td></tr></table></figure><h3 id="3-烽火台"><a href="#3-烽火台" class="headerlink" title="3. 烽火台"></a>3. 烽火台</h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><blockquote><p>战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都处于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。<br><br>一旦发生外敌入侵事件，山顶上的岗哨将点燃烽烟。若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。<br><br>小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。<br><br>输入: <br><br>输入中有多组测试数据。每组测试数据的第一行为一个整数n（3 &lt;=n &lt;= 10^6），为首都周围的小山数量，第二行为n个整数，依次表示小山的高度h，（1 &lt;= h &lt;= 10^9）。<br><br>输出: <br><br>对每组测试数据，在单独的一行中输出能相互观察到的岗哨的对数。<br><br><br><br>样例输入：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 4 5 3</span><br></pre></td></tr></table></figure></p></blockquote><p>样例输出：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure></p><p>分析：<br></p><blockquote><p>&emsp;&emsp;1.对于所给数组元素不重复的情况：<br><br>&emsp;&emsp;&emsp;&emsp;除了数组中的最大以及次大元素，其他每个元素都有两个可以瞭望到的烽火台；在最大以及次大之间可以互相瞭望，所以总共的可以相互观察的岗哨是<code>(n-2)*2 + 1</code>。<br><br>&emsp;&emsp;2.对于所给数组有重复值的情况：<br><br>&emsp;&emsp;&emsp;&emsp;此时不能在套公式了。我们现在首先确定我们遍历数组的原则是从小找大。这个时候就可以借助单调栈了，所不同的是我们这次是要找离当前遍历到的元素最近的比它大的元素位置。<br><br>&emsp;&emsp;3.对于重复值的处理请看代码；</p></blockquote><h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_next_index</span><span class="hljs-params">(cur_index, arr)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""得到循环数组arr给定下标cur_index的下一个下标</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Arguments:</span></span><br><span class="line"><span class="hljs-string">        cur_index &#123;int&#125; -- 当前下标</span></span><br><span class="line"><span class="hljs-string">        arr &#123;list&#125; -- 给定循环数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Returns:</span></span><br><span class="line"><span class="hljs-string">        int -- 下一个遍历到的下标值</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> cur_index == len(arr) - <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> cur_index + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_inter_pairs</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""得到中间没有更高山峰的相等高度山峰之间可互相瞭望的对数，即C(n, 2)</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Arguments:</span></span><br><span class="line"><span class="hljs-string">        n &#123;int&#125; -- 中间没有更高山峰的相等高度山峰数目</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Returns:</span></span><br><span class="line"><span class="hljs-string">        int -- 可互相瞭望的山峰对</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> (n * (n - <span class="hljs-number">1</span>)) // <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_watch_tower_pairs</span><span class="hljs-params">(arr)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""得到环形山中可互相瞭望的山峰对数目</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Arguments:</span></span><br><span class="line"><span class="hljs-string">        arr &#123;list&#125; -- 环形山峰高度数组</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    Returns:</span></span><br><span class="line"><span class="hljs-string">        int -- 山峰对数目</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span> <span class="hljs-keyword">or</span> len(arr) &lt; <span class="hljs-number">2</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> len(set(arr)) == len(arr):</span><br><span class="line">        <span class="hljs-keyword">return</span> (len(arr) - <span class="hljs-number">2</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    res = <span class="hljs-number">0</span></span><br><span class="line">    stack = []</span><br><span class="line">    cur_index = max_index = arr.index(max(arr))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr)):</span><br><span class="line">        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> arr[cur_index] &gt; stack[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]:</span><br><span class="line">            item = stack.pop()</span><br><span class="line">            res += get_inter_pairs(item[<span class="hljs-number">-1</span>]) + item[<span class="hljs-number">-1</span>] * <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">and</span> arr[cur_index] == stack[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]:</span><br><span class="line">            stack[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>] += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            stack.append([arr[cur_index], <span class="hljs-number">1</span>])</span><br><span class="line">        cur_index = get_next_index(cur_index, arr)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span> stack:</span><br><span class="line">        item = stack.pop()</span><br><span class="line">        res += get_inter_pairs(item[<span class="hljs-number">-1</span>])</span><br><span class="line">        <span class="hljs-keyword">if</span> stack:</span><br><span class="line">            res += item[<span class="hljs-number">-1</span>]</span><br><span class="line">            <span class="hljs-keyword">if</span> len(stack) &gt; <span class="hljs-number">1</span>:</span><br><span class="line">                res += item[<span class="hljs-number">-1</span>]</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                res = res + item[<span class="hljs-number">-1</span>] <span class="hljs-keyword">if</span> stack[<span class="hljs-number">-1</span>][<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> res</span><br><span class="line">    <span class="hljs-keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试:"></a>代码测试:</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">    arr1 = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>]</span><br><span class="line">    arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]</span><br><span class="line">    mat = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">           [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],</span><br><span class="line">           [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], ]</span><br><span class="line">    <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> [arr1, arr2]:</span><br><span class="line">        print(<span class="hljs-string">"数组 &#123;&#125; 单调栈结果：\n&#123;&#125;"</span>.format(arr, sorted(</span><br><span class="line">            monotone_stack(arr).items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])))</span><br><span class="line">    print(<span class="hljs-string">''</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> arr <span class="hljs-keyword">in</span> [arr1, arr2]:</span><br><span class="line">        print(<span class="hljs-string">"环形山数组 &#123;&#125; 有 &#123;&#125; 对可互望岗哨。"</span>.format(arr, get_watch_tower_pairs(arr)))</span><br><span class="line">    print(<span class="hljs-string">''</span>)</span><br><span class="line">    print(<span class="hljs-string">"矩阵 &#123;&#125; 里最大含1子矩阵个数是：&#123;&#125;"</span>.format(mat, get_max_submatrix(mat)))</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ne, 2]), (1, [None, 1]), (2, [None, None]), (3, [None, None]), (4, [1, 3]), (5, [1, None]), (6, [3, None])]</span><br><span class="line">数组 [1, 2, 4, 5, 3] 单调栈结果：</span><br><span class="line">[(0, [None, None]), (1, [1, None]), (2, [2, 3]), (3, [4, 3]), (4, [2, None])]</span><br><span class="line"></span><br><span class="line">环形山数组 [3, 2, 1, 1, 6, 3, 7] 有 12 对可互望岗哨。</span><br><span class="line">环形山数组 [1, 2, 4, 5, 3] 有 7 对可互望岗哨。</span><br><span class="line"></span><br><span class="line">矩阵 [[1, 0, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]] 里最大含1子矩阵个数是：6</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      单调栈题总结
    
    </summary>
    
      <category term="Algorithm" scheme="https://todebug.com/categories/Algorithm/"/>
    
    
  </entry>
  
</feed>
